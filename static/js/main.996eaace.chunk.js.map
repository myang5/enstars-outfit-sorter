{"version":3,"sources":["arrow_down_darkblue.svg","instructions0.png","instructions1.png","platform.svg","arrow_left_darkblue.svg","arrow_up_darkblue.svg","filter_darkblue.svg","Instructions.js","TeamBuilder.js","Sidebar.js","OutfitList.js","sheetsCreds.js","Gsx2json.js","Main.js","serviceWorker.js","index.js"],"names":["module","exports","Instructions","props","className","id","target","href","src","linkSharingOff","alt","linkSharingOn","onClick","toggleInstructions","TeamView","state","isInstructions","bind","this","setState","activeJob","teamMembers","length","members","map","member","index","TeamMember","key","selAttr","toggleOutfitList","dataBtn","getUserData","document","querySelector","value","helpBtn","sheetId","type","defaultValue","React","Component","cls","hasOwnProperty","Platform","hasMember","Image","obj","AttrList","attr","bonus","maxValue","hideIcon","platform","JobViewContainer","isJobList","toggleJobList","console","log","jobViewProps","jobListProps","jobs","selectJob","style","top","PureComponent","JobView","changeJobBtn","filter","baseline","forEach","reduce","accumulator","ProgressBar","progress","Object","keys","percent","Math","min","width","floor","JobList","menus","activeMenu","viewJob","toggleProperty","toggleMenu","getAvailableMenus","getMenuJobs","prop","menu","job","menuOpts","data","Set","trim","opt","has","jobDetailBtn","JobTabMenu","JobSelect","JobDetail","button","tabs","isViewing","closeBtn","Sidebar","filters","isFilterMenu","toggleFilterMenu","setsArr","getSetsFromOutfitArray","outfitsArr","Array","i","add","row","j","sortMenuLandscape","sortOutfits","toggleMade","sortMenuPortrait","arrowLeft","status","sortMenu","submitFilterSelection","SortMenu","activeSort","isAscending","toggleSort","sort","sortOpts","SortOpt","isActive","unshift","ToggleMade","height","arrowUp","arrowDown","AttrIcon","htmlFor","FilterMenu","set","heading","from","selKey","isMenuActive","optionsArr","submitSelection","display","Filter","selected","toggleOption","clearSelect","selectAll","clearFilter","option","newSet","delete","slice","indexOf","splice","size","FilterOptions","SelectOptions","options","OutfitList","error","isLoading","hasMore","loadedOutfits","outfitsToLoad","onScroll","loadOutfits","onScrollThrottled","throttle","event","persist","window","innerHeight","scrollTop","scrollHeight","concat","outfits","elt","OutfitCard","Character","Outfit","info","inTeam","includes","setMember","placeholders","push","view","apiKey","spreadsheetId","matchFilters","query","queriedHeader","replace","queriedValue","convertArraysToObjects","arrs","result","headers","newRow","header","isNaN","Number","Main","allOutfits","userOutfits","userSheetId","idolStats","isInclusive","isOutfitList","teamSlot","prepareOutfitData","calculateTotalBonus","toggleSearchTypeTrue","toggleSearchTypeFalse","sortByFilter","fetch","then","json","values","newState","arr","fill","outfitSource","newMade","selMade","a","b","newMember","newTeam","conditions","split","str","queryConfig","getQueryAndConditions","config","meetsConditions","queried","condition","currVal","JSON","parse","stringify","filterData","addIdolStatus","attrSet","outfitObj","total","stats","url","urlStr","res","handleErrors","toUpperCase","userList","acc","outfit","outfitMatch","low","high","middle","emptyTeam","preparedOutfits","userStatus","idol","name","response","code","outfitListKey","teamViewProps","outfitListProps","sidebarProps","toggleTrue","toggleFalse","numberText","statusBarProps","StatusBar","marginLeft","toLowerCase","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"6HAAAA,EAAOC,QAAU,IAA0B,iD,mBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,iD,gBCA3CD,EAAOC,QAAU,IAA0B,+C,gBCA3CD,EAAOC,QAAU,IAA0B,6C,oOCI5B,SAASC,EAAaC,GACnC,OACE,yBAAKC,UAAU,WAEb,yBAAKA,UAAU,iBAAiBC,GAAG,gBACjC,yBAAKD,UAAU,gBACb,yBAAKA,UAAU,OACb,uDACA,kDACsB,uBAAGE,OAAO,SAASC,KAAK,wGAAxB,+BADtB,mCAIA,4BACE,2BAAG,oEACH,4BACE,8CADF,4EAGA,4BACE,8CADF,qDAGA,2HAC8F,uBAAGD,OAAO,SAASC,KAAK,0GAAxB,oBAD9F,MAIF,2BACE,6EADF,kEAGA,4BACE,2BAAG,gDACH,4BACE,+GACA,yBAAKC,IAAKC,IAAgBC,IAAI,0BAEhC,4BACE,sDACA,yBAAKF,IAAKG,IAAeD,IAAI,gBAGjC,qGAKJ,yBAAKN,UAAU,mBAAkB,yBAAKA,UAAU,MAAMQ,QAAST,EAAMU,oBAApC,Y,qBC1C5BC,EAAb,kDACE,WAAYX,GAAQ,IAAD,8BACjB,cAAMA,IACDY,MAAQ,CACXC,gBAAgB,GAElB,EAAKH,mBAAqB,EAAKA,mBAAmBI,KAAxB,gBALT,EADrB,iEAUIC,KAAKC,UAAS,SAAAJ,GAAW,MAAO,CAAEC,gBAAiBD,EAAMC,qBAV7D,+BAaY,IAAD,OAEP,GAAIE,KAAKf,MAAMiB,WAAaF,KAAKf,MAAMkB,YAAYC,OAAS,EAAG,CAC7D,IAAMC,EAAUL,KAAKf,MAAMkB,YAAYG,KAAI,SAACC,EAAQC,GAClD,OAAO,kBAACC,EAAD,CAAYC,IAAKF,EACtBA,MAAOA,EACPD,OAAQA,EACRI,QAAS,EAAK1B,MAAM0B,QACpBC,iBAAkB,EAAK3B,MAAM2B,sBAE3BC,EAAU,yBAAK3B,UAAU,cAAcQ,QAAS,kBAAM,EAAKT,MAAM6B,YAAYC,SAASC,cAAc,aAAaC,SAAvG,OACVC,EAAU,yBAAKhC,UAAU,WAAWQ,QAASM,KAAKL,oBAAxC,KAC8CK,KAAKf,MAAMkC,QACzE,OACE,oCACE,yBAAKhC,GAAG,WAIN,+CACA,2BAAOA,GAAG,WAAWiC,KAAK,OAAOC,aAAcrB,KAAKf,MAAMkC,UACzDN,EACAK,GAGH,yBAAK/B,GAAG,qBACN,yBAAKA,GAAG,YACLkB,IAGJL,KAAKH,MAAMC,gBAAkB,kBAACd,EAAD,CAAcW,mBAAoBK,KAAKL,sBAGpE,OAAO,SA9ClB,GAA8B2B,IAAMC,WAoDpC,SAASd,EAAWxB,GAClB,IAAMuC,EAAM,cAAgBvC,EAAMsB,OAAOkB,eAAe,QAAYxC,EAAMsB,OAAN,KAAoC,GAAb,WAAmB,IAC9G,OACE,yBAAKrB,UAAWsC,EAAK9B,QAAS,kBAAMT,EAAM2B,iBAAiB3B,EAAMuB,SAC/D,yBAAKtB,UAAU,gBACb,kBAACwC,EAAD,CAAUC,UAAW1C,EAAMsB,SAC3B,kBAACqB,GAAD,CAAOC,IAAK5C,EAAMsB,UAEpB,kBAACuB,GAAD,CAAUC,KAAM9C,EAAM0B,QAASqB,MAAO/C,EAAMsB,OAAQ0B,SAAU,IAAKC,UAAU,KAKnF,SAASR,EAASzC,GAChB,OACE,oCACE,yBAAKC,UAAU,WAAWI,IAAK6C,MAC9BlD,EAAM0C,UAAY,yBAAKzC,UAAU,WAAc,MAK/C,IAAMkD,EAAb,kDACE,WAAYnD,GAAQ,IAAD,8BACjB,cAAMA,IACDY,MAAQ,CACXwC,WAAW,GAEb,EAAKC,cAAgB,EAAKA,cAAcvC,KAAnB,gBALJ,EADrB,4DAUIwC,QAAQC,IAAI,iBACZxC,KAAKC,UAAS,SAACJ,EAAOZ,GAAY,MAAO,CAAEoD,WAAYxC,EAAMwC,gBAXjE,+BAeI,GAAIrC,KAAKf,MAAMiB,UAAW,CACxBqC,QAAQC,IAAI,2BACZ,IAAMC,EAAe,CACnBV,KAAM/B,KAAKf,MAAM8C,KACjB7B,UAAWF,KAAKf,MAAMiB,UACtBC,YAAaH,KAAKf,MAAMkB,YACxBmC,cAAetC,KAAKsC,eAEhBI,EAAe,CACnBC,KAAM3C,KAAKf,MAAM0D,KACjBZ,KAAM/B,KAAKf,MAAM8C,KACjB7B,UAAWF,KAAKf,MAAMiB,UACtB0C,UAAW5C,KAAKf,MAAM2D,UACtBN,cAAetC,KAAKsC,eAEtB,OACE,yBAAKnD,GAAG,WACN,kBAAC,EAAYsD,GACb,yBAAKvD,UAAU,UAAU2D,MAAO,CAAEC,IAAK9C,KAAKH,MAAMwC,UAAY,IAAM,UAClE,kBAAC,EAAYK,KAKd,OAAO,SAvClB,GAAsCpB,IAAMyB,eA2CtCC,E,kDACJ,WAAY/D,GAAQ,uCACZA,G,qDAGE,IAAD,OACPsD,QAAQC,IAAI,kBACZ,IAAMS,EAAe,yBAAK/D,UAAU,gBAAgBQ,QAASM,KAAKf,MAAMqD,eAAnD,cACfP,EAAO/B,KAAKf,MAAM8C,KAAKmB,QAAO,SAAAnB,GAAI,OAAI,EAAK9C,MAAMiB,UAAU6B,GAAQ,KACnEoB,EAAW,GACXlC,EAAQ,GAUd,OATAc,EAAKqB,SAAQ,SAAArB,GACXoB,EAASpB,GAAQ,EAAK9C,MAAMiB,UAAU6B,GAEtCd,EAAMc,GAAQ,EAAK9C,MAAMkB,YAAYkD,QAAO,SAACC,EAAa/C,GACxD,OAAIA,EACK+C,EAAc/C,EAAOwB,GAChBuB,IACb,MAGH,oCACE,yBAAKpE,UAAU,UACb,yBAAKA,UAAU,SACb,2BAAIc,KAAKf,MAAMiB,UAAU,WACxB+C,GAEH,6BACA,yBAAK/D,UAAU,YACb,kBAAC0C,GAAD,CAAOC,IAAK7B,KAAKf,MAAMiB,UAAWV,IAAKQ,KAAKf,MAAMiB,UAAX,MACvC,kBAAC4B,GAAD,CAAUG,SAAU,KAAMF,KAAMA,EAAMd,MAAOA,EAAOkC,SAAUA,MAGlE,yBAAKjE,UAAU,cACb,kBAACqE,EAAD,CAAaJ,SAAUA,EAAUlC,MAAOA,U,GAlC5BK,IAAMyB,eAyC5B,SAASQ,EAAYtE,GAEnB,IAAMuE,EAAWC,OAAOC,KAAKzE,EAAMkE,UAAUE,QAAO,SAACC,EAAavB,GAChE,IAAM4B,EAAU1E,EAAMgC,MAAMc,GAAQ9C,EAAMkE,SAASpB,IAAS,EAAI,GAChE,OAAOuB,EAAcM,KAAKC,IAAIF,EAAU,EAAI,KAC3C,GACH,OACE,oCACE,yBAAKxE,GAAG,wBACN,0BAAMA,GAAG,kBAAkB0D,MAAO,CAAEiB,MAAM,GAAD,OAAsB,KAAhB,EAAIN,GAAV,QACzC,0BAAMrE,GAAG,cAAc0D,MAAO,CAAEiB,MAAM,WAExC,yBAAK5E,UAAU,UAAf,uBAAyC0E,KAAKG,MAAiB,IAAXP,GAApD,OAKC,IAAMQ,EAAb,kDACE,WAAY/E,GAAQ,IAAD,8BACjB,cAAMA,IACDY,MAAQ,CACXoE,MAAO,CACL,SAAY,2BACZ,aAAgB,2BAChB,SAAY,2BACZ,KAAQ,OACR,cAAe,iBACf,QAAW,4BAEbC,WAAY,KACZC,QAAS,MAEX,EAAKC,eAAiB,EAAKA,eAAerE,KAApB,gBACtB,EAAKsE,WAAa,EAAKA,WAAWtE,KAAhB,gBAClB,EAAKuE,kBAAoB,EAAKA,kBAAkBvE,KAAvB,gBACzB,EAAKwE,YAAc,EAAKA,YAAYxE,KAAjB,gBAjBF,EADrB,gEAsBIwC,QAAQC,IAAI,6BACZxC,KAAKC,SAAS,CAAEiE,WAAYlE,KAAKf,MAAMiB,UAAX,KAA8BiE,QAASnE,KAAKf,MAAMiB,cAvBlF,qCA0BiBsE,EAAMvD,GACnBjB,KAAKC,SAAL,eAAiBuE,EAAOvD,MA3B5B,iCA8BawD,GACT,IAAMC,EAAM1E,KAAKuE,YAAYE,GAAM,GACnCzE,KAAKC,SAAS,CAAEiE,WAAYO,EAAMN,QAASO,MAhC/C,0CAmCuB,IAAD,OACdC,EAAWlB,OAAOC,KAAK1D,KAAKH,MAAMoE,OAClCA,EAAQ,GACNW,EAAO,IAAIC,IAAI7E,KAAKf,MAAM0D,KAAKrC,KAAI,SAACoE,GAAD,OAASA,EAAG,KAAWA,EAAG,KAASI,OAAS,OAErF,OADAH,EAASvB,SAAQ,SAAA2B,GAAaA,EAAI3E,OAAS,GAAKwE,EAAKI,IAAID,KAAMd,EAAMc,GAAO,EAAKlF,MAAMoE,MAAMc,OACtFd,IAxCX,kCA2CcQ,GACV,OAAOzE,KAAKf,MAAM0D,KAAKO,QAAO,SAACwB,GAAD,QAASA,EAAG,MAAWA,EAAG,KAASI,SAAWL,OA5ChF,+BA+CY,IAAD,OAEDQ,EAAe,yBAAK/F,UAAU,gBAAgBQ,QAAS,WAAQ,EAAKT,MAAM2D,UAAU,EAAK/C,MAAMsE,SAAU,EAAKlF,MAAMqD,kBAArG,cAarB,OAZctC,KAAKH,MAAMsE,SAErB,yBAAKjF,UAAU,iBAAiBC,GAAG,WACjC,yBAAKD,UAAU,eACb,kBAACgG,EAAD,CAAYjB,MAAOjE,KAAKsE,oBAAqBJ,WAAYlE,KAAKH,MAAMqE,WAAYG,WAAYrE,KAAKqE,aACjG,kBAACc,EAAD,CAAWxC,KAAM3C,KAAKuE,YAAYvE,KAAKH,MAAMqE,YAAaC,QAASnE,KAAKH,MAAMsE,QAASC,eAAgBpE,KAAKoE,kBAE9G,yBAAKlF,UAAU,aACb,kBAACkG,EAAD,CAAWV,IAAK1E,KAAKH,MAAMsE,QAASpC,KAAM/B,KAAKf,MAAM8C,KAAMsD,OAAQJ,EAAc3C,cAAetC,KAAKf,MAAMqD,sBA1DvH,GAA6BhB,IAAMC,WAkEnC,SAAS2D,EAAWjG,GAClB,IAAMqG,EAAO7B,OAAOC,KAAKzE,EAAMgF,OAAO3D,KAAI,SAAAI,GACxC,OACE,yBAAKA,IAAKA,EACRxB,UAAW,UAAYD,EAAMiF,aAAexD,EAAM,YAAc,IAChEhB,QAAS,kBAAMT,EAAMoF,WAAW3D,KAC/BzB,EAAMgF,MAAMvD,OAInB,OAAO,yBAAKvB,GAAG,cAAcmG,GAG/B,SAASH,EAAUlG,GACjB,IAAM0D,EAAO1D,EAAM0D,KAAKrC,KAAI,SAAAoE,GAC1B,IAAMa,EAAYtG,EAAMkF,QAAN,MAAyBO,EAAG,IACxChE,EAAMgE,EAAI,WAAaa,EAAY,YAAc,IACvD,OACE,yBAAK7E,IAAKA,EACRxB,UAAW,UAAYqG,EAAY,YAAc,IACjD7F,QAAS,kBAAMT,EAAMmF,eAAe,UAAWM,KAC9CA,EAAI,cAIX,OAAO,yBAAKvF,GAAG,aAAawD,GAG9B,SAASyC,EAAUnG,GACjB,IAAM8C,EAAO9C,EAAM8C,KAAKmB,QAAO,SAAAnB,GAAI,OAAI9C,EAAMyF,IAAI3C,GAAQ,KACnDd,EAAQ,GACdc,EAAKqB,SAAQ,SAAArB,GAAI,OAAId,EAAMc,GAAQ9C,EAAMyF,IAAI3C,MAC7C,IAAMyD,EAAW,yBAAKtG,UAAU,eAAeQ,QAAST,EAAMqD,eAA7C,UACjB,OACE,yBAAKnD,GAAG,aACN,2BAAIF,EAAMyF,IAAI,WACd,kBAAC9C,GAAD,CAAOC,IAAK5C,EAAMyF,IAAKlF,IAAKP,EAAMyF,IAAN,MAC5B,kBAAC5C,GAAD,CAAUG,SAAU,KAAMF,KAAMA,EAAMd,MAAOA,IAC7C,yBAAK/B,UAAU,iBACZD,EAAMoG,OACNG,I,uECvRYC,E,kDACnB,WAAYxG,GAAQ,IAAD,8BACjB,cAAMA,IACDY,MAAQ,CACX6F,QAAS,KACTC,cAAc,GAEhB,EAAKC,iBAAmB,EAAKA,iBAAiB7F,KAAtB,gBANP,E,gEAUjB,IAAM8F,EAAU7F,KAAK8F,uBAAuB9F,KAAKf,MAAM2F,MACvD5E,KAAKC,SAAS,CAAEyF,QAASG,M,6CAGJE,GAIrB,IAFA,IAAML,EAAU1F,KAAKf,MAAMyG,QACrBG,EAAU,IAAIG,MAAMN,EAAQtF,QACzB6F,EAAI,EAAGA,EAAIJ,EAAQzF,OAAQ6F,IAAOJ,EAAQI,GAAK,IAAIpB,IAC5D,IAAK,IAAIoB,EAAI,EAAGA,EAAIP,EAAQtF,OAAQ6F,IAAOJ,EAAQI,GAAGC,IAAIR,EAAQO,IAClE,IAAK,IAAIA,EAAI,EAAGA,EAAIF,EAAW3F,OAAQ6F,IAErC,IADA,IAAME,EAAMJ,EAAWE,GACdG,EAAI,EAAGA,EAAIV,EAAQtF,OAAQgG,IAClCP,EAAQO,GAAGF,IAAIC,EAAIT,EAAQU,KAG/B,OAAOP,I,yCAIP7F,KAAKC,UAAS,SAACJ,GAEb,MADiB,CAAE8F,cAAe9F,EAAM8F,mB,+BAO1C,GAAI3F,KAAKH,MAAM6F,QAAS,CACtB,IAAMW,EAAoB,kBAAC,EAAD,CAAUnH,UAAU,sBAAsByB,QAASX,KAAKf,MAAM0B,QAAS2F,YAAatG,KAAKf,MAAMqH,YAAaC,WAAYvG,KAAKf,MAAMsH,aACvJC,EAAmB,kBAAC,EAAD,CAAUtH,UAAU,kBAAkByB,QAASX,KAAKf,MAAM0B,QAAS2F,YAAatG,KAAKf,MAAMqH,YAAaC,WAAYvG,KAAKf,MAAMsH,aACxJ,OACE,yBAAKpH,GAAG,UAAUD,UAAU,aAC1B,yBAAKA,UAAU,YAAYQ,QAASM,KAAKf,MAAM2B,kBAAkB,yBAAKtB,IAAKmH,IAAWjH,IAAI,YAE1F,0BAAML,GAAG,UAAUa,KAAKf,MAAMyH,QAC9B,yBAAKxH,UAAU,SACZmH,EACD,yBAAKnH,UAAU,mBAAmBQ,QAASM,KAAK4F,kBAAkB,yBAAKtG,IAAK4D,IAAQ1D,IAAI,qBAG1F,kBAAC,EAAD,CAAYmG,aAAc3F,KAAKH,MAAM8F,aACnCD,QAAS1F,KAAKH,MAAM6F,QACpBiB,SAAUH,EACVI,sBAAuB5G,KAAKf,MAAM2H,sBAClChB,iBAAkB5F,KAAK4F,oBAK1B,OAAO,S,GA7DqBtE,IAAMC,WA0GrCsF,E,kDACJ,WAAY5H,GAAQ,IAAD,8BACjB,cAAMA,IACDY,MAAQ,CACXiH,WAAY,cACZC,aAAa,GAEf,EAAKC,WAAa,EAAKA,WAAWjH,KAAhB,gBAND,E,uDASRkH,GAAO,IAAD,OACfjH,KAAKC,UAAS,SAACJ,GACb,OAAIA,EAAMiH,aAAeG,EAChB,CAAEF,aAAclH,EAAMkH,aAEtB,CAAED,WAAYG,EAAMF,aAAa,MAEzC,WAAQ,EAAK9H,MAAMqH,YAAYW,EAAM,EAAKpH,MAAMkH,kB,+BAG3C,IAAD,OACDG,EAAWlH,KAAKf,MAAM0B,QAAQL,KAAI,SAAAyE,GACtC,OAAO,kBAACoC,EAAD,CAASzG,IAAKqE,EACnBA,IAAKA,EACLqC,SAAUrC,IAAQ,EAAKlF,MAAMiH,WAC7BC,YAAa,EAAKlH,MAAMkH,YACxBrH,QAAS,kBAAM,EAAKsH,WAAWjC,SAOnC,OALAmC,EAASG,QAAQ,kBAACF,EAAD,CAASzG,IAAI,cAC5BqE,IAAI,QACJqC,SAAU,gBAAkBpH,KAAKH,MAAMiH,WACvCC,YAAa/G,KAAKH,MAAMkH,YACxBrH,QAAS,kBAAM,EAAKsH,WAAW,mBAE/B,yBAAK7H,GAAG,WAAWD,UAAWc,KAAKf,MAAMC,UAAYc,KAAKf,MAAMC,UAAY,MACzEc,KAAKf,MAAMsH,YAAc,kBAACe,EAAD,CAAYf,WAAYvG,KAAKf,MAAMsH,aAC5DW,O,GApCc5F,IAAMC,WA0C7B,SAAS4F,EAAQlI,GACf,OACE,yBAAKC,UAAW,eAAiBD,EAAMmI,SAAW,UAAY,IAAK1H,QAAST,EAAMS,SAChF,0BAAMR,UAAU,QAAQ2D,MAAO,CAAEiB,MAAO,SAAUyD,OAAQ,SACvDtI,EAAMmI,WAAanI,EAAM8H,YAAc,yBAAKzH,IAAKkI,IAAShI,IAAI,WAAS,yBAAKF,IAAKmI,IAAWjI,IAAI,aAEpF,UAAdP,EAAM8F,IAAkB,kBAAC2C,GAAD,CAAU3F,KAAM9C,EAAM8F,MAAU,8BAAO9F,EAAM8F,MAoB5E,SAASuC,EAAWrI,GAClB,OACE,yBAAKC,UAAU,WAAWC,GAAG,cAC3B,2BAAOiC,KAAK,WAAW1B,QAAST,EAAMsH,aACtC,2BAAOoB,QAAQ,cAAf,sB,IAKAC,E,kDACJ,WAAY3I,GAAQ,IAAD,8BACjB,cAAMA,IACDY,MAAQ,CACXqE,WAAY,IAEd,EAAKG,WAAa,EAAKA,WAAWtE,KAAhB,gBALD,E,uDAQR0E,GACTlC,QAAQC,IAAI,oBACZxC,KAAKC,UAAS,SAACJ,GAAY,MAAO,CAAEqE,WAAYrE,EAAMqE,aAAeO,EAAO,GAAKA,Q,+BAGzE,IAAD,OACDiB,EAAU1F,KAAKf,MAAMyG,QAAQpF,KAAI,SAAAuH,GACrC,IACMC,EADa9B,MAAM+B,KAAKF,GACH,GACrBG,EAAS,MAAQF,EACvB,OACE,kBAAC,EAAD,CAAQpH,IAAKoH,EACXA,QAASA,EACTG,aAAc,EAAKpI,MAAMqE,aAAe4D,EACxCzD,WAAY,kBAAO,EAAKA,WAAWyD,IACnCI,WAAYlC,MAAM+B,KAAKF,GACvBM,gBAAiB,EAAKlJ,MAAM2H,sBAAsBoB,QAIxD,OACE,yBAAK7I,GAAG,aAAaD,UAAU,iBAAiB2D,MAAO,CAAEuF,QAASpI,KAAKf,MAAM0G,aAAe,OAAS,SACnG,yBAAKzG,UAAU,gBACb,wBAAIA,UAAU,mBAAd,cACCc,KAAKf,MAAM0H,SACZ,4CACA,yBAAKxH,GAAG,WACLuG,IAGL,yBAAKxG,UAAU,mBAAkB,yBAAKA,UAAU,MAAMQ,QAASM,KAAKf,MAAM2G,kBAAzC,e,GAvChBtE,IAAMyB,eA8CzBsF,E,kDACJ,WAAYpJ,GAAQ,IAAD,8BACjB,cAAMA,IACDY,MAAQ,CAAEyI,SAAU,IAAIzD,KAC7B,EAAK0D,aAAe,EAAKA,aAAaxI,KAAlB,gBACpB,EAAKyI,YAAc,EAAKA,YAAYzI,KAAjB,gBACnB,EAAK0I,UAAY,EAAKA,UAAU1I,KAAf,gBACjB,EAAK2I,YAAc,EAAKA,YAAY3I,KAAjB,gBANF,E,yDASN4I,GACX,IAAMC,EAAS5I,KAAKH,MAAMyI,SACtBtI,KAAKH,MAAMyI,SAAStD,IAAI2D,GAC1BC,EAAOC,OAAOF,GAGdC,EAAO1C,IAAIyC,GAEb3I,KAAKC,SAAS,CAAEqI,SAAUM,M,oCAI1B5I,KAAKC,SAAS,CAAEqI,SAAU,IAAIzD,Q,kCAI9B,IAAIqD,EAAalI,KAAKf,MAAMiJ,WAAWY,QACjCtI,EAAQ0H,EAAWa,QAAQ/I,KAAKf,MAAM6I,SAC5CI,EAAWc,OAAOxI,EAAO,GACzBR,KAAKC,SAAS,CAAEqI,SAAU,IAAIzD,IAAIqD,O,oCAIlClI,KAAKwI,cACLxI,KAAKf,MAAMkJ,gBAAgB,IAAItD,O,+BAGvB,IAAD,OACP,OACE,yBAAK3F,UAAU,UACb,yBAAKA,UAAU,gBAAgBQ,QAASM,KAAKf,MAAMoF,YACjD,yBAAKnF,UAAU,aAAaI,IAAKmI,MACjC,2BAAIzH,KAAKf,MAAM6I,SACd9H,KAAKH,MAAMyI,SAASW,KAAO,GAAK,uBAAGvJ,QAASM,KAAK0I,aAAjB,iBAElC1I,KAAKf,MAAMgJ,cACV,kBAAC,EAAD,CAAeH,QAAS9H,KAAKf,MAAM6I,QACjCI,WAAYlI,KAAKf,MAAMiJ,WACvBI,SAAUtI,KAAKH,MAAMyI,SACrBH,gBAAiB,kBAAM,EAAKlJ,MAAMkJ,gBAAgB,EAAKtI,MAAMyI,WAC7DjE,WAAYrE,KAAKf,MAAMoF,WACvBkE,aAAcvI,KAAKuI,aACnBC,YAAaxI,KAAKwI,YAClBC,UAAWzI,KAAKyI,iB,GArDPnH,IAAMC,WA2DrB2H,E,uKACM,IAAD,OACP,OACE,yBAAKhK,UAAU,iBACb,6BACE,4BAAQA,UAAU,WAAWQ,QAASM,KAAKf,MAAMuJ,aAAjD,SACA,4BAAQtJ,UAAU,eAAeQ,QAASM,KAAKf,MAAMwJ,WAArD,eAEF,kBAACU,EAAD,CAAerB,QAAS9H,KAAKf,MAAM6I,QACjCI,WAAYlI,KAAKf,MAAMiJ,WACvBI,SAAUtI,KAAKf,MAAMqJ,SACrBC,aAAcvI,KAAKf,MAAMsJ,eAC3B,6BACE,4BAAQrJ,UAAU,YAAYQ,QAAS,WAAQ,EAAKT,MAAMoF,aAAc,EAAKpF,MAAMkJ,oBAAnF,Y,GAbkB7G,IAAMC,WAoBlC,SAAS4H,EAAclK,GACrB,IAAIiJ,EAAajJ,EAAMiJ,WAAWY,MAAM,GAAG7B,OACvCiB,EAAWa,QAAQ9J,EAAM6I,UAAY,GAAKI,EAAWc,OAAOd,EAAWa,QAAQ9J,EAAM6I,SAAU,GACnG,IAAMsB,EAAUlB,EAAW5H,KAAI,SAAUqI,GACvC,OACE,wBAAIjI,IAAKiI,EACPzJ,UAAWD,EAAMqJ,SAAStD,IAAI2D,GAAU,WAAa,GACrDjJ,QAAS,kBAAMT,EAAMsJ,aAAaI,KAClC,6BAAK,+BAAcA,OAGzB,OACE,4BACGS,G,qBCpUcC,E,kDACnB,WAAYpK,GAAQ,IAAD,8BACjB,cAAMA,IACDY,MAAQ,CACXyJ,OAAO,EACPC,WAAW,EACXC,SAAS,EACTC,cAAe,GACfC,cAAe,IAEjB,EAAKC,SAAW,EAAKA,SAAS5J,KAAd,gBAChB,EAAK6J,YAAc,EAAKA,YAAY7J,KAAjB,gBACnB,EAAK8J,kBAAoBC,IAAS,EAAKH,SAAU,KAXhC,E,gEAgBjB3J,KAAK4J,gB,+BAKEG,GACPA,EAAMC,WAMFhK,KAAKH,MAAM0J,WAAcvJ,KAAKH,MAAM2J,SAGpCO,EAAM3K,QACJ6K,OAAOC,YAAcH,EAAM3K,OAAO+K,WAAaJ,EAAM3K,OAAOgL,aAAe,KAE7EpK,KAAK4J,gB,oCAKI,IAAD,OACZ5J,KAAKC,SAAS,CAAEsJ,WAAW,IAAQ,WACjC,EAAKtJ,UAAS,SAACJ,EAAOZ,GACpB,IAAIwK,EAAgB5J,EAAM4J,cAI1B,MAAO,CAAED,SAHTC,EAAgBA,EAAcY,OAAOpL,EAAMqL,QAAQxB,MAAMjJ,EAAM4J,cAAcrJ,OAAQP,EAAM4J,cAAcrJ,OAASP,EAAM6J,iBAC1FtJ,OAASnB,EAAMqL,QAAQlK,OAE1BmJ,WAAW,EAAOE,cAAeA,W,+BAgBhE,IAXQ,IAAD,OAEDa,EAAUtK,KAAKH,MAAM4J,cAAcnJ,KAAI,SAACiK,GAAD,OAC3C,kBAACC,EAAD,CAAY9J,IAAK6J,EAAIE,UAAYF,EAAIG,OAASH,EAAI,eAChDI,KAAMJ,EACNK,OAAQ,EAAK3L,MAAMkB,YAAY0K,SAASN,GACxC5J,QAAS,EAAK1B,MAAM0B,QACpBmK,UAAW,EAAK7L,MAAM6L,eAGtBC,EAAe,GACV9E,EAAI,EAAGA,EAAI,EAAGA,IACrB8E,EAAaC,KAAK,yBAAKtK,IAAKuF,EAAG/G,UAAU,wBAG3C,OACE,yBAAKC,GAAG,aAAawK,SAAU3J,KAAK6J,mBAClC,yBAAK1K,GAAG,aAAaD,UAAWc,KAAKf,MAAMgM,MACxCX,EACoB,SAApBtK,KAAKf,MAAMgM,MAAmBF,IAE/B/K,KAAKH,MAAM2J,SAA+B,SAApBxJ,KAAKf,MAAMgM,MACjC,uBAAG/L,UAAU,UAAb,uB,GA1E8BoC,IAAMyB,eAiF9C,SAASyH,EAAWvL,GAClB,IAAMuC,EAAM,cAAgBvC,EAAM0L,KAAKlJ,eAAe,QAAYxC,EAAM0L,KAAN,KAAkC,GAAb,WAAmB,IAC1G,OACE,yBAAKzL,UAAWsC,EAAK9B,QAAS,kBAAMT,EAAM6L,UAAU7L,EAAM0L,QACvD1L,EAAM2L,QAAU,yBAAK1L,UAAU,UAAf,QACjB,2BAAID,EAAM0L,KAAN,WACJ,2BAAI1L,EAAM0L,KAAN,QACJ,6BACA,yBAAKzL,UAAU,gBACb,kBAAC0C,GAAD,CAAOC,IAAK5C,EAAM0L,KAAMnL,IAAG,UAAKP,EAAM0L,KAAN,UAAL,YAAgC1L,EAAM0L,KAAN,UAC3D,yBAAKzL,UAAU,SACf,kBAAC4C,GAAD,CAAUC,KAAM9C,EAAM0B,QAASqB,MAAO/C,EAAM0L,KAAM1I,SAAU,MAC1D,gBAAiBhD,EAAM0L,MAAS,yBAAKzL,UAAU,SAAf,UAA8B,gCAASD,EAAM0L,KAAK,oBCjGrF,IAAMO,EAAS,0CACTC,EAAgB,+CC6C7B,SAASC,GAAaC,EAAOlF,GAS3B,OAPe1C,OAAOC,KAAK2H,GAAO/K,KAAI,SAACI,GACrC,IAAM4K,EAAgB5K,EAAI6K,QAAQ,MAAO,IACnC1D,EAAMwD,EAAM3K,GACZ8K,EAAerF,EAAImF,GAEzB,GAAIzD,EAAI7C,IAAIwG,GAAiB,OAAO,KAOjC,SAASC,GAAuBC,GAGrC,IAFA,IAAMC,EAAS,GACTC,EAAUF,EAAK,GACZzF,EAAI,EAAGA,EAAIyF,EAAKtL,OAAQ6F,IAAK,CAGpC,IAFA,IAAME,EAAMuF,EAAKzF,GACX4F,EAAS,GACNzF,EAAI,EAAGA,EAAID,EAAI/F,OAAQgG,IAAK,CACnC,IAAM0F,EAASF,EAAQxF,GACnBnF,EAAQkF,EAAIC,GACX2F,MAAM9K,KACTA,EAAQ+K,OAAO/K,IAEjB4K,EAAOC,GAAU7K,EAEnB0K,EAAOX,KAAKa,GAEd,OAAOF,E,ICrEYM,G,kDACnB,aAAe,IAAD,8BACZ,gBACKpM,MAAQ,CACXqM,WAAY,KACZC,YAAa,KACb7B,QAAS,KACT8B,YAAa,KACbC,UAAW,KACXtK,KAAM,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,MACrCpB,QAAS,GACTgC,KAAM,KACNzC,UAAW,KACXwF,QAAS,KACT4G,aAAa,EAEbC,cAAc,EACdpM,YAAa,GACbqM,SAAU,MAEZ,EAAKC,kBAAoB,EAAKA,kBAAkB1M,KAAvB,gBACzB,EAAK6G,sBAAwB,EAAKA,sBAAsB7G,KAA3B,gBAC7B,EAAK2M,oBAAsB,EAAKA,oBAAoB3M,KAAzB,gBAC3B,EAAK4M,qBAAuB,EAAKA,qBAAqB5M,KAA1B,gBAC5B,EAAK6M,sBAAwB,EAAKA,sBAAsB7M,KAA3B,gBAC7B,EAAKwG,WAAa,EAAKA,WAAWxG,KAAhB,gBAClB,EAAK8M,aAAe,EAAKA,aAAa9M,KAAlB,gBACpB,EAAKuG,YAAc,EAAKA,YAAYvG,KAAjB,gBACnB,EAAKa,iBAAmB,EAAKA,iBAAiBb,KAAtB,gBACxB,EAAK6C,UAAY,EAAKA,UAAU7C,KAAf,gBACjB,EAAK+K,UAAY,EAAKA,UAAU/K,KAAf,gBACjB,EAAKe,YAAc,EAAKA,YAAYf,KAAjB,gBA9BP,E,gEAiCO,IAAD,OAClBwC,QAAQC,IAAI,0BAGZsK,MAAM,iDAAD,OAAkD3B,EAAlD,mBAFe,OAEf,gBAA6FD,IAC/F6B,MAAK,SAAApB,GAAM,OAAIA,EAAOqB,UACtBD,MAAK,SAAApB,GACJ,IACMhJ,EAAO8I,GADFE,EAAOsB,QAElB,EAAKhN,SAAS,CAAE0C,KAAMA,IAEtB,IADA,IAAIsD,EAAI,EACmB,aAApBtD,EAAKsD,GAAL,MAAkCA,IACzC,EAAKrD,UAAUD,EAAKsD,OAErB8G,MAAK,WAGJD,MAAM,iDAAD,OAAkD3B,EAAlD,mBAFW,eAEX,gBAAyFD,IAC3F6B,MAAK,SAAApB,GAAM,OAAIA,EAAOqB,UACtBD,MAAK,SAAApB,GACJ,IAAI/G,EAAO+G,EAAOsB,OACZC,EAAW,GACXxH,EAAU,GAChBd,EAAK,GAAGxB,SAAQ,SAAC+J,GAAsB,YAARA,GAAsB,EAAKtN,MAAMkC,KAAK8I,SAASsC,KAAQzH,EAAQsF,KAAKmC,GAAMD,EAAS,MAAQC,GAAO,IAAItI,QACrI,IAAMyF,EAAUmB,GAAuB7G,GACvCsI,EAAShB,WAAa5B,EACtB4C,EAAS5C,QAAU,EAAKmC,kBAAkBnC,EAAS,EAAKzK,OACxDqN,EAASxH,QAAUA,EACnB,EAAKzF,SAASiN,W,yCAKQ,IAAf1M,EAAc,uDAAN,KAEvBR,KAAKC,UAAS,SAACJ,GAEb,MADiB,CAAE0M,cAAe1M,EAAM0M,aAAcC,SAAUhM,Q,gCAK1DkE,GAAM,IAAD,OAEb,GADAnC,QAAQC,IAAI,YAAakC,GACrB1E,KAAKH,MAAMK,YAAcwE,EAAK,CAChC,IAAMwI,EAAW,CACfhN,UAAWwE,EACXvE,YAAa,IAAI6F,MAAMtB,EAAI,eAAe0I,KAAK,GAC/Cf,UAAWrM,KAAKH,MAAMwM,WAElBgB,EAAerN,KAAKH,MAAMsM,YAAcnM,KAAKH,MAAMsM,YAAcnM,KAAKH,MAAMqM,WAClFgB,EAASvM,QAAU8C,OAAOC,KAAKgB,GAAKxB,QAAO,SAAAxC,GAAG,OAAI,EAAKb,MAAMkC,KAAK8I,SAASnK,IAAQgE,EAAIhE,GAAO,KAC1FV,KAAKH,MAAMyK,UAAW4C,EAAS5C,QAAUtK,KAAKyM,kBAAkBY,EAAcH,IAClFlN,KAAKC,SAASiN,M,6CAKhBlN,KAAKC,SAAS,CAAEqM,aAAa,M,8CAI7BtM,KAAKC,SAAS,CAAEqM,aAAa,M,mCAI7B,IAAIgB,EAAU,KAEZA,EAD8B,IAA5BtN,KAAKH,MAAM0N,QAAQtE,KACX,IAAIpE,IAAI,EAAC,IACJ,IAAIA,IACrB7E,KAAK4G,sBAAsB,UAA3B5G,CAAsCsN,K,mCAG3BhD,EAASpH,GAA6B,IAArB6D,IAAoB,yDAChDuD,EAAQrD,MAAK,SAACuG,EAAGC,GAAJ,OAAU1G,EAAcyG,EAAEtK,GAAUuK,EAAEvK,GAAUuK,EAAEvK,GAAUsK,EAAEtK,Q,kCAGjEA,EAAQ6D,GAAc,IAAD,OAC/B/G,KAAKC,UAAS,SAACJ,EAAOZ,GACpB,IAAIqL,EAAO,YAAOzK,EAAMyK,SAGxB,OAFA,EAAKuC,aAAavC,EAASpH,EAAQ6D,GAE5B,CAAEuD,QAASA,Q,gCAIZoD,GACR1N,KAAKC,UAAS,SAACJ,EAAOZ,GAKpB,IAJA,IAAI0O,EAAU9N,EAAMM,YAAY2I,QAC5BtI,EAAQX,EAAM2M,SAGTvG,EAAI,EAAGA,EAAI0H,EAAQvN,OAAQ6F,IAClC,GAAIyH,EAAS,YAAkBC,EAAQ1H,GAAR,UAAyB,CAAEzF,EAAQyF,EAAG,MAGvE,OADA0H,EAAQnN,GAASkN,EACV,CAAEvN,YAAawN,EAASpB,cAAc,Q,4CAI3BrJ,GAAS,IAAD,OAC5B,OAAO,SAACjC,GACNsB,QAAQC,IAAI,wBAAyBvB,GACrC,EAAKhB,UAAS,SAACJ,GACb,IAAIqN,EAAQ,eAAQrN,GACpBqN,EAAShK,GAAUjC,EACnB,IAAMoM,EAAeH,EAASf,YAAce,EAASf,YAAce,EAAShB,WACtE5B,EAAU,EAAKmC,kBAAkBY,EAAcH,GAErD,OADAA,EAAS5C,QAAUA,EACZ4C,Q,4CAMSrN,GAUpB,MAAO,CAAEwL,MATK5H,OAAOC,KAAK7D,GAAOwD,QAAO,SAACC,EAAa5C,GACpD,IAAMO,EAAQpB,EAAMa,GAEpB,OADIA,EAAImK,SAAS,QAAkB,YAARnK,GAAqBO,EAAMgI,KAAO,IAAK3F,EAAY5C,GAAOO,GAC9EqC,IACN,IAKoBsK,WAHJ/N,EAAMK,WACvBL,EAAMK,UAAN,WAAgCL,EAAMK,UAAN,WAA8B2N,MAAM,KAAKvN,KAAI,SAAAwN,GAAG,OAAIA,EAAIhJ,UACtF,M,wCAQYF,EAAM/E,GAItB,IAAIkO,EAAc/N,KAAKgO,sBAAsBnO,GAC7CkO,EAAYzB,YAAczM,EAAMyM,YAChC,IAAIhC,EDhLD,SAAoB1F,GAAoB,IAAdqJ,EAAa,uDAAJ,GACpC5C,EAAQ4C,EAAO5C,OAAS,GACxBuC,EAAaK,EAAOL,YAAc,GAChCtB,EAAc2B,EAAO3B,cAAe,EACpCX,EAAS,GACf,GAAI/G,EAAM,CACRrC,QAAQC,IAAI,eAAeyL,GAK3B,IANQ,eAMChI,GACP,IAAME,EAAMvB,EAAKqB,GACbiI,EAAkBN,EAAWxN,QAAU,EACvC+N,EAAU1K,OAAOC,KAAK2H,GAAOjL,QAAU,EAC3C,GAAkC,IAA9BqD,OAAOC,KAAK2H,GAAOjL,QAAsC,IAAtBwN,EAAWxN,OAAgB+N,GAAU,OAK1E,GAHIP,EAAWxN,OAAS,GACtBwN,EAAWxK,SAAQ,SAAAgL,GAAmB3K,OAAOwJ,OAAO9G,GAAK0E,SAASuD,KAAYF,GAAkB,MAE9FzK,OAAOC,KAAK2H,GAAOjL,OAAS,EAAG,CAEjC,IAAIuL,EAASP,GAAaC,EAAOlF,GAG/BgI,EAFE7B,EAEQX,EAAOtI,QAAO,SAAUC,EAAa+K,GAAW,OAAO/K,GAAe+K,KAAW,GAIjF1C,EAAOtI,QAAO,SAAUC,EAAa+K,GAAW,OAAO/K,GAAe+K,KAAW,GAI7FH,GAAmBC,GACrBxC,EAAOX,KAAKsD,KAAKC,MAAMD,KAAKE,UAAUrI,MAvBjCF,EAAI,EAAGA,EAAIrB,EAAKxE,OAAQ6F,IAAM,EAA9BA,GA4BT,OAAO0F,GCyIO8C,CAAW7J,EAAMmJ,GAM/B,OALAzD,EAAUtK,KAAK0O,cAAcpE,EAASzK,EAAMwM,WACxCxM,EAAMc,QAAQP,OAAS,IACzBkK,EAAUtK,KAAK0M,oBAAoBpC,EAASzK,EAAMc,SAClDX,KAAK6M,aAAavC,EAAS,eAAe,IAErCA,I,0CAGWA,EAASqE,GAO3B,OALArE,EAAQlH,SAAQ,SAAAwL,GACd,IAAIC,EAAQ,EACZF,EAAQvL,SAAQ,SAAArB,GAAI,OAAI8M,GAASD,EAAU7M,MAC3C6M,EAAU,eAAiBC,KAEtBvE,I,oCAGKA,EAAS+B,GAiBrB,OAhBIA,GACF/B,EAAQlH,SAAQ,SAAAwL,GACd,IAAME,EAAQzC,EAAUuC,EAAS,WAE7BE,IAAUF,EAAS,YACrBnL,OAAOC,KAAKoL,GAAO1L,SAAQ,SAAArB,GAErB6M,EAAUnN,eAAeM,KAC3B6M,EAAU7M,IAAS+M,EAAM/M,OAG7B6M,EAAS,WAAgB,MAI/BrM,QAAQC,IAAI,gBAAiB8H,GACtBA,I,kCAGGyE,GAAM,IAAD,OACf,GAAIA,EAAI3O,OAAS,EAAG,CAElB,IAAI4O,EAASD,EAAIxD,QAAQ,0CAA2C,IAC9DpK,EAAU6N,EAAOjG,QAAQ,KAAO,EAAIiG,EAAOlG,MAAM,EAAGkG,EAAOjG,QAAQ,MAAQiG,EACjFzM,QAAQC,IAAIrB,GAEV2L,MAAM,iDAAD,OAAkD3L,EAAlD,WAAoE,UAApE,gBAAqF+J,IACvF6B,MAAK,SAAAkC,GAAG,OAAIA,EAAIjC,UAChBD,MAAK,SAAAkC,GAAG,OAAI,EAAKC,aAAaD,MAC9BlC,MAAK,SAAAkC,GACJ,GAAIA,EAAK,CACP,IAAIrK,EAAOqK,EAAIhC,OAEXrB,EAAUhH,EAAK,GAAGtE,KAAI,SAAAwL,GAAM,OAAIA,EAAOqD,iBAC3C,GAAKvD,EAAQf,SAAS,cAAiBe,EAAQf,SAAS,WAAce,EAAQf,SAAS,QAGlF,CAGHjG,EAAK,GAAKgH,EACV,IAAIwD,EAAW3D,GAAuB7G,GAgEtC,OA/DAwK,EAAWA,EAASlM,QAAO,SAAAiD,GAAG,OAAIA,EAAG,WAAiBA,EAAG,WAChDc,MAAK,SAACuG,EAAGC,GAChB,OAAID,EAAC,UAAc2B,gBAAkB1B,EAAC,UAAc0B,cAC9C3B,EAAC,OAAW2B,cAAgB1B,EAAC,OAAW0B,eAClC,EAED3B,EAAC,OAAW2B,cAAgB1B,EAAC,OAAW0B,cACxC,EAEF,EAEA3B,EAAC,UAAc2B,cAAgB1B,EAAC,UAAc0B,eAC7C,EAED3B,EAAC,UAAc2B,cAAgB1B,EAAC,UAAc0B,cAC9C,EAEF,KAET5M,QAAQC,IAAI,kBAAmB4M,EAAShP,QAO7B,YAAO,EAAKP,MAAMqM,YACH7I,QAAO,SAACgM,EAAKC,GAMrC,IAJA,IAAIC,GAAc,EACdC,EAAM,EACNC,EAAOL,EAAShP,OAAS,GAErBmP,KAEFE,EAAOD,IAFQ,CAGnB,IAAIE,EAAS9L,KAAKG,MAAMyL,GAAOC,EAAOD,GAAO,GAEzCJ,EAASM,GAAT,UAA8BP,gBAAkBG,EAAM,UAAcH,cAClEC,EAASM,GAAT,OAA2BP,cAAgBG,EAAM,OAAWH,cAC9DK,EAAME,EAAS,EAERN,EAASM,GAAT,OAA2BP,cAAgBG,EAAM,OAAWH,cACnEM,EAAOC,EAAS,EAEXH,EAAcH,EAASM,GAEvBN,EAASM,GAAT,UAA8BP,cAAgBG,EAAM,UAAcH,cACzEK,EAAME,EAAS,EAERN,EAASM,GAAT,UAA8BP,cAAgBG,EAAM,UAAcH,gBACzEM,EAAOC,EAAS,GAGpB,OAAIH,GACE9L,OAAOC,KAAK6L,GAAa1E,SAAS,UACpCyE,EAAM,KAAmC,SAAxBC,EAAW,MAE9BF,EAAIrE,KAAKsE,GACFD,GAEGA,IACX,IArEH,EAAKH,aAAa,CAAE5F,MAAO,CAAE5C,OAAQ,0BA0E1CqG,MAAK,SAAAzC,GACAA,GACF,EAAKrK,UAAS,SAACJ,GAEb,IAAM8P,EAAY9P,EAAMM,YAAYG,KAAI,SAAAC,GAAM,OAAI,KAC5CqP,EAAkB,EAAKnD,kBAAkBnC,EAASzK,GACxD,MAAO,CAAEuM,YAAajL,EAASgL,YAAa7B,EAASA,QAASsF,EAAiBzP,YAAawP,EAAWpC,QAAS,IAAI1I,WAIzHkI,KACCD,MAAM,iDAAD,OAAkD3L,EAAlD,WAAoE,cAApE,gBAAyF+J,IAC3F6B,MAAK,SAAAkC,GAAG,OAAIA,EAAIjC,UAChBD,MAAK,SAAAkC,GACJ,GAAIA,EAAIhC,OAAQ,CACd,IAAM4C,EAAapE,GAAuBwD,EAAIhC,QACxCZ,EAAY,GAClBwD,EAAWzM,SAAQ,SAAA0M,GACjB,IAAMC,EAAOD,EAAI,iBACVA,EAAI,UACXzD,EAAU0D,GAAQD,KAEpB,IAAM5C,EAAQ,eAAQ,EAAKrN,OAC3BqN,EAASb,UAAYA,EACrB,IAAM/B,EAAU,EAAKmC,kBAAkB,EAAK5M,MAAMyK,QAAS4C,GAC3DA,EAAS5C,QAAUA,EACnB,EAAKrK,SAASiN,W,mCAQjB8C,GAEX,IAAIA,EAAS1G,MAcR,OAAO0G,EAbkB,MAAxBA,EAAS1G,MAAM2G,MAAgBD,EAAS1G,MAAM5C,OAAOmE,SAAS,qBAChEtI,QAAQC,IAAI,2GAGc,MAAxBwN,EAAS1G,MAAM2G,MAAgBD,EAAS1G,MAAM5C,OAAOmE,SAAS,oBAChEtI,QAAQC,IAAI,4EAGiB,qBAA3BwN,EAAS1G,MAAM5C,QACjBnE,QAAQC,IAAI,+F,+BAQhB,GAAIxC,KAAKH,MAAMyK,SAAWtK,KAAKH,MAAM8C,KAAM,CAGzC,IAAIuN,EAAgBlQ,KAAKH,MAAMyK,QAAQxB,MAAM,EAAG,KAChDoH,EAAgB5B,KAAKE,UAAU0B,GAC/B,IAAMzN,EAAe,CACnBvC,UAAWF,KAAKH,MAAMK,UACtBC,YAAaH,KAAKH,MAAMM,YACxBwC,KAAM3C,KAAKH,MAAM8C,KACjBZ,KAAM/B,KAAKH,MAAMkC,KACjBpB,QAASX,KAAKH,MAAMc,QACpBiC,UAAW5C,KAAK4C,WAEZuN,EAAgB,CACpBhP,QAASnB,KAAKH,MAAMuM,YACpBzL,QAASX,KAAKH,MAAMc,QACpBT,UAAWF,KAAKH,MAAMK,UACtBC,YAAaH,KAAKH,MAAMM,YACxBS,iBAAkBZ,KAAKY,iBACvBE,YAAad,KAAKc,aAEdsP,EAAkB,CACtB1P,IAAKwP,EACL5F,QAAStK,KAAKH,MAAMyK,QACpBnK,YAAaH,KAAKH,MAAMM,YACxB8K,KAAMjL,KAAKH,MAAMoL,KACjBlJ,KAAM/B,KAAKH,MAAMkC,KACjBpB,QAASX,KAAKH,MAAMc,QACpBmK,UAAW9K,KAAK8K,UAChBlK,iBAAkBZ,KAAKY,kBAEnByP,EAAe,CACnB1P,QAASX,KAAKH,MAAMc,QACpBiE,KAAM5E,KAAKH,MAAMqM,WACjBxG,QAAS1F,KAAKH,MAAM6F,QACpBgB,OAAO,WAAD,OAAa1G,KAAKH,MAAMyK,QAAQlK,OAAhC,YACNwG,sBAAuB5G,KAAK4G,sBAC5B0J,WAAYtQ,KAAK2M,qBACjB4D,YAAavQ,KAAK4M,sBAClBrG,WAAYvG,KAAKH,MAAM4B,eAAe,YAAczB,KAAKuG,WACzD3F,iBAAkBZ,KAAKY,iBACvB0F,YAAatG,KAAKsG,aAEpB,OACE,oCACE,yBAAKnH,GAAG,eACN,kBAAC,EAAagR,GACbnQ,KAAKH,MAAMK,WAAa,kBAAC,EAAqBuC,IAEjD,yBAAKvD,UAAU,UAAU2D,MAAO,CAAEC,IAAK9C,KAAKH,MAAM0M,aAAe,IAAM,UACrE,yBAAKrN,UAAU,kBACb,kBAAC,EAAYmR,GACb,kBAAC,EAAeD,MAMrB,OAAO,+C,GA5ZkB9O,IAAMC,WAgajC,SAASK,GAAM3C,GAQpB,OANKA,EAAM4C,IAAN,SAAiD,YAAzB5C,EAAM4C,IAAN,QAInB,yBAAKvC,IAAK,8CAAgDL,EAAM4C,IAAN,QAAsBrC,IAAKP,EAAMO,MAH3F,yBAAKN,UAAU,kBAAiB,6BAAMD,EAAMO,MA+CjD,SAASsC,GAAS7C,GACvB,IAAMiD,EAAWjD,EAAMiD,WAAY,EACnC,OACE,yBAAKhD,UAAU,YACZD,EAAM8C,KAAKzB,KAAI,SAAAyB,GACd,IAAMd,GAAShC,EAAMgC,MAAQhC,EAAMgC,MAAMc,GAAQ,IAAM9C,EAAM+C,MAAQ/C,EAAM+C,MAAMD,GAAQ,GAErFyO,EAAavP,EACbhC,EAAM+C,QACH/C,EAAM+C,MAAN,YAA4BwO,EAAa,IAAMA,IAKtD,IAAMC,EAAiB,CACrB1O,KAAMA,EACNd,MAAOA,EACPgB,SAAUhD,EAAMgD,UAGlB,OADIhD,EAAMkE,WAAYsN,EAAetN,SAAWlE,EAAMkE,SAASpB,IAE7D,yBAAK7C,UAAU,OAAOwB,IAAKqB,IACvBG,GAAY,kBAACwF,GAAD,CAAU3F,KAAMA,IAC9B,0BAAM7C,UAAU,cAAcsR,GAC9B,kBAACE,GAAcD,GACdxR,EAAMkE,UAAY,0BAAMjE,UAAU,cAAhB,UAAiCD,EAAMgC,MAAMc,GAAQ9C,EAAMkE,SAASpB,GAAQ,IAAM,IAAlF,OAAuF9C,EAAMgC,MAAMc,GAAQ9C,EAAMkE,SAASpB,UAQzJ,SAAS2O,GAAUzR,GACjB,OACE,0BAAMC,UAAU,sBACbD,EAAMkE,UACL,0BAAMjE,UAAU,WACd2D,MAAO,CAAE8N,WAAW,GAAD,OAAK1R,EAAMkE,SAAWlE,EAAMgD,SAAW,IAAvC,QAEvB,0BAAM/C,UAAW,aAAeD,EAAM8C,KAAK6O,cACzC/N,MAAO,CAAEiB,MAAM,GAAD,OAAK7E,EAAMgC,MAAQhC,EAAMgD,SAAW,IAApC,SAKf,SAASyF,GAASzI,GACvB,OAAO,0BAAMC,UAAW,QAAUD,EAAM8C,KAAK6O,eAAgB3R,EAAM8C,MC5fjD8O,QACW,cAA7B5G,OAAO6G,SAASC,UAEe,UAA7B9G,OAAO6G,SAASC,UAEhB9G,OAAO6G,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,GAAD,OAEFpQ,SAASqQ,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxE,MAAK,SAAAyE,GACJA,EAAaC,gBAEdC,OAAM,SAAApI,GACL/G,QAAQ+G,MAAMA,EAAMqI,c","file":"static/js/main.996eaace.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/arrow_down_darkblue.87e78f37.svg\";","module.exports = __webpack_public_path__ + \"static/media/instructions0.d5dad995.png\";","module.exports = __webpack_public_path__ + \"static/media/instructions1.e918fb19.png\";","module.exports = __webpack_public_path__ + \"static/media/platform.deae2014.svg\";","module.exports = __webpack_public_path__ + \"static/media/arrow_left_darkblue.76314777.svg\";","module.exports = __webpack_public_path__ + \"static/media/arrow_up_darkblue.727d3630.svg\";","module.exports = __webpack_public_path__ + \"static/media/filter_darkblue.224365ea.svg\";","import React from 'react';\r\nimport linkSharingOff from './instructions0.png';\r\nimport linkSharingOn from './instructions1.png';\r\n\r\nexport default function Instructions(props) {\r\n  return (\r\n    <div className='overlay'>\r\n\r\n      <div className='overlayContent' id='instructions'>\r\n        <div className='topContainer'>\r\n          <div className='top'>\r\n            <h3>How to Import User Data</h3>\r\n            <p>\r\n              Make a copy of this <a target='_blank' href='https://docs.google.com/spreadsheets/d/1asGXfBIw2qe3xYX_mawgbjO34gYqsj6IBNRbzqtqNAQ/edit?usp=sharing'>\r\n                Google spreadsheet template</a> and fill it with your outfits.\r\n            </p>\r\n            <ul>\r\n              <p><strong>Notes on the spreadsheet format</strong></p>\r\n              <li>\r\n                <strong>Must have:</strong> a sheet named Outfits with columns labeled Character, Outfit, and Made.\r\n              </li>\r\n              <li>\r\n                <strong>Optional: </strong> the Idol Status sheet and Validation Lists sheet\r\n              </li>\r\n              <li>\r\n                The character and outfit names should match the spelling and translations in the database's <a target='_blank' href='https://docs.google.com/spreadsheets/d/1JeHlN1zcBwyBbBkyfsDiiqDZpLotkn770ewa1JCsekU/edit#gid=350164119'>Validation Lists</a>.\r\n              </li>\r\n            </ul>\r\n            <p>\r\n              <strong>Turn link sharing on for the spreadsheet.</strong> Otherwise the sorter will not be able to access the contents.\r\n            </p>\r\n            <ul>\r\n              <p><strong>On desktop:</strong></p>\r\n              <li>\r\n                <p>Click the 'Share' button in the top right corner and click 'Get shareable link'.</p>\r\n                <img src={linkSharingOff} alt='Turn on link sharing' />\r\n              </li>\r\n              <li>\r\n                <p>Copy the provided link.</p>\r\n                <img src={linkSharingOn} alt='Copy link' />\r\n              </li>\r\n            </ul>\r\n            <p>\r\n              Copy the spreadsheet link into the sorter and click 'Add user data'.\r\n            </p>\r\n          </div>\r\n        </div>\r\n        <div className='bottomContainer'><div className='btn' onClick={props.toggleInstructions}>Close</div></div>\r\n\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React from 'react';\r\nimport { Image, AttrList } from './Main.js';\r\nimport Instructions from './Instructions.js';\r\nimport platform from './platform.svg';\r\n\r\nexport class TeamView extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isInstructions: false\r\n    }\r\n    this.toggleInstructions = this.toggleInstructions.bind(this);\r\n  }\r\n\r\n  toggleInstructions() {\r\n    this.setState(state => { return { isInstructions: !state.isInstructions } });\r\n  }\r\n\r\n  render() {\r\n    //console.log('TeamView render', this.props.activeJob);\r\n    if (this.props.activeJob && this.props.teamMembers.length > 0) {\r\n      const members = this.props.teamMembers.map((member, index) => {\r\n        return <TeamMember key={index}\r\n          index={index}\r\n          member={member}\r\n          selAttr={this.props.selAttr}\r\n          toggleOutfitList={this.props.toggleOutfitList} />\r\n      })\r\n      const dataBtn = <div className='btn addData' onClick={() => this.props.getUserData(document.querySelector('#userData').value)}>Add</div>\r\n      const helpBtn = <div className='btn help' onClick={this.toggleInstructions}>?</div>\r\n      const sheetHref = 'https://docs.google.com/spreadsheets/d/' + this.props.sheetId;\r\n      return (\r\n        <>\r\n          <div id='topMenu'>\r\n            {/*{this.props.sheetId &&\r\n              <span>using spreadsheet <a href={sheetHref}>{this.props.sheetId.slice(0, 7) + '...'}</a></span>\r\n            }*/}\r\n            <span>spreadsheet: </span>\r\n            <input id='userData' type='text' defaultValue={this.props.sheetId} />\r\n            {dataBtn}\r\n            {helpBtn}\r\n            {/*<div>Make sure to turn on link-sharing for your Google spreadsheet</div>*/}\r\n          </div>\r\n          <div id='teamViewContainer'>\r\n            <div id='teamView'>\r\n              {members}\r\n            </div>\r\n          </div>\r\n          {this.state.isInstructions && <Instructions toggleInstructions={this.toggleInstructions} />}\r\n        </>\r\n      )\r\n    } else return null;\r\n  }\r\n}\r\n\r\n//trying to keep div same ratio\r\n//https://stackoverflow.com/questions/12170261/how-to-auto-resize-a-div-with-css-while-keeping-aspect-ratio\r\nfunction TeamMember(props) {\r\n  const cls = 'teamMember' + (props.member.hasOwnProperty('Made') ? (!props.member['Made'] ? ' notMade' : '') : '');\r\n  return (\r\n    <div className={cls} onClick={() => props.toggleOutfitList(props.index)}>\r\n      <div className='imgContainer'>\r\n        <Platform hasMember={props.member} />\r\n        <Image obj={props.member} />\r\n      </div>\r\n      <AttrList attr={props.selAttr} bonus={props.member} maxValue={300} hideIcon={true} />\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction Platform(props) {\r\n  return (\r\n    <>\r\n      <img className='platform' src={platform} />\r\n      {props.hasMember ? <div className='shadow' /> : null}\r\n    </>\r\n  )\r\n}\r\n\r\nexport class JobViewContainer extends React.PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isJobList: false,\r\n    }\r\n    this.toggleJobList = this.toggleJobList.bind(this);\r\n  }\r\n\r\n  toggleJobList() {\r\n    console.log('toggleJobList');\r\n    this.setState((state, props) => { return { isJobList: !state.isJobList } });\r\n  }\r\n\r\n  render() {\r\n    if (this.props.activeJob) {\r\n      console.log('JobViewContainer render');\r\n      const jobViewProps = {\r\n        attr: this.props.attr,\r\n        activeJob: this.props.activeJob,\r\n        teamMembers: this.props.teamMembers,\r\n        toggleJobList: this.toggleJobList,\r\n      }\r\n      const jobListProps = {\r\n        jobs: this.props.jobs,\r\n        attr: this.props.attr,\r\n        activeJob: this.props.activeJob,\r\n        selectJob: this.props.selectJob,\r\n        toggleJobList: this.toggleJobList,\r\n      }\r\n      return (\r\n        <div id='jobView'>\r\n          <JobView {...jobViewProps} />\r\n          <div className='overlay' style={{ top: this.state.isJobList ? '0' : '100vh' }}>\r\n            <JobList {...jobListProps} />\r\n          </div>\r\n\r\n        </div>\r\n      )\r\n    } else return null;\r\n  }\r\n}\r\n\r\nclass JobView extends React.PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    console.log('JobView render');\r\n    const changeJobBtn = <div className='btn selectJob' onClick={this.props.toggleJobList}>Change Job</div>;\r\n    const attr = this.props.attr.filter(attr => this.props.activeJob[attr] > 0);\r\n    const baseline = {};\r\n    const value = {};\r\n    attr.forEach(attr => {\r\n      baseline[attr] = this.props.activeJob[attr];\r\n      //for each attr, iterate over teamMembers Array and accumulate their attr values\r\n      value[attr] = this.props.teamMembers.reduce((accumulator, member) => {\r\n        if (member) {\r\n          return accumulator + member[attr];\r\n        } else return accumulator\r\n      }, 0);\r\n    });\r\n    return (\r\n      <>\r\n        <div className='header'>\r\n          <div className='title'>\r\n            <p>{this.props.activeJob['Job JP']}</p>\r\n            {changeJobBtn}\r\n          </div>\r\n          <hr />\r\n          <div className='statInfo'>\r\n            <Image obj={this.props.activeJob} alt={this.props.activeJob['Job']} />\r\n            <AttrList maxValue={1500} attr={attr} value={value} baseline={baseline} />\r\n          </div>\r\n        </div>\r\n        <div className='workResult'>\r\n          <ProgressBar baseline={baseline} value={value} />\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nfunction ProgressBar(props) {\r\n  //console.log('ProgressBar', props.value, props.baseline);\r\n  const progress = Object.keys(props.baseline).reduce((accumulator, attr) => {\r\n    const percent = props.value[attr] / props.baseline[attr] * (1 / 3);\r\n    return accumulator + Math.min(percent, (1 / 3));\r\n  }, 0);\r\n  return (\r\n    <>\r\n      <div id='progressBarContainer'>\r\n        <span id='progressBarHide' style={{ width: `${(1 - progress) * 100}%` }} />\r\n        <span id='progressBar' style={{ width: `100%` }} />\r\n      </div>\r\n      <div className='status'>{`Work Result: ${Math.floor(progress * 100)}%`}</div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport class JobList extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      menus: {\r\n        'Beginner': '【初級】',\r\n        'Intermediate': '【中級】',\r\n        'Advanced': '【上級】',\r\n        'Unit': 'Unit',\r\n        'ES Building': 'ESビル',\r\n        'Limited': '期間限定',\r\n      },\r\n      activeMenu: null,\r\n      viewJob: null,\r\n    }\r\n    this.toggleProperty = this.toggleProperty.bind(this);\r\n    this.toggleMenu = this.toggleMenu.bind(this);\r\n    this.getAvailableMenus = this.getAvailableMenus.bind(this);\r\n    this.getMenuJobs = this.getMenuJobs.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    console.log('JobList componentDidMount')\r\n    this.setState({ activeMenu: this.props.activeJob['Type'], viewJob: this.props.activeJob })\r\n  }\r\n\r\n  toggleProperty(prop, value) {\r\n    this.setState({ [prop]: value });\r\n  }\r\n\r\n  toggleMenu(menu) { //need to reset viewJob to first item\r\n    const job = this.getMenuJobs(menu)[0];\r\n    this.setState({ activeMenu: menu, viewJob: job });\r\n  }\r\n\r\n  getAvailableMenus() {\r\n    let menuOpts = Object.keys(this.state.menus);\r\n    let menus = {}\r\n    const data = new Set(this.props.jobs.map((job) => job['Type'] ? job['Type'].trim() : ''));\r\n    menuOpts.forEach(opt => { if (opt.length > 0 && data.has(opt)) menus[opt] = this.state.menus[opt] });\r\n    return menus;\r\n  }\r\n\r\n  getMenuJobs(menu) {\r\n    return this.props.jobs.filter((job) => job['Type'] ? job['Type'].trim() === menu : false);\r\n  }\r\n\r\n  render() {\r\n    //console.log('JobList render');\r\n    const jobDetailBtn = <div className='btn selectJob' onClick={() => { this.props.selectJob(this.state.viewJob); this.props.toggleJobList(); }}>Select Job</div>\r\n    const value = this.state.viewJob &&\r\n      (\r\n        <div className='overlayContent' id='jobList'>\r\n          <div className='bottom left'>\r\n            <JobTabMenu menus={this.getAvailableMenus()} activeMenu={this.state.activeMenu} toggleMenu={this.toggleMenu} />\r\n            <JobSelect jobs={this.getMenuJobs(this.state.activeMenu)} viewJob={this.state.viewJob} toggleProperty={this.toggleProperty} />\r\n          </div>\r\n          <div className='top right'>\r\n            <JobDetail job={this.state.viewJob} attr={this.props.attr} button={jobDetailBtn} toggleJobList={this.props.toggleJobList} />\r\n          </div>\r\n        </div>\r\n      )\r\n    return value;\r\n  }\r\n}\r\n\r\nfunction JobTabMenu(props) {\r\n  const tabs = Object.keys(props.menus).map(key => {\r\n    return (\r\n      <div key={key}\r\n        className={'jobTab' + (props.activeMenu === key ? ' selected' : '')}\r\n        onClick={() => props.toggleMenu(key)}>\r\n        {props.menus[key]}\r\n      </div>\r\n    )\r\n  });\r\n  return <div id='jobTabMenu'>{tabs}</div >;\r\n}\r\n\r\nfunction JobSelect(props) {\r\n  const jobs = props.jobs.map(job => {\r\n    const isViewing = props.viewJob['Job'] === job['Job'];\r\n    const key = job['Job JP'] + (isViewing ? ' selected' : '');\r\n    return (\r\n      <div key={key}\r\n        className={'jobOpt' + (isViewing ? ' selected' : '')}\r\n        onClick={() => props.toggleProperty('viewJob', job)}>\r\n        {job['Job JP']}\r\n      </div>\r\n    )\r\n  });\r\n  return <div id='jobSelect'>{jobs}</div>;\r\n}\r\n\r\nfunction JobDetail(props) {\r\n  const attr = props.attr.filter(attr => props.job[attr] > 0);\r\n  const value = {};\r\n  attr.forEach(attr => value[attr] = props.job[attr]);\r\n  const closeBtn = <div className='btn closeJob' onClick={props.toggleJobList}>Cancel</div>;\r\n  return (\r\n    <div id='jobDetail'>\r\n      <p>{props.job['Job JP']}</p>\r\n      <Image obj={props.job} alt={props.job['Job']} />\r\n      <AttrList maxValue={1500} attr={attr} value={value} />\r\n      <div className='jobDetailBtns'>\r\n        {props.button}\r\n        {closeBtn}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport { AttrIcon } from './Main.js';\r\nimport arrowLeft from './arrow_left_darkblue.svg';\r\nimport arrowUp from './arrow_up_darkblue.svg';\r\nimport arrowDown from './arrow_down_darkblue.svg';\r\nimport filter from './filter_darkblue.svg';\r\n\r\nexport default class Sidebar extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      filters: null,\r\n      isFilterMenu: false,\r\n    }\r\n    this.toggleFilterMenu = this.toggleFilterMenu.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const setsArr = this.getSetsFromOutfitArray(this.props.data);\r\n    this.setState({ filters: setsArr });\r\n  }\r\n\r\n  getSetsFromOutfitArray(outfitsArr) {\r\n    //console.log(outfitsArr);\r\n    const filters = this.props.filters; //Array of spreadsheet headers that should be filters\r\n    const setsArr = new Array(filters.length);\r\n    for (let i = 0; i < setsArr.length; i++) { setsArr[i] = new Set() }; //fill with empty Sets\r\n    for (let i = 0; i < filters.length; i++) { setsArr[i].add(filters[i]) } //add header to Set\r\n    for (let i = 0; i < outfitsArr.length; i++) {\r\n      const row = outfitsArr[i];\r\n      for (let j = 0; j < filters.length; j++) {\r\n        setsArr[j].add(row[filters[j]]);\r\n      }\r\n    }\r\n    return setsArr;\r\n  }\r\n\r\n  toggleFilterMenu() {\r\n    this.setState((state) => {\r\n      const newState = { isFilterMenu: !state.isFilterMenu }\r\n      return newState;\r\n    });\r\n\r\n  }\r\n\r\n  render() {\r\n    if (this.state.filters) {\r\n      const sortMenuLandscape = <SortMenu className='hideOnPortraitSmall' selAttr={this.props.selAttr} sortOutfits={this.props.sortOutfits} toggleMade={this.props.toggleMade} />\r\n      const sortMenuPortrait = <SortMenu className='hideOnLandscape' selAttr={this.props.selAttr} sortOutfits={this.props.sortOutfits} toggleMade={this.props.toggleMade} />\r\n      return (\r\n        <div id='sidebar' className='toggledOn'>\r\n          <div className='btn close' onClick={this.props.toggleOutfitList}><img src={arrowLeft} alt='←' /></div>\r\n          {/*<CheckBoxOptions optionsArr={this.props.attr} submitSelection={this.props.submitFilterSelection('selAttr')} />*/}\r\n          <span id='status'>{this.props.status}</span>\r\n          <div className='right'>\r\n            {sortMenuLandscape}\r\n            <div className='btn toggleFilter' onClick={this.toggleFilterMenu}><img src={filter} alt='filter options' /></div>\r\n          </div>\r\n          {/*<SearchType toggleTrue={this.props.toggleTrue} toggleFalse={this.props.toggleFalse} />*/}\r\n          <FilterMenu isFilterMenu={this.state.isFilterMenu}\r\n            filters={this.state.filters}\r\n            sortMenu={sortMenuPortrait}\r\n            submitFilterSelection={this.props.submitFilterSelection}\r\n            toggleFilterMenu={this.toggleFilterMenu} />\r\n\r\n        </div>\r\n      )\r\n    }\r\n    else return null;\r\n  }\r\n}\r\n\r\n//class CheckBoxOptions extends React.Component {\r\n//  constructor(props) {\r\n//    super(props);\r\n//    this.state = { selected: new Set() };\r\n//    this.toggleOption = this.toggleOption.bind(this);\r\n//  }\r\n\r\n//  toggleOption(option) {\r\n//    const newSet = this.state.selected; //not actually creating a new Set copy?\r\n//    if (this.state.selected.has(option)) { newSet.delete(option) }\r\n//    else { newSet.add(option); }\r\n//    this.setState({ selected: newSet }, this.props.submitSelection(this.state.selected));\r\n//  }\r\n\r\n//  render() {\r\n//    const attrMapFunc = (option) => {\r\n//      return <CheckBox key={option} option={option} toggleOption={() => this.toggleOption(option)} />\r\n//      //return (\r\n//      //  <span key={option} className={'icon ' + option.toLowerCase()} onClick={() => this.toggleOption(option)}>\r\n//      //    {option}\r\n//      //  </span>\r\n//      //)\r\n//    }\r\n//    const options = this.props.optionsArr.map(attrMapFunc);\r\n//    return (\r\n//      <div className='filter attrOptions'>\r\n//        {options}\r\n//      </div>\r\n//    )\r\n//  }\r\n//}\r\n\r\n//function CheckBox(props) {\r\n//  return (\r\n//    <div>\r\n//      <input type='checkbox' onClick={props.toggleOption} />\r\n//      <span className={'icon ' + props.option.toLowerCase()}>{props.option}</span>\r\n//    </div>\r\n//  )\r\n//}\r\n\r\nclass SortMenu extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      activeSort: 'Total Bonus',\r\n      isAscending: false,\r\n    }\r\n    this.toggleSort = this.toggleSort.bind(this);\r\n  }\r\n\r\n  toggleSort(sort) {\r\n    this.setState((state) => {\r\n      if (state.activeSort === sort) {\r\n        return { isAscending: !state.isAscending }\r\n      } else {\r\n        return { activeSort: sort, isAscending: false }\r\n      }\r\n    }, () => { this.props.sortOutfits(sort, this.state.isAscending) })\r\n  }\r\n\r\n  render() {\r\n    const sortOpts = this.props.selAttr.map(opt => {\r\n      return <SortOpt key={opt}\r\n        opt={opt}\r\n        isActive={opt === this.state.activeSort}\r\n        isAscending={this.state.isAscending}\r\n        onClick={() => this.toggleSort(opt)} />\r\n    });\r\n    sortOpts.unshift(<SortOpt key='Total Bonus'\r\n      opt='Total'\r\n      isActive={'Total Bonus' === this.state.activeSort}\r\n      isAscending={this.state.isAscending}\r\n      onClick={() => this.toggleSort('Total Bonus')} />)\r\n    return (\r\n      <div id='sortMenu' className={this.props.className ? this.props.className : null}>\r\n        {this.props.toggleMade && <ToggleMade toggleMade={this.props.toggleMade} />}\r\n        {sortOpts}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nfunction SortOpt(props) {\r\n  return (\r\n    <div className={'btn sortOpt' + (props.isActive ? ' active' : '')} onClick={props.onClick}>\r\n      <span className='arrow' style={{ width: '0.7rem', height: '1rem' }}>\r\n        {props.isActive && (props.isAscending ? <img src={arrowUp} alt='↑' /> : <img src={arrowDown} alt='↓' />)}\r\n      </span>\r\n      {props.opt !== 'Total' ? <AttrIcon attr={props.opt} /> : <span>{props.opt}</span>}\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction SearchType(props) {\r\n  return (\r\n    <div className='filter'>\r\n      <div className='radioBtn'>\r\n        <input type='radio' name='searchType' id='false' onClick={props.toggleFalse} defaultChecked />\r\n        <label htmlFor='false'>Strict match <br /><span className='desc'>(find outfits that match all search criteria)</span></label>\r\n      </div>\r\n      <div className='radioBtn'>\r\n        <input type='radio' name='searchType' id='true' onClick={props.toggleTrue} />\r\n        <label htmlFor='true'>Inclusive match <br /><span className='desc'>(find outfits that match 1 or more criteria)</span></label>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction ToggleMade(props) {\r\n  return (\r\n    <div className='radioBtn' id='toggleMade'>\r\n      <input type='checkbox' onClick={props.toggleMade} />\r\n      <label htmlFor='toggleMade'>Show made outfits</label>\r\n    </div>\r\n  )\r\n}\r\n\r\nclass FilterMenu extends React.PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      activeMenu: '',\r\n    }\r\n    this.toggleMenu = this.toggleMenu.bind(this);\r\n  }\r\n\r\n  toggleMenu(menu) {\r\n    console.log('toggleMenu click')\r\n    this.setState((state) => { return { activeMenu: state.activeMenu === menu ? '' : menu } })\r\n  }\r\n\r\n  render() {\r\n    const filters = this.props.filters.map(set => { //data is Array of Sets of unique values in each column\r\n      const optionsArr = Array.from(set);\r\n      const heading = optionsArr[0];\r\n      const selKey = 'sel' + heading;\r\n      return (\r\n        <Filter key={heading}\r\n          heading={heading}\r\n          isMenuActive={this.state.activeMenu === heading}\r\n          toggleMenu={() => (this.toggleMenu(heading))}\r\n          optionsArr={Array.from(set)}\r\n          submitSelection={this.props.submitFilterSelection(selKey)}\r\n        />\r\n      );\r\n    });\r\n    return (\r\n      <div id='filterMenu' className='overlayContent' style={{ display: this.props.isFilterMenu ? 'flex' : 'none' }}>\r\n        <div className='topContainer'>\r\n          <h4 className='hideOnLandscape'>Sort by...</h4>\r\n          {this.props.sortMenu}\r\n          <h4>Filter by...</h4>\r\n          <div id='filters'>\r\n            {filters}\r\n          </div>\r\n        </div>\r\n        <div className='bottomContainer'><div className='btn' onClick={this.props.toggleFilterMenu}>Close</div></div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nclass Filter extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { selected: new Set() };\r\n    this.toggleOption = this.toggleOption.bind(this);\r\n    this.clearSelect = this.clearSelect.bind(this);\r\n    this.selectAll = this.selectAll.bind(this);\r\n    this.clearFilter = this.clearFilter.bind(this);\r\n  }\r\n\r\n  toggleOption(option) {\r\n    const newSet = this.state.selected; //not actually creating a new Set copy?\r\n    if (this.state.selected.has(option)) {\r\n      newSet.delete(option);\r\n    }\r\n    else {\r\n      newSet.add(option);\r\n    }\r\n    this.setState({ selected: newSet });\r\n  }\r\n\r\n  clearSelect() {\r\n    this.setState({ selected: new Set() })\r\n  }\r\n\r\n  selectAll() {\r\n    let optionsArr = this.props.optionsArr.slice();\r\n    const index = optionsArr.indexOf(this.props.heading);\r\n    optionsArr.splice(index, 1);\r\n    this.setState({ selected: new Set(optionsArr) })\r\n  }\r\n\r\n  clearFilter() {\r\n    this.clearSelect();\r\n    this.props.submitSelection(new Set());\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className='filter'>\r\n        <div className='filterHeading' onClick={this.props.toggleMenu}>\r\n          <img className='filterIcon' src={arrowDown} />\r\n          <p>{this.props.heading}</p>\r\n          {this.state.selected.size > 0 && <a onClick={this.clearFilter}>clear filter</a>}\r\n        </div>\r\n        {this.props.isMenuActive &&\r\n          <FilterOptions heading={this.props.heading}\r\n            optionsArr={this.props.optionsArr}\r\n            selected={this.state.selected}\r\n            submitSelection={() => this.props.submitSelection(this.state.selected)}\r\n            toggleMenu={this.props.toggleMenu}\r\n            toggleOption={this.toggleOption}\r\n            clearSelect={this.clearSelect}\r\n            selectAll={this.selectAll} />}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nclass FilterOptions extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className='filterOptions'>\r\n        <div>\r\n          <button className='clearBtn' onClick={this.props.clearSelect}>Clear</button>\r\n          <button className='selectAllBtn' onClick={this.props.selectAll}>Select All</button>\r\n        </div>\r\n        <SelectOptions heading={this.props.heading}\r\n          optionsArr={this.props.optionsArr}\r\n          selected={this.props.selected}\r\n          toggleOption={this.props.toggleOption} />\r\n        <div>\r\n          <button className='submitBtn' onClick={() => { this.props.toggleMenu(); this.props.submitSelection() }}>OK</button>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nfunction SelectOptions(props) {\r\n  let optionsArr = props.optionsArr.slice(0).sort(); //needed to create a real new (shallow) copy of the array\r\n  if (optionsArr.indexOf(props.heading) > -1) { optionsArr.splice(optionsArr.indexOf(props.heading), 1) }\r\n  const options = optionsArr.map(function (option) {\r\n    return (\r\n      <li key={option}\r\n        className={props.selected.has(option) ? 'selected' : ''}\r\n        onClick={() => props.toggleOption(option)}>\r\n        <div><span></span>{option}</div>\r\n      </li>)\r\n  });\r\n  return (\r\n    <ul>\r\n      {options}\r\n    </ul>\r\n  )\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport throttle from 'lodash.throttle';\r\nimport { Image, AttrList } from './Main.js';\r\n\r\nexport default class OutfitList extends React.PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      error: false,\r\n      isLoading: false,\r\n      hasMore: true,\r\n      loadedOutfits: [],\r\n      outfitsToLoad: 30,\r\n    };\r\n    this.onScroll = this.onScroll.bind(this);\r\n    this.loadOutfits = this.loadOutfits.bind(this);\r\n    this.onScrollThrottled = throttle(this.onScroll, 100);\r\n  }\r\n\r\n  componentDidMount() {\r\n    //console.log('OutfitList componentDidMount')\r\n    this.loadOutfits();\r\n  }\r\n\r\n  //modified from this tutorial: https://alligator.io/react/react-infinite-scroll/\r\n  //and also this https://blog.bitsrc.io/improve-your-react-app-performance-by-using-throttling-and-debouncing-101afbe9055\r\n  onScroll(event) {\r\n    event.persist() //didn't work without this \r\n\r\n    //Bails early if:\r\n    //* it's already loading\r\n    //* there's nothing left to load\r\n    //console.log(this.state.isLoading, this.state.hasMore);\r\n    if (this.state.isLoading || !this.state.hasMore) { return; }\r\n\r\n    //Checks that the page has scrolled to the bottom\r\n    if (event.target) {\r\n      if (window.innerHeight + event.target.scrollTop >= event.target.scrollHeight - 600) {\r\n        //console.log('loading more');\r\n        this.loadOutfits();\r\n      }\r\n    }\r\n  }\r\n\r\n  loadOutfits() {\r\n    this.setState({ isLoading: true }, () => {\r\n      this.setState((state, props) => {\r\n        let loadedOutfits = state.loadedOutfits;\r\n        loadedOutfits = loadedOutfits.concat(props.outfits.slice(state.loadedOutfits.length, state.loadedOutfits.length + state.outfitsToLoad));\r\n        const hasMore = loadedOutfits.length < props.outfits.length;\r\n        //console.log('after loadOutfits', loadedOutfits);\r\n        return { hasMore: hasMore, isLoading: false, loadedOutfits: loadedOutfits };\r\n      });\r\n    })\r\n  }\r\n\r\n  render() {\r\n    //console.log(this.props);\r\n    const outfits = this.state.loadedOutfits.map((elt) =>\r\n      <OutfitCard key={elt.Character + elt.Outfit + elt['Total Bonus']}\r\n        info={elt}\r\n        inTeam={this.props.teamMembers.includes(elt)}\r\n        selAttr={this.props.selAttr}\r\n        setMember={this.props.setMember} />\r\n    );\r\n    //console.log('finished loading outfit list', performance.now())\r\n    let placeholders = [];\r\n    for (let i = 0; i < 4; i++) {\r\n      placeholders.push(<div key={i} className=\"outfit-placeholder\"></div>)\r\n    }\r\n    //console.log('OutfitList render');\r\n    return (\r\n      <div id='outfitView' onScroll={this.onScrollThrottled}>\r\n        <div id='outfitList' className={this.props.view}>\r\n          {outfits}\r\n          {this.props.view === 'card' && placeholders}\r\n        </div>\r\n        {!this.state.hasMore && this.props.view === 'card' &&\r\n          <p className='status'>End of results</p>\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nfunction OutfitCard(props) {\r\n  const cls = 'outfitCard' + (props.info.hasOwnProperty('Made') ? (!props.info['Made'] ? ' notMade' : '') : '');\r\n  return (\r\n    <div className={cls} onClick={() => props.setMember(props.info)}>\r\n      {props.inTeam && <div className='inTeam'>TEAM</div>}\r\n      <p>{props.info['Character']}</p>\r\n      <p>{props.info['Outfit']}</p>\r\n      <hr />\r\n      <div className='rowContainer'>\r\n        <Image obj={props.info} alt={`${props.info['Character']} ${props.info['Outfit']}`} />\r\n        <div className='right'> \r\n        <AttrList attr={props.selAttr} bonus={props.info} maxValue={300} />\r\n        {('Total Bonus' in props.info) && <div className='bonus'>TOTAL: <strong>{props.info['Total Bonus']}</strong></div>}\r\n        </div>\r\n        \r\n      </div>\r\n      \r\n    </div>\r\n  )\r\n}\r\n\r\n//function OutfitRow(props) {\r\n//  return (\r\n//    <>\r\n//      {Object.keys(props.info).map(key => {\r\n//        if (key !== 'ImageID') {\r\n//          return (\r\n//            <div key={key} className='outfitCell'>\r\n//              <p>{props.info[key]}</p>\r\n//            </div>\r\n//          )\r\n//        }\r\n//      })}\r\n//    </>\r\n//  )\r\n//}\r\n","export const apiKey = 'AIzaSyBYN0YVkl2lB5ps2CL_74JKIs5TOukXdm4';\r\nexport const spreadsheetId = '1JeHlN1zcBwyBbBkyfsDiiqDZpLotkn770ewa1JCsekU';","//filter Array of Objs based on query and job conditions\n//returns deep copy of new Array (with new copy of Objs)\nexport function filterData(data, config = {}) {\n  let query = config.query || {}; //Object with Sets of values selected for each filter\n  let conditions = config.conditions || []; //Array with values of job conditions\n  const isInclusive = config.isInclusive || false; //whether row should match query with OR (inclusive) or AND (exclusive)\n  const result = [];\n  if (data) { //should be Array of Objects\n    console.log('filterGsData',config);\n    //case 1: no conditions or queries -> return data as is\n    //case 2: conditions but no queries -> filter by conditions\n    //case 3: no conditions but has queries -> filter by queries\n    //case4 4: queries and conditions -> must filter by condition, then queries inclusive/exclusive\n    for (let i = 0; i < data.length; i++) { //iterate over Array of rows\n      const row = data[i];\n      let meetsConditions = conditions.length <= 0; //if no condition then all rows meet condition (true)\n      let queried = Object.keys(query).length <= 0; //if no queries then all rows are queried (true)\n      if (Object.keys(query).length === 0 && conditions.length === 0) { queried = true; } //if no query just push all rows\n      else {\n        if (conditions.length > 0) {\n          conditions.forEach(condition => { if (Object.values(row).includes(condition)) meetsConditions = true });\n        }\n        if (Object.keys(query).length > 0) {\n          //map which filters match values in the row\n          let result = matchFilters(query, row);\n          if (isInclusive) {\n            //if any filter is matched queried = true\n            queried = result.reduce(function (accumulator, currVal) { return accumulator || currVal }, false);\n          }\n          else { //exclusive \n            //if any filter is not matched queried = false\n            queried = result.reduce(function (accumulator, currVal) { return accumulator && currVal }, true);\n          }\n        }\n      }\n      if (meetsConditions && queried) {\n        result.push(JSON.parse(JSON.stringify(row))\n\n        );\n      }\n    }\n    return result;\n  }\n}\n\n//helper function to map which filters match values in the row\nfunction matchFilters(query, row) {\n  //check if values queried in each filter match the row value at least once\n  const result = Object.keys(query).map((key) => { //for each query Set\n    const queriedHeader = key.replace('sel', ''); //get name of relevant column\n    const set = query[key]; //get query Set from query Object\n    const queriedValue = row[queriedHeader]; //find which index represents the relevant column in the row Array\n    //console.log(queriedValue);\n    if (set.has(queriedValue)) { return true }\n  });\n  return result;\n}\n\n//convert Array of Arrays to Array of objects assuming first Array holds key values\n//does not mutate original Array, but would only make shallow copy\nexport function convertArraysToObjects(arrs) {\n  const result = [];\n  const headers = arrs[0]; //first row is header row\n  for (let i = 1; i < arrs.length; i++) {\n    const row = arrs[i];\n    const newRow = {};\n    for (let j = 0; j < row.length; j++) { //iterate over values in each row to add headers\n      const header = headers[j];\n      let value = row[j];\n      if (!isNaN(value)) {\n        value = Number(value);\n      }\n      newRow[header] = value;\n    }\n    result.push(newRow);\n  }\n  return result;\n}\n\n","import React from 'react';\r\nimport { TeamView, JobViewContainer } from './TeamBuilder.js'\r\nimport SideBar from './Sidebar.js';\r\nimport OutfitList from './OutfitList.js';\r\nimport { apiKey, spreadsheetId } from './sheetsCreds.js';\r\nimport { filterData, convertArraysToObjects } from './Gsx2json.js';\r\n\r\nexport default class Main extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      allOutfits: null, //Array of Obj of all outfit rows in database spreadsheet\r\n      userOutfits: null, //Array of Obj of user outfit rows, null when user has no data/removes their data\r\n      outfits: null, //Outfits to display after allOutfits or userOutfits has been filtered\r\n      userSheetId: null,\r\n      idolStats: null,\r\n      attr: ['Ac', 'Pa', 'Un', 'Sm', 'Te', 'Ch'],\r\n      selAttr: [], //Array of  strings from attr matching relevant attributes\r\n      jobs: null, //Array of Obj of all job rows in database spreadsheet\r\n      activeJob: null,\r\n      filters: null, //Array of headers for each column to filter by\r\n      isInclusive: false,\r\n      //view: 'card',\r\n      isOutfitList: false,\r\n      teamMembers: [],\r\n      teamSlot: null, //Store index of teamMember user is currently choosing\r\n    };\r\n    this.prepareOutfitData = this.prepareOutfitData.bind(this)\r\n    this.submitFilterSelection = this.submitFilterSelection.bind(this);\r\n    this.calculateTotalBonus = this.calculateTotalBonus.bind(this);\r\n    this.toggleSearchTypeTrue = this.toggleSearchTypeTrue.bind(this);\r\n    this.toggleSearchTypeFalse = this.toggleSearchTypeFalse.bind(this);\r\n    this.toggleMade = this.toggleMade.bind(this);\r\n    this.sortByFilter = this.sortByFilter.bind(this);\r\n    this.sortOutfits = this.sortOutfits.bind(this);\r\n    this.toggleOutfitList = this.toggleOutfitList.bind(this);\r\n    this.selectJob = this.selectJob.bind(this);\r\n    this.setMember = this.setMember.bind(this);\r\n    this.getUserData = this.getUserData.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    console.log('Main componentDidMount')\r\n    const nextSheetId = 'Jobs';\r\n    //fetch info for TeamBuilder\r\n    fetch(`https://sheets.googleapis.com/v4/spreadsheets/${spreadsheetId}/values/${nextSheetId}?key=${apiKey}`)\r\n      .then(result => result.json())\r\n      .then(result => {\r\n        let data = result.values; //Array of Arrays representing sheet rows\r\n        const jobs = convertArraysToObjects(data);\r\n        this.setState({ jobs: jobs });\r\n        let i = 0;\r\n        while (jobs[i]['Type'] !== 'Beginner') { i++; }\r\n        this.selectJob(jobs[i]);\r\n      })\r\n      .then(() => {\r\n        const sheetId = 'Stat Bonuses';\r\n        //fetch info for Sidebar\r\n        fetch(`https://sheets.googleapis.com/v4/spreadsheets/${spreadsheetId}/values/${sheetId}?key=${apiKey}`)\r\n          .then(result => result.json())\r\n          .then(result => {\r\n            let data = result.values; //Array of Arrays representing sheet rows\r\n            const newState = {};\r\n            const filters = []\r\n            data[0].forEach((arr) => { if (arr !== 'ImageID' && !this.state.attr.includes(arr)) { filters.push(arr); newState['sel' + arr] = new Set() } }) //Create set for each header to keep track of selected values\r\n            const outfits = convertArraysToObjects(data);\r\n            newState.allOutfits = outfits;\r\n            newState.outfits = this.prepareOutfitData(outfits, this.state);\r\n            newState.filters = filters;\r\n            this.setState(newState);\r\n          })\r\n      })\r\n  }\r\n\r\n  toggleOutfitList(index = null) {\r\n    //console.log('toggleOutfitList', index);\r\n    this.setState((state) => {\r\n      const newState = { isOutfitList: !state.isOutfitList, teamSlot: index }\r\n      return newState;\r\n    });\r\n  }\r\n\r\n  selectJob(job) {\r\n    console.log('SelectJob', job);\r\n    if (this.state.activeJob !== job) {\r\n      const newState = {\r\n        activeJob: job,\r\n        teamMembers: new Array(job['Idol Slots']).fill(0),\r\n        idolStats: this.state.idolStats,\r\n      }\r\n      const outfitSource = this.state.userOutfits ? this.state.userOutfits : this.state.allOutfits;\r\n      newState.selAttr = Object.keys(job).filter(key => this.state.attr.includes(key) && job[key] > 0);\r\n      if (this.state.outfits) { newState.outfits = this.prepareOutfitData(outfitSource, newState); }\r\n      this.setState(newState);\r\n    }\r\n  }\r\n\r\n  toggleSearchTypeTrue() {\r\n    this.setState({ isInclusive: true })\r\n  }\r\n\r\n  toggleSearchTypeFalse() {\r\n    this.setState({ isInclusive: false })\r\n  }\r\n\r\n  toggleMade() {\r\n    let newMade = null;\r\n    if (this.state.selMade.size === 0) {\r\n      newMade = new Set([true]);\r\n    } else newMade = new Set()\r\n    this.submitFilterSelection('selMade')(newMade);\r\n  }\r\n\r\n  sortByFilter(outfits, filter, isAscending = true) {\r\n    outfits.sort((a, b) => isAscending ? a[filter] - b[filter] : b[filter] - a[filter])\r\n  }\r\n\r\n  sortOutfits(filter, isAscending) {\r\n    this.setState((state, props) => {\r\n      let outfits = [...state.outfits];\r\n      this.sortByFilter(outfits, filter, isAscending);\r\n      //console.log('sortOutfits', filter, outfits);\r\n      return { outfits: outfits }\r\n    })\r\n  }\r\n\r\n  setMember(newMember) {\r\n    this.setState((state, props) => {\r\n      let newTeam = state.teamMembers.slice();\r\n      let index = state.teamSlot;\r\n      //can't have same chara on team twice\r\n      //assume if user chooses outfit for chara on team they are changing their outfit\r\n      for (let i = 0; i < newTeam.length; i++) {\r\n        if (newMember['Character'] === newTeam[i]['Character']) { index = i; break; }\r\n      }\r\n      newTeam[index] = newMember;\r\n      return { teamMembers: newTeam, isOutfitList: false };\r\n    })\r\n  }\r\n\r\n  submitFilterSelection(filter) {\r\n    return (value) => {\r\n      console.log('submitFilterSelection', value)\r\n      this.setState((state) => {\r\n        let newState = { ...state };\r\n        newState[filter] = value;\r\n        const outfitSource = newState.userOutfits ? newState.userOutfits : newState.allOutfits;\r\n        const outfits = this.prepareOutfitData(outfitSource, newState)\r\n        newState.outfits = outfits;\r\n        return newState;\r\n      });\r\n    }\r\n  }\r\n\r\n  //returns Object with query and conditions given passed-in state\r\n  getQueryAndConditions(state) {\r\n    const query = Object.keys(state).reduce((accumulator, key) => { //make Object of Sets that hold selected values\r\n      const value = state[key];\r\n      if (key.includes('sel') && key !== 'selAttr' && value.size > 0) { accumulator[key] = value; }\r\n      return accumulator;\r\n    }, {});\r\n    //console.log(query);\r\n    const conditions = state.activeJob ?\r\n      state.activeJob['Conditions'] ? state.activeJob['Conditions'].split(',').map(str => str.trim()) : []\r\n      : [];\r\n    return { query: query, conditions: conditions };\r\n  }\r\n\r\n  //filter outfits based on any selected queries and conditions in activeJob\r\n  //calculate total bonus for selected attributes\r\n  //sort outfits in descending order by total bonus\r\n  //return outfit Obj of Arrays\r\n  prepareOutfitData(data, state) {\r\n    //create new deep copy of outfitList, but slows performance\r\n    //be careful about how other functions may mutate data\r\n    //let newData = JSON.parse(JSON.stringify(data)) \r\n    let queryConfig = this.getQueryAndConditions(state);\r\n    queryConfig.isInclusive = state.isInclusive;\r\n    let outfits = filterData(data, queryConfig);\r\n    outfits = this.addIdolStatus(outfits, state.idolStats);\r\n    if (state.selAttr.length > 0) {\r\n      outfits = this.calculateTotalBonus(outfits, state.selAttr);\r\n      this.sortByFilter(outfits, 'Total Bonus', false);\r\n    }\r\n    return outfits;\r\n  }\r\n\r\n  calculateTotalBonus(outfits, attrSet) { //outfits is Array of Objects of each outfit info\r\n    //console.log('Main calculateTotalBonus', attrSet);\r\n    outfits.forEach(outfitObj => {\r\n      let total = 0;\r\n      attrSet.forEach(attr => total += outfitObj[attr]);\r\n      outfitObj['Total Bonus'] = total;\r\n    });\r\n    return outfits;\r\n  }\r\n\r\n  addIdolStatus(outfits, idolStats) {\r\n    if (idolStats) {\r\n      outfits.forEach(outfitObj => {\r\n        const stats = idolStats[outfitObj['Character']];\r\n        //stats might not exist if user has misspelled idol name\r\n        if (stats && !outfitObj['AddedStat']) {\r\n          Object.keys(stats).forEach(attr => {\r\n            //attr might not exist if user has misspelled attr\r\n            if (outfitObj.hasOwnProperty(attr)) {\r\n              outfitObj[attr] += stats[attr];\r\n            }\r\n          });\r\n          outfitObj['AddedStat'] = true;\r\n        }\r\n      });\r\n    }\r\n    console.log('addIdolStatus', outfits)\r\n    return outfits\r\n  }\r\n\r\n  getUserData(url) {\r\n    if (url.length > 0) {\r\n      //url format: https://docs.google.com/spreadsheets/d/SPREADSHEET_ID/possible-extra-content\r\n      let urlStr = url.replace('https://docs.google.com/spreadsheets/d/', '');\r\n      const sheetId = urlStr.indexOf('/') > 0 ? urlStr.slice(0, urlStr.indexOf('/')) : urlStr;\r\n      console.log(sheetId);\r\n      //if (sheetId !== this.state.userSheetId) { user might be re-adding sheet w altered data\r\n        fetch(`https://sheets.googleapis.com/v4/spreadsheets/${sheetId}/values/${'Outfits'}?key=${apiKey}`)\r\n          .then(res => res.json())\r\n          .then(res => this.handleErrors(res))\r\n          .then(res => {\r\n            if (res) {\r\n              let data = res.values; //Array of Arrays representing sheet rows\r\n              //check if 'Outfits' sheet columns are labeled correctly\r\n              let headers = data[0].map(header => header.toUpperCase());\r\n              if (!headers.includes('CHARACTER') || !headers.includes('OUTFIT') || !headers.includes('MADE')) {\r\n                this.handleErrors({ error: { status: 'HEADER NOT FOUND' } });\r\n              }\r\n              else {\r\n                //keep user data as Array of Arrays? assumes columns are in the same order\r\n                //--> convert to object so keys can be used instead of index\r\n                data[0] = headers //ignore column case jic\r\n                let userList = convertArraysToObjects(data);\r\n                userList = userList.filter(row => row['CHARACTER'] && row['OUTFIT']) //filter out empty rows\r\n                userList.sort((a, b) => { //sort by character then outfit A->Z\r\n                  if (a['CHARACTER'].toUpperCase() === b['CHARACTER'].toUpperCase()) {\r\n                    if (a['OUTFIT'].toUpperCase() < b['OUTFIT'].toUpperCase()) {\r\n                      return -1;\r\n                    }\r\n                    else if (a['OUTFIT'].toUpperCase() > b['OUTFIT'].toUpperCase()) {\r\n                      return 1;\r\n                    }\r\n                    return 0;\r\n                  }\r\n                  else if (a['CHARACTER'].toUpperCase() < b['CHARACTER'].toUpperCase()) {\r\n                    return -1;\r\n                  }\r\n                  else if (a['CHARACTER'].toUpperCase() > b['CHARACTER'].toUpperCase()) {\r\n                    return 1;\r\n                  }\r\n                  return 0;\r\n                });\r\n                console.log('userlist length', userList.length);\r\n                //how to filter outfits with least time complexity?\r\n                //a) iterate over userList, find corresponding outfit, leave out outfits not in database\r\n                //b) iterate over outfits, check if outfit is in userList, outfits not in database will not be displayed\r\n                //both are O(userList.length * outfits.length)\r\n                //c) check if outfit is in userList when filtering data\r\n                //adds complexity to filtering so no good\r\n                let outfits = [...this.state.allOutfits];\r\n                let userOutfits = outfits.reduce((acc, outfit) => {\r\n                  //practice binary search algorithm\r\n                  let outfitMatch = false;\r\n                  let low = 0;\r\n                  let high = userList.length - 1;\r\n                  //console.log('looking for ', outfit);\r\n                  while (!outfitMatch) { //check if Character and Outfit combo is in userList\r\n                    //console.log('numbers', low, high, low > high);\r\n                    if (high < low) { break; }\r\n                    let middle = Math.floor(low + (high - low) / 2);\r\n                    //console.log('middle', middle, userList[middle]);\r\n                    if (userList[middle]['CHARACTER'].toUpperCase() === outfit['Character'].toUpperCase()) {\r\n                      if (userList[middle]['OUTFIT'].toUpperCase() < outfit['Outfit'].toUpperCase()) {\r\n                        low = middle + 1;\r\n                      }\r\n                      else if (userList[middle]['OUTFIT'].toUpperCase() > outfit['Outfit'].toUpperCase()) {\r\n                        high = middle - 1;\r\n                      }\r\n                      else { outfitMatch = userList[middle] }\r\n                    }\r\n                    else if (userList[middle]['CHARACTER'].toUpperCase() < outfit['Character'].toUpperCase()) {\r\n                      low = middle + 1;\r\n                    }\r\n                    else if (userList[middle]['CHARACTER'].toUpperCase() > outfit['Character'].toUpperCase()) {\r\n                      high = middle - 1;\r\n                    }\r\n                  }\r\n                  if (outfitMatch) {\r\n                    if (Object.keys(outfitMatch).includes('MADE')) {\r\n                      outfit['Made'] = outfitMatch['MADE'] === 'TRUE' ? true : false;\r\n                    }\r\n                    acc.push(outfit);\r\n                    return acc;\r\n                  }\r\n                  else return acc;\r\n                }, [])\r\n                return userOutfits;\r\n              }\r\n            }\r\n          })\r\n          .then(outfits => {\r\n            if (outfits) {\r\n              this.setState((state) => {\r\n                //clear team in case of outfits that aren't in userList\r\n                const emptyTeam = state.teamMembers.map(member => 0);\r\n                const preparedOutfits = this.prepareOutfitData(outfits, state)\r\n                return { userSheetId: sheetId, userOutfits: outfits, outfits: preparedOutfits, teamMembers: emptyTeam, selMade: new Set() }\r\n              });\r\n            }\r\n          })\r\n          .then(\r\n            fetch(`https://sheets.googleapis.com/v4/spreadsheets/${sheetId}/values/${'Idol Status'}?key=${apiKey}`)\r\n              .then(res => res.json())\r\n              .then(res => {\r\n                if (res.values) {\r\n                  const userStatus = convertArraysToObjects(res.values);\r\n                  const idolStats = {};\r\n                  userStatus.forEach(idol => {\r\n                    const name = idol['Character'];\r\n                    delete idol['Character'];\r\n                    idolStats[name] = idol;\r\n                  });\r\n                  const newState = { ...this.state };\r\n                  newState.idolStats = idolStats;\r\n                  const outfits = this.prepareOutfitData(this.state.outfits, newState);\r\n                  newState.outfits = outfits;\r\n                  this.setState(newState);\r\n                }\r\n              })\r\n          )\r\n      //}\r\n    }\r\n  }\r\n\r\n  handleErrors(response) {\r\n    //console.log(response);\r\n    if (response.error) {\r\n      if (response.error.code === 403 && response.error.status.includes('PERMISSION_DENIED')) {\r\n        console.log(\"Error: Sorter did not have permission to access your spreadsheet. Don't forget to turn link-sharing on!\")\r\n        return;\r\n      }\r\n      if (response.error.code === 400 && response.error.status.includes('INVALID_ARGUMENT')) {\r\n        console.log(\"Error: Sorter did not find a sheet called 'Outfits' in your spreadsheet.\")\r\n        return;\r\n      }\r\n      if (response.error.status === ('HEADER NOT FOUND')) {\r\n        console.log(\"Error: Sorter did not find 'Character', 'Outfit', and 'Made' columns in your spreadsheet.\")\r\n        return;\r\n      }\r\n    }\r\n    else return response;\r\n  }\r\n\r\n  render() {\r\n    if (this.state.outfits && this.state.jobs) {\r\n      //console.log('Main render', this.state.allOutfits, this.state.userOutfits, this.state.outfits)\r\n      //outfitList doesn't update without key. 100 is an arbitrary number\r\n      let outfitListKey = this.state.outfits.slice(0, 100);\r\n      outfitListKey = JSON.stringify(outfitListKey);\r\n      const jobViewProps = {\r\n        activeJob: this.state.activeJob,\r\n        teamMembers: this.state.teamMembers,\r\n        jobs: this.state.jobs,\r\n        attr: this.state.attr,\r\n        selAttr: this.state.selAttr,\r\n        selectJob: this.selectJob,\r\n      }\r\n      const teamViewProps = {\r\n        sheetId: this.state.userSheetId,\r\n        selAttr: this.state.selAttr,\r\n        activeJob: this.state.activeJob,\r\n        teamMembers: this.state.teamMembers,\r\n        toggleOutfitList: this.toggleOutfitList,\r\n        getUserData: this.getUserData,\r\n      }\r\n      const outfitListProps = {\r\n        key: outfitListKey,\r\n        outfits: this.state.outfits,\r\n        teamMembers: this.state.teamMembers,\r\n        view: this.state.view,\r\n        attr: this.state.attr,\r\n        selAttr: this.state.selAttr,\r\n        setMember: this.setMember,\r\n        toggleOutfitList: this.toggleOutfitList,\r\n      }\r\n      const sidebarProps = {\r\n        selAttr: this.state.selAttr,\r\n        data: this.state.allOutfits,\r\n        filters: this.state.filters,\r\n        status: `showing ${this.state.outfits.length} outfits`,\r\n        submitFilterSelection: this.submitFilterSelection,\r\n        toggleTrue: this.toggleSearchTypeTrue,\r\n        toggleFalse: this.toggleSearchTypeFalse,\r\n        toggleMade: this.state.hasOwnProperty('selMade') && this.toggleMade,\r\n        toggleOutfitList: this.toggleOutfitList,\r\n        sortOutfits: this.sortOutfits,\r\n      }\r\n      return (\r\n        <>\r\n          <div id='teamBuilder'>\r\n            <TeamView {...teamViewProps} />\r\n            {this.state.activeJob && <JobViewContainer {...jobViewProps} />}\r\n          </div>\r\n          <div className='overlay' style={{ top: this.state.isOutfitList ? '0' : '100vh' }}>\r\n            <div className='overlayContent'>\r\n              <SideBar {...sidebarProps} />\r\n              <OutfitList {...outfitListProps} />\r\n            </div>\r\n          </div>\r\n        </>\r\n      )\r\n    }\r\n    else return <div>Loading...</div>;\r\n  }\r\n}\r\n\r\nexport function Image(props) {\r\n  let image = null;\r\n  if (!props.obj['ImageID'] || props.obj['ImageID'] === 'MISSING') {\r\n    image = <div className='imgPlaceholder'><div>{props.alt}</div></div>\r\n  }\r\n  else {\r\n    image = <img src={'https://drive.google.com/uc?export=view&id=' + props.obj['ImageID']} alt={props.alt} />\r\n  }\r\n  return image;\r\n}\r\n\r\n\r\n//this Image class slows down load time...\r\n//https://stackoverflow.com/questions/39777833/image-onload-event-in-isomorphic-universal-react-register-event-after-image-is\r\n//class Image extends React.PureComponent {\r\n//  constructor(props) {\r\n//    super(props);\r\n//    this.state = {\r\n//      error: null,\r\n//    }\r\n//    this.onError = this.onError.bind(this);\r\n//  }\r\n//  onError() {\r\n//    this.setState({ isLoaded: true, error: true });\r\n//  }\r\n\r\n//  render() {\r\n//    console.log(this.props.obj);\r\n//    if (this.state.error) {\r\n//      if (!this.props.obj['ImageID'] || this.props.obj['ImageID'] === 'MISSING') {\r\n//        return <div className='imgPlaceholder'>Image N/A</div>\r\n//      }\r\n//      return <div className='imgPlaceholder'>Failed to load image</div>\r\n//    }\r\n//    return (\r\n//      <img src={'http://drive.google.com/uc?export=view&id=' + this.props.obj['ImageID']}\r\n//        alt={this.props.alt}\r\n//        ref={this.image}\r\n//        onError={this.onError} />\r\n//    )\r\n//  }\r\n//}\r\n\r\n\r\n//statusBarWidth: Integer as width of status bar in rem\r\n//maxValue: maximum value of status bar\r\n//attr: Array of Strings ot indicate which attributes to display\r\n//value: Obj of attr to display and corresponding values to calculate status bar (optional if bonus is provided)\r\n//bonus: Obj of attr to display and corresponding bonus values (optional if value is provided)\r\n//baseline: Obj of attr to display baseline job reqs on StatusBar\r\nexport function AttrList(props) {\r\n  const hideIcon = props.hideIcon || false;\r\n  return (\r\n    <div className='attrList'>\r\n      {props.attr.map(attr => {\r\n        const value = (props.value ? props.value[attr] : 0) + (props.bonus ? props.bonus[attr] : 0);\r\n        //const numberText = (props.value ? props.value[attr] : '') + (props.bonus ? ` +${props.bonus[attr]}` : '').trim();\r\n        let numberText = value;\r\n        if (props.bonus) {\r\n          if (!props.bonus['AddedStat']) { numberText = '+' + numberText }\r\n        }\r\n        //const progressText = props.baseline ?\r\n        //  `${props.value[attr]}/${props.baseline[attr]}`\r\n        //  : '';\r\n        const statusBarProps = {\r\n          attr: attr,\r\n          value: value,\r\n          maxValue: props.maxValue,\r\n        }\r\n        if (props.baseline) { statusBarProps.baseline = props.baseline[attr] }\r\n        return (\r\n          <div className='attr' key={attr}>\r\n            {!hideIcon && <AttrIcon attr={attr} />}\r\n            <span className='numberText'>{numberText}</span>\r\n            <StatusBar {...statusBarProps} />\r\n            {props.baseline && <span className='numberText'>{`${props.value[attr] > props.baseline[attr] ? '+' : ''}${props.value[attr] - props.baseline[attr]}`}</span>}\r\n          </div>\r\n        )\r\n      })}\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction StatusBar(props) {\r\n  return (\r\n    <span className='statusBarContainer'>\r\n      {props.baseline &&\r\n        <span className='baseline'\r\n          style={{ marginLeft: `${props.baseline / props.maxValue * 100}%` }} />\r\n      }\r\n      <span className={'statusBar ' + props.attr.toLowerCase()}\r\n        style={{ width: `${props.value / props.maxValue * 100}%` }} />\r\n    </span>\r\n  )\r\n}\r\n\r\nexport function AttrIcon(props) {\r\n  return <span className={'icon ' + props.attr.toLowerCase()}>{props.attr}</span>\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Main from './Main.js';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Main />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}