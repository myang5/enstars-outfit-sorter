{"version":3,"sources":["Sidebar.js","sheetsCreds.js","OutfitList.js","Gsx2json.js","Main.js","App.js","serviceWorker.js","index.js"],"names":["Sidebar","props","toggleValue","id","className","AttrOptions","optionsArr","attributes","SearchType","toggleTrue","toggleFalse","SelectOptions","heading","units","selected","selUnits","clearFilter","characters","selCharas","TierOptions","outfitTiers","outfitTypes","selOutfits","type","name","onClick","defaultChecked","htmlFor","options","map","option","key","value","index","indexOf","splice","Array","from","ToggleOption","ClearFilterButton","defaultValue","onChange","disabled","apiKey","spreadsheetId","OutfitList","state","error","isLoading","hasMore","status","outfits","loadedOutfits","outfitsToLoad","onScroll","bind","loadOutfits","onScrollThrottled","throttle","toggleSidebar","document","querySelector","classList","toggle","prevProps","this","query","setState","fetch","then","res","json","data","config","useIntegers","integers","isInclusive","responseObj","headers","values","length","Set","reduce","accumulator","currentVal","concat","i","row","queried","size","j","has","set","currVal","newRow","header","isNaN","Number","toLowerCase","push","filterGsData","stringQuery","selAttr","attr","sort","a","b","totalBonusA","totalBonusB","event","persist","target","window","innerHeight","scrollTop","scrollHeight","slice","elt","Outfit","character","outfit","React","Component","properties","AttrList","total","totalBonus","Object","keys","includes","charAt","toUpperCase","Main","selTiers","toggleValueInSet","toggleSearchTypeTrue","toggleSearchTypeFalse","result","resultObj","filter","arr","newSet","delete","add","sidebarProps","field","isArray","outfitListProps","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.2b1aab62.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default function Sidebar(props) {\r\n  const toggleValue = props.toggleValue();\r\n\r\n\r\n\r\n  return (\r\n    <div id='sidebar' className='toggledOn'>\r\n      {/* <SearchButton /> */}\r\n      <AttrOptions id='attrOpts' optionsArr={props.attributes} toggleValue={toggleValue('selAttr')} />\r\n      <div className='options'><p>Filter data by...</p></div>\r\n      <SearchType toggleTrue={props.toggleTrue} toggleFalse={props.toggleFalse} />\r\n      <SelectOptions id='unitOpts' heading='Unit' optionsArr={props.units} selected={props.selUnits} toggleValue={toggleValue('selUnits')} clearFilter={props.clearFilter('selUnits')} />\r\n      <SelectOptions id='charaOpts' heading='Character' optionsArr={props.characters} selected={props.selCharas} toggleValue={toggleValue('selCharas')} clearFilter={props.clearFilter('selCharas')} />\r\n      <TierOptions id='tierOpts' optionsArr={props.outfitTiers} toggleValue={toggleValue('selTiers')} />\r\n      <SelectOptions id='outfitOpts' heading='Outfit Type' optionsArr={props.outfitTypes} selected={props.selOutfits} toggleValue={toggleValue('selOutfits')} clearFilter={props.clearFilter('selOutfits')} />\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction SearchType(props) {\r\n  return (\r\n    <div className='options'>\r\n      <div className='radioBtn'>\r\n        <input type='radio' name='searchType' id='false' onClick={props.toggleFalse} defaultChecked />\r\n        <label htmlFor='false'>Strict match <br /><span className='desc'>(find outfits that match all search criteria)</span></label>\r\n      </div>\r\n      <div className='radioBtn'>\r\n        <input type='radio' name='searchType' id='true' onClick={props.toggleTrue} />\r\n        <label htmlFor='true'>Inclusive match <br /><span className='desc'>(find outfits that match 1 or more criteria)</span></label>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction AttrOptions(props) {\r\n  const options = props.optionsArr.map(function (option) {\r\n    return (\r\n      <div key={option}>\r\n        <input type='checkbox' value={option} onClick={props.toggleValue} />\r\n        <label htmlFor={option}>{option}</label>\r\n      </div>\r\n    )\r\n  });\r\n  return (\r\n    <div className='options' id={props.id}>\r\n      <div className='row'><p>Stat Bonus</p></div>\r\n      <div className='row'>{options}</div>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction TierOptions(props) {\r\n  const options = props.optionsArr.map(function (option, index) {\r\n    return (\r\n      <div key={option}>\r\n        <input type='checkbox' value={index + 1} onClick={props.toggleValue} />\r\n        <label htmlFor={option}>{option}</label>\r\n      </div>\r\n    )\r\n  });\r\n  return (\r\n    <div className='options' id={props.id}>\r\n      <div className='row'><p>Outfit Tier</p></div>\r\n      <div className='row'>{options}</div>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction SelectOptions(props) {\r\n  if (props.optionsArr.indexOf(props.heading) > -1) { props.optionsArr.splice(props.optionsArr.indexOf(props.heading), 1, '') }\r\n  const options = props.optionsArr.map(function (option) {\r\n    if (option) { return <option key={option} value={option}>{option}</option> }\r\n  });\r\n  const selected = Array.from(props.selected).map((value) =>\r\n    <ToggleOption key={value} value={value} toggleValue={props.toggleValue} />\r\n  );\r\n  return (\r\n    <div className='options' id={props.id}>\r\n      <div className='row'>\r\n        <div><p>{props.heading}</p></div>\r\n        <ClearFilterButton clearFilter={props.clearFilter} />\r\n      </div>\r\n      <select className='row' defaultValue='none' onChange={props.toggleValue}>\r\n        <option disabled value='none'>(select an option)</option>\r\n        {options}\r\n      </select>\r\n      <div>{selected}</div>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction ClearFilterButton(props) {\r\n  return (\r\n    <div className='clearFilter'>\r\n      <button className='clearBtn' onClick={props.clearFilter}>Clear</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction ToggleOption(props) {\r\n  return (\r\n    <div className='toggleOpt'>\r\n      <span>{props.value}</span>\r\n      <button className='cancelBtn' value={props.value} onClick={props.toggleValue}>X</button>\r\n    </div>\r\n  )\r\n}\r\n\r\n","export const apiKey = 'AIzaSyBYN0YVkl2lB5ps2CL_74JKIs5TOukXdm4';\r\nexport const spreadsheetId = '1JeHlN1zcBwyBbBkyfsDiiqDZpLotkn770ewa1JCsekU';","import React from 'react';\r\nimport filterGsData from './Gsx2json.js';\r\nimport { apiKey, spreadsheetId } from './sheetsCreds.js';\r\nimport throttle from 'lodash.throttle';\r\n\r\nexport default class OutfitList extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      error: false,\r\n      isLoading: false,\r\n      hasMore: true,\r\n      status: '',\r\n      outfits: [],\r\n      loadedOutfits: [],\r\n      outfitsToLoad: 20,\r\n    };\r\n    this.onScroll = this.onScroll.bind(this);\r\n    this.loadOutfits = this.loadOutfits.bind(this);\r\n    this.onScrollThrottled = throttle(this.onScroll, 100);\r\n    this.toggleSidebar = () => {\r\n      document.querySelector('#sidebar').classList.toggle('toggledOn');\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props.query !== prevProps.query) {\r\n      // console.log(this.props.stringQuery);\r\n      this.setState({ status: 'Loading...' }, () => {\r\n        const sheetId = 'Stat Bonuses';\r\n        fetch(`https://sheets.googleapis.com/v4/spreadsheets/${spreadsheetId}/values/${sheetId}?key=${apiKey}`)\r\n          .then(res => res.json())\r\n          .then(res => {\r\n            let outfits = filterGsData(res, { query: this.props.stringQuery, isInclusive: this.props.isInclusive }); //all outfits that match character/outfit (inclusive)\r\n            // console.log(outfits);\r\n            if (this.props.selAttr.size > 0) {\r\n              for (let i = outfits.length - 1; i >= 0; i--) {\r\n                let queried = false;\r\n                for (let attr of this.props.selAttr) {\r\n                  if (outfits[i][attr.toLowerCase()]) { //inclusive search by attr\r\n                    queried = true;\r\n                    break;\r\n                  }\r\n                  // if (!outfits[i][attr.toLowerCase()]) { //currently only keeps outfits that meet all attr criteria (exclusive)\r\n                  //   outfits.splice(i, 1);\r\n                  //   break;\r\n                  // }\r\n                }\r\n                if (!queried) outfits.splice(i, 1);\r\n              }\r\n            }\r\n            outfits.sort((a, b) => { //sort from highest to lowest queried stat bonus\r\n              let totalBonusA = 0;\r\n              let totalBonusB = 0;\r\n              for (let attr of this.props.selAttr) {\r\n                totalBonusA += a[attr.toLowerCase()];\r\n                totalBonusB += b[attr.toLowerCase()];\r\n              }\r\n              return totalBonusB - totalBonusA;\r\n            })\r\n            return { outfits: outfits, loadedOutfits: [], status: `${outfits.length} outfits found` }\r\n          })\r\n          .then(res => { this.setState(res, this.loadOutfits) });\r\n      });\r\n    }\r\n  }\r\n\r\n  //modified from this tutorial: https://alligator.io/react/react-infinite-scroll/\r\n  //and also this https://blog.bitsrc.io/improve-your-react-app-performance-by-using-throttling-and-debouncing-101afbe9055\r\n  onScroll(event) {\r\n    event.persist() //didn't work without this \r\n\r\n    // Bails early if:\r\n    // * it's already loading\r\n    // * there's nothing left to load\r\n    // console.log(this.state.isLoading, this.state.hasMore);\r\n    if (this.state.isLoading || !this.state.hasMore) { return; }\r\n\r\n    // Checks that the page has scrolled to the bottom\r\n    if (event.target) {\r\n      if (window.innerHeight + event.target.scrollTop >= event.target.scrollHeight - 600) {\r\n        // console.log('loading more');\r\n        this.loadOutfits();\r\n      }\r\n    }\r\n  }\r\n\r\n  loadOutfits() {\r\n    this.setState({ isLoading: true }, () => {\r\n      this.setState((state, props) => {\r\n        // console.log('initial loaded outfits', state.loadedOutfits);\r\n        let loadedOutfits = state.loadedOutfits;\r\n        loadedOutfits = loadedOutfits.concat(state.outfits.slice(state.loadedOutfits.length, state.loadedOutfits.length + state.outfitsToLoad));\r\n        const hasMore = loadedOutfits.length < state.outfits.length;\r\n        // console.log('after loadOutfits', loadedOutfits);\r\n        return { hasMore: hasMore, isLoading: false, loadedOutfits: loadedOutfits };\r\n      });\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const outfits = this.state.loadedOutfits.map((elt) =>\r\n      <Outfit key={elt.character + elt.outfit} props={elt} attributes={this.props.attributes} selAttr={this.props.selAttr} />\r\n    );\r\n    // console.log('finished loading outfit list', performance.now())\r\n    return (\r\n      <div className='pageContent' onScroll={this.onScrollThrottled}>\r\n        <div id='toggleSidebarBtn' onClick={this.toggleSidebar}></div>\r\n        <p className='status'>{this.state.status}</p>\r\n        <div id='outfitList'>{outfits}</div>\r\n        {!this.state.hasMore &&\r\n          <p className='status'>End of results</p>\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nfunction Outfit(props) {\r\n  const properties = props.props;\r\n  // const attr = Object.keys(properties).map(key => { //display all attributes\r\n  //   if (props.attributes.includes(key.charAt(0).toUpperCase() + key.slice(1))) {\r\n  //     return <span key={key + properties[key]}>{`${key.charAt(0).toUpperCase() + key.slice(1)}: ${properties[key]}`}</span>\r\n  //   }\r\n  // });\r\n  const totalBonus = () => { //display total bonus of queried attrs if any have been queried\r\n    if (props.selAttr.size > 0) {\r\n      const total = Array.from(props.selAttr)\r\n        .reduce((accumulator, currVal) => accumulator + properties[currVal.toLowerCase()], 0);\r\n      return <span>{`TOTAL BONUS: ${total}`}</span>;\r\n    }\r\n    else return null;\r\n  }\r\n  return (\r\n    <div className='outfit'>\r\n      <span>{`${properties.character} - ${properties.outfit}`}</span>\r\n      <hr />\r\n      <AttrList attributes={props.attributes} props={props.props} />\r\n      {totalBonus()}\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction AttrList(props) {\r\n  return (\r\n    <div className='attrList'>\r\n      {Object.keys(props.props).map(key => { //display all attributes\r\n        if (props.attributes.includes(key.charAt(0).toUpperCase() + key.slice(1))) {\r\n          return <span key={key + props.props[key]}>{`${key.charAt(0).toUpperCase() + key.slice(1)}: ${props.props[key]}`}</span>\r\n        }\r\n      })\r\n      }\r\n    </div>\r\n  )\r\n}\r\n","export default function filterGsData(data, config = {}) {\n  let query = config.query || []; //array of arrays of values selected for each filter\n  const useIntegers = config.integers || true;\n  const isInclusive = config.isInclusive || false; //whether row should match query partially (inclusive) or entirely (exclusive)\n  const responseObj = [];\n  // console.log('is inclusive: ' + isInclusive);\n  if (data) {\n    const headers = data.values[0];\n    //if inclusive search queries don't need to be grouped\n    if (isInclusive && query.length) { query = new Set( query.reduce( ( accumulator, currentVal ) => accumulator.concat( [...currentVal] ), [] ) ) }\n    // console.log(query);\n    for (let i = 1; i < data.values.length; i++) { //iterate over array of rows\n      const row = data.values[i];\n      let queried = false;\n      if (query.size === 0 || query.length === 0) { queried = true; } //if no query just push all rows\n      else if (isInclusive) {\n        for (let j = 0; j < row.length; j++) { //if any query is found in row queried = true\n          if (query.has(row[j])) { queried = true; break }\n        }\n      }\n      else { //exclusive search\n        const result = query.map((set) => { //for each filter, check if any query is found in row \n          for (let j = 0; j < row.length; j++) { //if any query is found in row queried = true\n            if (set.has(row[j])) { return true }\n          }\n        });\n        //if any query is not found in row queried = false\n        queried = result.reduce(function (accumulator, currVal) { return accumulator && currVal }, true);\n      }\n      if (queried) {\n        const newRow = {};\n        for (let j = 0; j < row.length; j++) { //iterate over values in each row to add headers\n          const header = headers[j];\n          let value = row[j];\n          if (useIntegers === true && !isNaN(value)) {\n            value = Number(value);\n          }\n          newRow[header.toLowerCase()] = value;\n        }\n        responseObj.push(newRow);\n      }\n    }\n    // console.log(responseObj);\n    return responseObj;\n  }\n}\n\n","import React from 'react';\r\nimport Sidebar from './Sidebar.js';\r\nimport OutfitList from './OutfitList.js';\r\nimport { apiKey, spreadsheetId } from './sheetsCreds.js';\r\n\r\nexport default class Main extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      characters: [],\r\n      units: [],\r\n      outfitTypes: [],\r\n      outfitTiers: ['Tier I', 'Tier II', 'Tier III'],\r\n      attributes: ['Ac', 'Pa', 'Un', 'Sm', 'Te', 'Ch'],\r\n      selCharas: new Set(), //query rows with select characters\r\n      selOutfits: new Set(), //query rows with selected outfits\r\n      selUnits: new Set(), //query rows with selected units\r\n      selTiers: new Set(),\r\n      selAttr: new Set(), //rows where selAttr > 0\r\n      isInclusive: false,\r\n    };\r\n    this.toggleValueInSet = this.toggleValueInSet.bind(this);\r\n    this.toggleSearchTypeTrue = this.toggleSearchTypeTrue.bind(this);\r\n    this.toggleSearchTypeFalse = this.toggleSearchTypeFalse.bind(this);\r\n    this.clearFilter = this.clearFilter.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const sheetId = 'Validation Lists';\r\n    //fetch info for sidebar\r\n    fetch(`https://sheets.googleapis.com/v4/spreadsheets/${spreadsheetId}/values/${sheetId}?key=${apiKey}&majorDimension=COLUMNS`)\r\n      .then(result => result.json())\r\n      .then(result => {\r\n        const resultObj = result.values;\r\n        const characters = resultObj.filter((arr) => arr[0] === 'Character');\r\n        const outfitTypes = resultObj.filter((arr) => arr[0] === 'Outfit Type');\r\n        const units = resultObj.filter((arr) => arr[0] === 'Unit');\r\n        this.setState({ characters: characters[0], outfitTypes: outfitTypes[0], units: units[0] });\r\n      })\r\n  }\r\n\r\n  toggleSearchTypeTrue () {\r\n    this.setState({isInclusive: true})\r\n  }\r\n\r\n  toggleSearchTypeFalse () {\r\n    this.setState({isInclusive: false})\r\n  }\r\n\r\n  toggleValueInSet() {\r\n    return (filter) => {\r\n      return (event) => {\r\n        const newSet = this.state[filter];\r\n        if (this.state[filter].has(event.target.value)) {\r\n          newSet.delete(event.target.value);\r\n        }\r\n        else {\r\n          newSet.add(event.target.value);\r\n        }\r\n        this.setState({ [filter]: newSet });\r\n      }\r\n    }\r\n  }\r\n\r\n  clearFilter(filter) {\r\n    return () => this.setState( {[filter]: new Set()})\r\n  }\r\n\r\n  render() {\r\n    // console.log('render main component', performance.now())\r\n    const sidebarProps = {\r\n      characters: this.state.characters, //render selects and attributes check boxes\r\n      outfitTypes: this.state.outfitTypes,\r\n      units: this.state.units,\r\n      outfitTiers: this.state.outfitTiers,\r\n      attributes: this.state.attributes,\r\n      selCharas: this.state.selCharas, //needed to render ToggleButtons\r\n      selOutfits: this.state.selOutfits,\r\n      selUnits: this.state.selUnits,\r\n      toggleValue: this.toggleValueInSet,\r\n      toggleTrue: this.toggleSearchTypeTrue,\r\n      toggleFalse: this.toggleSearchTypeFalse,\r\n      clearFilter: this.clearFilter,\r\n    }\r\n    const query = Object.keys(this.state).reduce((accumulator, key) => { //concat values in Sets that hold selected values\r\n      const field = this.state[key];\r\n      if (!Array.isArray(field)) { return accumulator.concat(Array.from(field)); }\r\n      else return accumulator.concat([]);\r\n    }, []);\r\n    query.push(this.state.isInclusive);\r\n    const stringQuery = Object.keys(this.state).reduce((accumulator, key) => { //create array of Sets that hold selected values\r\n      const field = this.state[key];\r\n      if (!Array.isArray(field) && typeof(field) === 'object' && key !== 'selAttr' && field.size > 0) {accumulator.push(field); return accumulator}\r\n      else return accumulator;\r\n    }, []);\r\n    const outfitListProps = {\r\n      query: query,\r\n      stringQuery: stringQuery,\r\n      attributes: this.state.attributes,\r\n      selAttr: this.state.selAttr,\r\n      isInclusive: this.state.isInclusive,\r\n    }\r\n    return (\r\n      <>\r\n        <Sidebar {...sidebarProps} />\r\n        <OutfitList {...outfitListProps} />\r\n        \r\n      </>\r\n    )\r\n  }\r\n}","import React from 'react';\nimport Main from './Main.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}