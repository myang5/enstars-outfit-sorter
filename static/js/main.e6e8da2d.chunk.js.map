{"version":3,"sources":["Sidebar.js","sheetsCreds.js","OutfitList.js","Gsx2json.js","Main.js","App.js","serviceWorker.js","index.js"],"names":["Sidebar","props","toggleValue","className","AttrOptions","id","optionsArr","attributes","SearchType","toggleTrue","toggleFalse","SelectOptions","heading","units","selected","selUnits","characters","selCharas","outfitTypes","selOutfits","type","name","onClick","defaultChecked","htmlFor","options","map","option","key","value","indexOf","splice","Array","from","ToggleOption","defaultValue","onChange","disabled","apiKey","spreadsheetId","OutfitList","state","isLoaded","outfits","status","prevProps","this","query","fetch","then","res","json","setState","data","config","useIntegers","integers","isInclusive","responseObj","headers","values","length","Set","reduce","accumulator","currentVal","concat","i","row","queried","size","j","has","set","currVal","newRow","header","isNaN","Number","toLowerCase","push","filterGsData","stringQuery","selAttr","attr","sort","a","b","totalBonusA","totalBonusB","body","elt","Outfit","character","outfit","React","Component","properties","AttrList","total","totalBonus","Object","keys","includes","charAt","toUpperCase","slice","Main","toggleValueInSet","bind","toggleSearchTypeTrue","toggleSearchTypeFalse","result","resultObj","filter","arr","setName","event","newSet","target","delete","add","sidebarProps","field","isArray","outfitListProps","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e6e8da2d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default function Sidebar(props) {\r\n  const toggleValue = props.toggleValue();\r\n  return (\r\n    <div className='sidebar'>\r\n      {/* <SearchButton /> */}\r\n      <AttrOptions id='attrOpts' optionsArr={props.attributes} toggleValue={toggleValue('selAttr')} />\r\n      <div className='options'><h3>Filter data by...</h3></div>\r\n      <SearchType toggleTrue={props.toggleTrue} toggleFalse={props.toggleFalse}/>\r\n      <SelectOptions id='unitOpts' heading='Unit' optionsArr={props.units} selected={props.selUnits} toggleValue={toggleValue('selUnits')} />\r\n      <SelectOptions id='charaOpts' heading='Character' optionsArr={props.characters} selected={props.selCharas} toggleValue={toggleValue('selCharas')} />\r\n      <SelectOptions id='outfitOpts' heading='Outfit Type' optionsArr={props.outfitTypes} selected={props.selOutfits} toggleValue={toggleValue('selOutfits')} />\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction SearchType(props) {\r\n  return (\r\n    <div className='options'>\r\n      <div className='radioBtn'>\r\n        <input type='radio' name='searchType' id='false' onClick={props.toggleFalse} defaultChecked/>\r\n        <label htmlFor='false'>Strict match <br /><span className='desc'>(find outfits that match all search criteria)</span></label>\r\n      </div>\r\n      <div className='radioBtn'>\r\n        <input type='radio' name='searchType' id='true' onClick={props.toggleTrue}/>\r\n        <label htmlFor='true'>Inclusive match <br /><span className='desc'>(find outfits that match 1 or more criteria)</span></label>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction AttrOptions(props) {\r\n  const options = props.optionsArr.map(function (option) {\r\n    if (option) {\r\n      return (\r\n        <div key={option}>\r\n          <input type='checkbox' value={option} onClick={props.toggleValue} />\r\n          <label htmlFor={option}>{option}</label>\r\n        </div>\r\n      )\r\n    }\r\n  });\r\n  return (\r\n    <div className='options' id={props.id}>\r\n      <h3>Stat Bonus</h3>\r\n      {options}\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction SelectOptions(props) {\r\n  if (props.optionsArr.indexOf(props.heading) > -1) { props.optionsArr.splice(props.optionsArr.indexOf(props.heading), 1, '') }\r\n  const options = props.optionsArr.map(function (option) {\r\n    if (option) {\r\n      return (\r\n        <option key={option} value={option}>{option}</option>\r\n      )\r\n    }\r\n  });\r\n  const selected = Array.from(props.selected).map((value) =>\r\n    <ToggleOption key={value} value={value} toggleValue={props.toggleValue} />\r\n  );\r\n  return (\r\n    <div className='options' id={props.id}>\r\n      <h4>{props.heading}</h4>\r\n      <select className='options' defaultValue='none' onChange={props.toggleValue}>\r\n        <option disabled value='none'>(select an option)</option>\r\n        {options}\r\n      </select>\r\n      <div>{selected}</div>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction ToggleOption(props) {\r\n  return (\r\n    <div className='toggleOpt'>\r\n      <span>{props.value}</span>\r\n      <button className='cancelBtn' value={props.value} onClick={props.toggleValue}>X</button>\r\n    </div>\r\n  )\r\n}\r\n\r\n","export const apiKey = 'AIzaSyBYN0YVkl2lB5ps2CL_74JKIs5TOukXdm4';\r\nexport const spreadsheetId = '1JeHlN1zcBwyBbBkyfsDiiqDZpLotkn770ewa1JCsekU';","import React from 'react';\r\nimport filterGsData from './Gsx2json.js';\r\nimport { apiKey, spreadsheetId } from './sheetsCreds.js';\r\n\r\nexport default class OutfitList extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isLoaded: false,\r\n      outfits: [],\r\n      status: ''\r\n    };\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props.query !== prevProps.query) {\r\n      const sheetId = 'Stat Bonuses';\r\n      fetch(`https://sheets.googleapis.com/v4/spreadsheets/${spreadsheetId}/values/${sheetId}?key=${apiKey}`)\r\n        .then(res => res.json())\r\n        .then(res => {\r\n          this.setState((state, props) => {\r\n            let outfits = filterGsData(res, { query: this.props.stringQuery, isInclusive: this.props.isInclusive }); //all outfits that match character/outfit (inclusive)\r\n            //console.log(outfits);\r\n            if (this.props.selAttr.size > 0) {\r\n              for (let i = outfits.length - 1; i >= 0; i--) {\r\n                let queried = false;\r\n                for (let attr of this.props.selAttr) {\r\n                  if (outfits[i][attr.toLowerCase()]) { //inclusive search by attr\r\n                    queried = true;\r\n                    break;\r\n                  }\r\n                  // if (!outfits[i][attr.toLowerCase()]) { //currently only keeps outfits that meet all attr criteria (exclusive)\r\n                  //   outfits.splice(i, 1);\r\n                  //   break;\r\n                  // }\r\n                }\r\n                if (!queried) outfits.splice(i, 1);\r\n              }\r\n            }\r\n            outfits.sort((a, b) => { //sort from highest to lowest queried stat bonus\r\n              let totalBonusA = 0;\r\n              let totalBonusB = 0;\r\n              for (let attr of this.props.selAttr) {\r\n                totalBonusA += a[attr.toLowerCase()];\r\n                totalBonusB += b[attr.toLowerCase()];\r\n              }\r\n              return totalBonusB - totalBonusA;\r\n            })\r\n            return { isLoaded: true, outfits: outfits, status: `${outfits.length} outfits found` }\r\n          })\r\n        });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let body = null;\r\n    if (!this.state.isLoaded) {\r\n      body = <p className='status'>Loading...</p>\r\n    } else {\r\n      const outfits = this.state.outfits.map((elt) =>\r\n        <Outfit key={elt.character + elt.outfit} props={elt} attributes={this.props.attributes} selAttr={this.props.selAttr} />\r\n      );\r\n      body = (<><p className='status'>{this.state.status}</p>{outfits}</>)\r\n    }\r\n    // console.log('finished loading outfit list', performance.now())\r\n    return (\r\n      <div className='outfitList'>\r\n        {body}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nfunction Outfit(props) {\r\n  const properties = props.props;\r\n  // const attr = Object.keys(properties).map(key => { //display all attributes\r\n  //   if (props.attributes.includes(key.charAt(0).toUpperCase() + key.slice(1))) {\r\n  //     return <span key={key + properties[key]}>{`${key.charAt(0).toUpperCase() + key.slice(1)}: ${properties[key]}`}</span>\r\n  //   }\r\n  // });\r\n  const totalBonus = () => { //display total bonus of queried attrs if any have been queried\r\n    if (props.selAttr.size > 0) {\r\n      const total = Array.from(props.selAttr)\r\n        .reduce((accumulator, currVal) => accumulator + properties[currVal.toLowerCase()], 0);\r\n      return <span>{`TOTAL BONUS: ${total}`}</span>;\r\n    }\r\n    else return null;\r\n  }\r\n  return (\r\n    <div className='outfit'>\r\n      <span>{`${properties.character} - ${properties.outfit}`}</span>\r\n      <hr />\r\n      <AttrList attributes={props.attributes} props={props.props} />\r\n      {totalBonus()}\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction AttrList(props) {\r\n  return (\r\n    <div className='attrList'>\r\n      {Object.keys(props.props).map(key => { //display all attributes\r\n        if (props.attributes.includes(key.charAt(0).toUpperCase() + key.slice(1))) {\r\n          return <span key={key + props.props[key]}>{`${key.charAt(0).toUpperCase() + key.slice(1)}: ${props.props[key]}`}</span>\r\n        }\r\n      })\r\n      }\r\n    </div>\r\n  )\r\n}\r\n","export default function filterGsData(data, config = {}) {\n  let query = config.query || []; //array of arrays of values selected for each filter\n  const useIntegers = config.integers || true;\n  const isInclusive = config.isInclusive || false; //whether row should match query partially (inclusive) or entirely (exclusive)\n  const responseObj = [];\n  // console.log('is inclusive: ' + isInclusive);\n  if (data) {\n    const headers = data.values[0];\n    //if inclusive search queries don't need to be grouped\n    if (isInclusive && query.length) { query = new Set( query.reduce( ( accumulator, currentVal ) => accumulator.concat( [...currentVal] ), [] ) ) }\n    // console.log(query);\n    for (let i = 1; i < data.values.length; i++) { //iterate over array of rows\n      const row = data.values[i];\n      let queried = false;\n      if (query.size === 0 || query.length === 0) { queried = true; } //if no query just push all rows\n      else if (isInclusive) {\n        for (let j = 0; j < row.length; j++) { //if any query is found in row queried = true\n          if (query.has(row[j])) { queried = true; break }\n        }\n      }\n      else { //exclusive search\n        const result = query.map((set) => { //for each filter, check if any query is found in row \n          for (let j = 0; j < row.length; j++) { //if any query is found in row queried = true\n            if (set.has(row[j])) { return true }\n          }\n        });\n        //if any query is not found in row queried = false\n        queried = result.reduce(function (accumulator, currVal) { return accumulator && currVal }, true);\n      }\n      if (queried) {\n        const newRow = {};\n        for (let j = 0; j < row.length; j++) { //iterate over values in each row to add headers\n          const header = headers[j];\n          let value = row[j];\n          if (useIntegers === true && !isNaN(value)) {\n            value = Number(value);\n          }\n          newRow[header.toLowerCase()] = value;\n        }\n        responseObj.push(newRow);\n      }\n    }\n    // console.log(responseObj);\n    return responseObj;\n  }\n}\n\n","import React from 'react';\r\nimport Sidebar from './Sidebar.js';\r\nimport OutfitList from './OutfitList.js';\r\nimport { apiKey, spreadsheetId } from './sheetsCreds.js';\r\n\r\nexport default class Main extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      characters: [],\r\n      outfitTypes: [],\r\n      units: [],\r\n      attributes: ['Ac', 'Pa', 'Un', 'Sm', 'Te', 'Ch'],\r\n      selCharas: new Set(), //query rows with select characters\r\n      selOutfits: new Set(), //query rows with selected outfits\r\n      selUnits: new Set(), //rows where selAttr > 0\r\n      selAttr: new Set(), //rows where selAttr > 0\r\n      isInclusive: false,\r\n    };\r\n    this.toggleValueInSet = this.toggleValueInSet.bind(this);\r\n    this.toggleSearchTypeTrue = this.toggleSearchTypeTrue.bind(this);\r\n    this.toggleSearchTypeFalse = this.toggleSearchTypeFalse.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const sheetId = 'Validation Lists';\r\n    //fetch info for sidebar\r\n    fetch(`https://sheets.googleapis.com/v4/spreadsheets/${spreadsheetId}/values/${sheetId}?key=${apiKey}&majorDimension=COLUMNS`)\r\n      .then(result => result.json())\r\n      .then(result => {\r\n        const resultObj = result.values;\r\n        const characters = resultObj.filter((arr) => arr[0] === 'Character');\r\n        const outfitTypes = resultObj.filter((arr) => arr[0] === 'Outfit Type');\r\n        const units = resultObj.filter((arr) => arr[0] === 'Unit');\r\n        this.setState({ characters: characters[0], outfitTypes: outfitTypes[0], units: units[0] });\r\n      })\r\n  }\r\n\r\n  toggleValueInSet() {\r\n    return (setName) => {\r\n      return (event) => {\r\n        const newSet = this.state[setName];\r\n        if (this.state[setName].has(event.target.value)) {\r\n          newSet.delete(event.target.value);\r\n        }\r\n        else {\r\n          newSet.add(event.target.value);\r\n        }\r\n        this.setState({ [setName]: newSet });\r\n      }\r\n    }\r\n  }\r\n\r\n  toggleSearchTypeTrue () {\r\n    this.setState({isInclusive: true})\r\n  }\r\n\r\n  toggleSearchTypeFalse () {\r\n    this.setState({isInclusive: false})\r\n  }\r\n\r\n  render() {\r\n    // console.log('render main component', performance.now())\r\n    const sidebarProps = {\r\n      characters: this.state.characters,\r\n      outfitTypes: this.state.outfitTypes,\r\n      units: this.state.units,\r\n      attributes: this.state.attributes,\r\n      selCharas: this.state.selCharas,\r\n      selOutfits: this.state.selOutfits,\r\n      selUnits: this.state.selUnits,\r\n      toggleValue: this.toggleValueInSet,\r\n      toggleTrue: this.toggleSearchTypeTrue,\r\n      toggleFalse: this.toggleSearchTypeFalse,\r\n    }\r\n    const query = Object.keys(this.state).reduce((accumulator, key) => { //concat values in Sets that hold selected values\r\n      const field = this.state[key];\r\n      if (!Array.isArray(field)) { return accumulator.concat(Array.from(field)); }\r\n      else return accumulator.concat([]);\r\n    }, []);\r\n    query.push(this.state.isInclusive);\r\n    const stringQuery = Object.keys(this.state).reduce((accumulator, key) => { //create array of Sets that hold selected values\r\n      const field = this.state[key];\r\n      if (!Array.isArray(field) && typeof(field) === 'object' && key !== 'selAttr' && field.size > 0) {accumulator.push(field); return accumulator}\r\n      else return accumulator;\r\n    }, []);\r\n    const outfitListProps = {\r\n      query: query,\r\n      stringQuery: stringQuery,\r\n      attributes: this.state.attributes,\r\n      selCharas: this.state.selCharas,\r\n      selOutfits: this.state.selOutfits,\r\n      selUnits: this.state.selUnits,\r\n      selAttr: this.state.selAttr,\r\n      isInclusive: this.state.isInclusive,\r\n    }\r\n    return (\r\n      <>\r\n        <OutfitList {...outfitListProps} />\r\n        <Sidebar {...sidebarProps} />\r\n      </>\r\n    )\r\n  }\r\n}","import React from 'react';\nimport Main from './Main.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}