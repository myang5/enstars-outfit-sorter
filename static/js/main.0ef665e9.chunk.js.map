{"version":3,"sources":["instructions0.png","instructions1.png","instructions2.PNG","instructions3.PNG","arrow_left_darkblue.svg","arrow_up_darkblue.svg","arrow_down_darkblue.svg","filter_darkblue.svg","platform.svg","Sidebar.js","Instructions.js","TeamBuilder.js","OutfitList.js","sheetsCreds.js","Gsx2json.js","Main.js","serviceWorker.js","index.js"],"names":["module","exports","Sidebar","props","state","filters","isFilterMenu","toggleFilterMenu","bind","setsArr","this","getSetsFromOutfitArray","data","setState","outfitsArr","Array","length","i","Set","add","row","j","sortMenuProps","selAttr","sortOutfits","sortMenuLandscape","className","sortMenuPortrait","id","onClick","toggleOutfitList","src","arrowLeft","alt","status","filter","sortMenu","toggleMade","selMade","submitFilterSelection","React","Component","UpDownArrow","imgProps","up","arrowUp","arrowDown","SortMenu","activeSort","isAscending","toggleSort","sort","sortOpts","map","opt","SortOpt","key","isActive","unshift","style","width","height","AttrIcon","attr","ToggleMade","type","checked","size","onChange","htmlFor","FilterMenu","activeMenu","toggleMenu","menu","set","heading","from","selKey","isMenuActive","optionsArr","submitSelection","display","PureComponent","Filter","selected","submitted","toggleOption","clearSelect","selectAll","clearFilter","option","newSet","has","delete","slice","index","indexOf","splice","FilterOptions","SelectOptions","a","b","options","Instructions","useState","sharingInst","setSharingInst","toggleSharingInst","value","target","href","linkSharingOff","linkSharingOn","linkSharingOffMobile","linkSharingOnMobile","title","toggleInstructions","TeamView","isInstructions","activeJob","teamMembers","members","member","TeamMember","dataBtn","getUserData","document","querySelector","helpBtn","sheetId","defaultValue","cls","hasOwnProperty","Platform","hasMember","Image","obj","AttrList","bonus","maxValue","hideIcon","platform","JobViewContainer","isJobList","toggleJobList","jobViewProps","jobListProps","jobs","selectJob","JobView","changeJobBtn","baseline","forEach","reduce","accumulator","ProgressBar","progress","Object","keys","percent","Math","min","floor","JobList","menus","viewJob","toggleProperty","getAvailableMenus","getMenuJobs","prop","job","menuOpts","trim","jobDetailBtn","JobTabMenu","JobSelect","JobDetail","button","tabs","isViewing","closeBtn","OutfitList","error","isLoading","hasMore","loadedOutfits","outfitsToLoad","onScroll","loadOutfits","onScrollThrottled","throttle","event","persist","window","innerHeight","scrollTop","scrollHeight","concat","outfits","elt","inTeam","OutfitCard","Character","Outfit","info","setMember","placeholders","push","view","apiKey","spreadsheetId","matchFilters","query","queriedHeader","replace","queriedValue","convertArraysToObjects","arrs","result","headers","newRow","header","isNaN","Number","Main","allOutfits","userOutfits","userSheetId","idolStats","isInclusive","isOutfitList","teamSlot","prepareOutfitData","calculateTotalBonus","toggleSearchTypeTrue","toggleSearchTypeFalse","sortByFilter","fetch","then","json","values","newState","arr","includes","filterIfColumnIsEmpty","columnsArr","column","currVal","fill","outfitSource","newMade","newMember","newTeam","queryConfig","getQueryAndConditions","config","conditions","meetsConditions","queried","condition","JSON","parse","stringify","filterData","addIdolStatus","split","str","attrSet","outfitObj","total","stats","url","urlStr","res","handleErrors","toUpperCase","userList","acc","outfit","outfitMatch","low","high","middle","emptyTeam","preparedOutfits","userStatus","idol","name","response","code","console","log","outfitListKey","teamViewProps","outfitListProps","sidebarProps","toggleTrue","toggleFalse","numberText","statusBarProps","StatusBar","marginLeft","toLowerCase","Boolean","location","hostname","match","App","useParams","path","ReactDOM","render","StrictMode","children","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.0ef665e9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/instructions0.d5dad995.png\";","module.exports = __webpack_public_path__ + \"static/media/instructions1.e918fb19.png\";","module.exports = __webpack_public_path__ + \"static/media/instructions2.35bd47ff.PNG\";","module.exports = __webpack_public_path__ + \"static/media/instructions3.819b73f6.PNG\";","module.exports = __webpack_public_path__ + \"static/media/arrow_left_darkblue.76314777.svg\";","module.exports = __webpack_public_path__ + \"static/media/arrow_up_darkblue.727d3630.svg\";","module.exports = __webpack_public_path__ + \"static/media/arrow_down_darkblue.87e78f37.svg\";","module.exports = __webpack_public_path__ + \"static/media/filter_darkblue.224365ea.svg\";","module.exports = __webpack_public_path__ + \"static/media/platform.deae2014.svg\";","import React from 'react';\r\nimport { AttrIcon } from './Main.js';\r\nimport arrowLeft from './arrow_left_darkblue.svg';\r\nimport arrowUp from './arrow_up_darkblue.svg';\r\nimport arrowDown from './arrow_down_darkblue.svg';\r\nimport filter from './filter_darkblue.svg';\r\n\r\nexport default class Sidebar extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      filters: null,\r\n      isFilterMenu: false,\r\n    }\r\n    this.toggleFilterMenu = this.toggleFilterMenu.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const setsArr = this.getSetsFromOutfitArray(this.props.data);\r\n    this.setState({ filters: setsArr });\r\n  }\r\n\r\n  getSetsFromOutfitArray(outfitsArr) {\r\n    //console.log(outfitsArr);\r\n    const filters = this.props.filters; //Array of spreadsheet headers that should be filters\r\n    const setsArr = new Array(filters.length);\r\n    for (let i = 0; i < setsArr.length; i++) { setsArr[i] = new Set() }; //fill with empty Sets\r\n    for (let i = 0; i < filters.length; i++) { setsArr[i].add(filters[i]) } //add header to Set\r\n    for (let i = 0; i < outfitsArr.length; i++) {\r\n      const row = outfitsArr[i];\r\n      for (let j = 0; j < filters.length; j++) {\r\n        setsArr[j].add(row[filters[j]]);\r\n      }\r\n    }\r\n    return setsArr;\r\n  }\r\n\r\n  toggleFilterMenu() {\r\n    this.setState((state) => {\r\n      const newState = { isFilterMenu: !state.isFilterMenu }\r\n      return newState;\r\n    });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.filters) {\r\n      let sortMenuProps = {\r\n        selAttr: this.props.selAttr,\r\n        sortOutfits: this.props.sortOutfits,\r\n      }\r\n      const sortMenuLandscape = <SortMenu className='hideOnPortraitSmall' {...sortMenuProps} />\r\n      const sortMenuPortrait = <SortMenu className='hideOnLandscape' {...sortMenuProps} />\r\n      return (\r\n        <div id='sidebar' className='toggledOn'>\r\n          <div className='btn close' onClick={() => { this.setState({ isFilterMenu: false }); this.props.toggleOutfitList() }}><img src={arrowLeft} alt='←' /></div>\r\n          {/*<CheckBoxOptions optionsArr={this.props.attr} submitSelection={this.props.submitFilterSelection('selAttr')} />*/}\r\n          <span id='status'>{this.props.status}</span>\r\n          <div className='right'>\r\n            {sortMenuLandscape}\r\n            <div className='btn toggleFilter' onClick={this.toggleFilterMenu}><img src={filter} alt='filter options' /></div>\r\n          </div>\r\n          {/*<SearchType toggleTrue={this.props.toggleTrue} toggleFalse={this.props.toggleFalse} />*/}\r\n          <FilterMenu isFilterMenu={this.state.isFilterMenu}\r\n            filters={this.state.filters}\r\n            sortMenu={sortMenuPortrait}\r\n            toggleMade={this.props.toggleMade}\r\n            selMade={this.props.selMade}\r\n            submitFilterSelection={this.props.submitFilterSelection}\r\n            toggleFilterMenu={this.toggleFilterMenu} />\r\n\r\n        </div>\r\n      )\r\n    }\r\n    else return null;\r\n  }\r\n}\r\n\r\n//class CheckBoxOptions extends React.Component {\r\n//  constructor(props) {\r\n//    super(props);\r\n//    this.state = { selected: new Set() };\r\n//    this.toggleOption = this.toggleOption.bind(this);\r\n//  }\r\n\r\n//  toggleOption(option) {\r\n//    const newSet = this.state.selected; //not actually creating a new Set copy?\r\n//    if (this.state.selected.has(option)) { newSet.delete(option) }\r\n//    else { newSet.add(option); }\r\n//    this.setState({ selected: newSet }, this.props.submitSelection(this.state.selected));\r\n//  }\r\n\r\n//  render() {\r\n//    const attrMapFunc = (option) => {\r\n//      return <CheckBox key={option} option={option} toggleOption={() => this.toggleOption(option)} />\r\n//      //return (\r\n//      //  <span key={option} className={'icon ' + option.toLowerCase()} onClick={() => this.toggleOption(option)}>\r\n//      //    {option}\r\n//      //  </span>\r\n//      //)\r\n//    }\r\n//    const options = this.props.optionsArr.map(attrMapFunc);\r\n//    return (\r\n//      <div className='filter attrOptions'>\r\n//        {options}\r\n//      </div>\r\n//    )\r\n//  }\r\n//}\r\n\r\n//function CheckBox(props) {\r\n//  return (\r\n//    <div>\r\n//      <input type='checkbox' onClick={props.toggleOption} />\r\n//      <span className={'icon ' + props.option.toLowerCase()}>{props.option}</span>\r\n//    </div>\r\n//  )\r\n//}\r\n\r\nexport function UpDownArrow(props) {\r\n  const imgProps = { ...props };\r\n  imgProps.src = props.up ? arrowUp : arrowDown;\r\n  imgProps.alt = props.up ? '↑' : '↓';\r\n  return <img {...imgProps} />\r\n}\r\n\r\nclass SortMenu extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      activeSort: 'Total Bonus',\r\n      isAscending: false,\r\n    }\r\n    this.toggleSort = this.toggleSort.bind(this);\r\n  }\r\n\r\n  toggleSort(sort) {\r\n    this.setState((state) => {\r\n      if (state.activeSort === sort) {\r\n        return { isAscending: !state.isAscending }\r\n      } else {\r\n        return { activeSort: sort, isAscending: false }\r\n      }\r\n    }, () => { this.props.sortOutfits(sort, this.state.isAscending) })\r\n  }\r\n\r\n  render() {\r\n    const sortOpts = this.props.selAttr.map(opt => {\r\n      return <SortOpt key={opt}\r\n        opt={opt}\r\n        isActive={opt === this.state.activeSort}\r\n        isAscending={this.state.isAscending}\r\n        onClick={() => this.toggleSort(opt)} />\r\n    });\r\n    sortOpts.unshift(<SortOpt key='Total Bonus'\r\n      opt='Total'\r\n      isActive={'Total Bonus' === this.state.activeSort}\r\n      isAscending={this.state.isAscending}\r\n      onClick={() => this.toggleSort('Total Bonus')} />)\r\n    return (\r\n      <div id='sortMenu' className={this.props.className ? this.props.className : null}>\r\n        {sortOpts}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nfunction SortOpt(props) {\r\n  return (\r\n    <div className={'btn sortOpt' + (props.isActive ? ' active' : '')} onClick={props.onClick}>\r\n      <span className='arrow' style={{ width: '0.7rem', height: '1rem' }}>\r\n        {props.isActive && <UpDownArrow up={props.isAscending} />}\r\n        {/*{props.isActive && (props.isAscending ? <img src={arrowUp} alt='↑' /> : <img src={arrowDown} alt='↓' />)}*/}\r\n      </span>\r\n      {props.opt !== 'Total' ? <AttrIcon attr={props.opt} /> : <span>{props.opt}</span>}\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction SearchType(props) {\r\n  return (\r\n    <div className='filter'>\r\n      <div className='radioBtn'>\r\n        <input type='radio' name='searchType' id='false' onClick={props.toggleFalse} defaultChecked />\r\n        <label htmlFor='false'>Strict match <br /><span className='desc'>(find outfits that match all search criteria)</span></label>\r\n      </div>\r\n      <div className='radioBtn'>\r\n        <input type='radio' name='searchType' id='true' onClick={props.toggleTrue} />\r\n        <label htmlFor='true'>Inclusive match <br /><span className='desc'>(find outfits that match 1 or more criteria)</span></label>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction ToggleMade(props) {\r\n  return (\r\n    <div className='radioBtn' id='toggleMade'>\r\n      <input type='checkbox' checked={props.selMade.size ? true : false} onChange={props.toggleMade} />\r\n      <label htmlFor='toggleMade'>Only made outfits</label>\r\n    </div>\r\n  )\r\n}\r\n\r\nclass FilterMenu extends React.PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      activeMenu: '',\r\n    }\r\n    this.toggleMenu = this.toggleMenu.bind(this);\r\n  }\r\n\r\n  toggleMenu(menu) {\r\n    this.setState((state) => { return { activeMenu: state.activeMenu === menu ? '' : menu } })\r\n  }\r\n\r\n  render() {\r\n    const filters = this.props.filters.map(set => { //data is Array of Sets of unique values in each column\r\n      const optionsArr = Array.from(set);\r\n      const heading = optionsArr[0];\r\n      const selKey = 'sel' + heading;\r\n      return (\r\n        <Filter key={heading}\r\n          heading={heading}\r\n          isMenuActive={this.state.activeMenu === heading}\r\n          toggleMenu={() => (this.toggleMenu(heading))}\r\n          optionsArr={Array.from(set)}\r\n          submitSelection={this.props.submitFilterSelection(selKey)}\r\n        />\r\n      );\r\n    });\r\n    return (\r\n      <div id='filterMenu' className='overlayContent' style={{ display: this.props.isFilterMenu ? 'flex' : 'none' }}>\r\n        <div className='topContainer'>\r\n          <h4 className='hideOnLandscape'>Sort by...</h4>\r\n          {this.props.sortMenu}\r\n          <h4>Filter by...</h4>\r\n          {this.props.toggleMade && <ToggleMade selMade={this.props.selMade} toggleMade={this.props.toggleMade} />}\r\n          <div id='filters'>\r\n            {filters}\r\n          </div>\r\n        </div>\r\n        <div className='bottomContainer'><div className='btn' onClick={this.props.toggleFilterMenu}>Close</div></div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nclass Filter extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      selected: new Set(), //filter values that user has selected but not yet applied\r\n      submitted: new Set(), // filter values that have already been applied to the outfitList\r\n    };\r\n    this.toggleOption = this.toggleOption.bind(this);\r\n    this.clearSelect = this.clearSelect.bind(this);\r\n    this.selectAll = this.selectAll.bind(this);\r\n    this.clearFilter = this.clearFilter.bind(this);\r\n    this.submitSelection = this.submitSelection.bind(this);\r\n  }\r\n\r\n  toggleOption(option) {\r\n    const newSet = this.state.selected; //not actually creating a new Set copy?\r\n    if (this.state.selected.has(option)) {\r\n      newSet.delete(option);\r\n    }\r\n    else {\r\n      newSet.add(option);\r\n    }\r\n    this.setState({ selected: newSet });\r\n  }\r\n\r\n  clearSelect() {\r\n    this.setState({ selected: new Set(), submitted: new Set() })\r\n  }\r\n\r\n  selectAll() {\r\n    let optionsArr = this.props.optionsArr.slice();\r\n    const index = optionsArr.indexOf(this.props.heading);\r\n    optionsArr.splice(index, 1);\r\n    this.setState({ selected: new Set(optionsArr) })\r\n  }\r\n\r\n  clearFilter() {\r\n    this.clearSelect();\r\n    this.props.submitSelection(new Set());\r\n  }\r\n\r\n  submitSelection() {\r\n    const submitted = new Set(this.state.selected);\r\n    this.setState({ submitted: submitted });\r\n    this.props.submitSelection(this.state.selected);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className='filter'>\r\n        <div className='filterHeading'>\r\n          <UpDownArrow\r\n            className='filterIcon'\r\n            onClick={this.props.toggleMenu}\r\n            up={this.props.isMenuActive}\r\n          />\r\n          <p onClick={this.props.toggleMenu}>{this.props.heading}</p>\r\n          {this.state.submitted.size > 0 && <a onClick={this.clearFilter}>clear filter</a>}\r\n        </div>\r\n        {this.props.isMenuActive &&\r\n          <FilterOptions heading={this.props.heading}\r\n            optionsArr={this.props.optionsArr}\r\n            selected={this.state.selected}\r\n            submitted={this.state.submitted}\r\n            submitSelection={this.submitSelection}\r\n            toggleMenu={this.props.toggleMenu}\r\n            toggleOption={this.toggleOption}\r\n            clearSelect={this.clearSelect}\r\n            selectAll={this.selectAll} />}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nclass FilterOptions extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className='filterOptions'>\r\n        <div>\r\n          <span className='btn submit' onClick={() => { this.props.toggleMenu(); this.props.submitSelection() }}>OK</span>\r\n          {/*<a className='selectAllBtn' onClick={this.props.selectAll}>select all</a>*/}\r\n        </div>\r\n        <SelectOptions heading={this.props.heading}\r\n          optionsArr={this.props.optionsArr}\r\n          selected={this.props.selected}\r\n          submitted={this.props.submitted}\r\n          toggleOption={this.props.toggleOption} />\r\n        <div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nfunction SelectOptions(props) {\r\n  let optionsArr = props.optionsArr.slice(0).sort(); //needed to create a real new (shallow) copy of the array\r\n  if (optionsArr.indexOf(props.heading) > -1) { optionsArr.splice(optionsArr.indexOf(props.heading), 1) }\r\n  if (props.submitted.size > 0) {\r\n    optionsArr.sort((a, b) => { //sort selected options to the top\r\n      if (props.submitted.has(a) === props.submitted.has(b)) return 0;\r\n      else if (props.submitted.has(a)) return -1;\r\n      else if (props.submitted.has(b)) return 1;\r\n    });\r\n  }\r\n  const options = optionsArr.map(function (option) {\r\n    return (\r\n      <li key={option}\r\n        className={props.selected.has(option) ? 'selected' : ''}\r\n        onClick={() => props.toggleOption(option)}>\r\n        <div><span></span>{option}</div>\r\n      </li>)\r\n  });\r\n  return (\r\n    <ul>\r\n      {options}\r\n    </ul>\r\n  )\r\n}\r\n\r\n\r\n","import React, { useState } from 'react';\r\nimport linkSharingOff from './instructions0.png';\r\nimport linkSharingOn from './instructions1.png';\r\nimport linkSharingOffMobile from './instructions2.PNG';\r\nimport linkSharingOnMobile from './instructions3.PNG';\r\nimport { UpDownArrow } from './Sidebar.js';\r\n\r\nfunction useSetOrNullState(state, setState) {\r\n  return function (value) {\r\n    if (state === value) setState(null);\r\n    else setState(value);\r\n  }\r\n}\r\n\r\nexport default function Instructions(props) {\r\n  const [sharingInst, setSharingInst] = useState(null);\r\n  const toggleSharingInst = useSetOrNullState(sharingInst, setSharingInst);\r\n  return (\r\n    <div className='overlay'>\r\n      <div className='overlayContent' id='instructions'>\r\n        <div className='topContainer'>\r\n          <div className='top'>\r\n            <h3>Don't see your outfit?</h3>\r\n            <p>Add it to the <a target='_blank' href='https://docs.google.com/spreadsheets/d/1JeHlN1zcBwyBbBkyfsDiiqDZpLotkn770ewa1JCsekU/edit#gid=0'>outfit database spreadsheet!</a></p>\r\n            <p>If you don't see a specific outfit, it's because the database currently doesn't have information for it. Please add its stats to the database and refresh the outfit sorter.</p>\r\n            <hr />\r\n            <h3>How to import user data</h3>\r\n            <p>\r\n              Make a copy of this <a target='_blank' href='https://docs.google.com/spreadsheets/d/1asGXfBIw2qe3xYX_mawgbjO34gYqsj6IBNRbzqtqNAQ/'>\r\n                Google spreadsheet template</a> and fill it with your outfits.\r\n            </p>\r\n            <ul>\r\n              <p><strong>Notes on the spreadsheet format</strong></p>\r\n              <li>\r\n                <strong>Must have:</strong> a sheet named Outfits with columns labeled Character, Outfit, and Made\r\n              </li>\r\n              <li>\r\n                <strong>Optional: </strong> the Idol Status sheet and Validation Lists sheet\r\n              </li>\r\n              <li>\r\n                The character and outfit names should match the spelling and translations in the database's <a target='_blank' href='https://docs.google.com/spreadsheets/d/1JeHlN1zcBwyBbBkyfsDiiqDZpLotkn770ewa1JCsekU/edit#gid=350164119'>Validation Lists</a>.\r\n              </li>\r\n            </ul>\r\n            <p>\r\n              <strong>Turn link sharing on for the spreadsheet.</strong> Otherwise the sorter will not be able to access the contents.\r\n            </p>\r\n            <ul>\r\n              <p className='sharingHeading' onClick={() => toggleSharingInst('desktop')}>\r\n                <UpDownArrow className='arrow' up={sharingInst === 'desktop'} />\r\n                <strong>On desktop</strong>\r\n              </p>\r\n              {sharingInst === 'desktop' &&\r\n                <>\r\n                  <li>\r\n                    <p>Click the 'Share' button in the top right corner and click 'Get shareable link'.</p>\r\n                    <img src={linkSharingOff} alt='Turn on link sharing' />\r\n                  </li>\r\n                  <li>\r\n                    <p>Copy the provided link.</p>\r\n                    <img src={linkSharingOn} alt='Copy link' />\r\n                  </li>\r\n                </>\r\n              }\r\n            </ul>\r\n            <ul>\r\n              <p className='sharingHeading' onClick={() => toggleSharingInst('mobileApp')}>\r\n                <UpDownArrow className='arrow' up={sharingInst === 'mobileApp'} />\r\n                <strong>On Sheets mobile app</strong>\r\n              </p>\r\n              {sharingInst === 'mobileApp' &&\r\n                <>\r\n                  <li>\r\n                    <p>{`Open the spreadsheet settings and tap 'Share & export'.`}</p>\r\n                    <img src={linkSharingOffMobile} alt='Open mobile settings' />\r\n                  </li>\r\n                  <li>\r\n                    <p>Turn 'Link sharing' on and copy the link.</p>\r\n                    <img src={linkSharingOnMobile} alt='Turn link sharing on' />\r\n                  </li>\r\n                </>\r\n              }\r\n            </ul>\r\n            <p>Copy and paste the spreadsheet link into the sorter and click 'Add'.</p>\r\n            <p>OR get the spreadsheet ID and add it to the sorter URL:</p>\r\n            <ul>\r\n              <li>\r\n                Your spreadsheet link will look something like this: <br />\r\n                https://docs.google.com/spreadsheets/d/<strong>SPREADSHEET_ID</strong>/view...\r\n              </li>\r\n              <li>\r\n                Get the SPREADSHEET_ID part of the link and add it to the sorter URL so it looks like this: <br />\r\n                https://myang5.github.io/enstars-outfit-sorter/<strong>SPREADSHEET_ID</strong>\r\n\r\n              </li>\r\n            </ul>\r\n            <p>This way you can save/bookmark the outfit sorter with your data instead of pasting the spreadsheet link every time.</p>\r\n            <hr />\r\n            <h3>About</h3>\r\n            <p>Tool developed by <a href='https://twitter.com/gayandasleep'>Midori</a> (feel free to DM them with any feedback/bug reports/suggestions for features</p>\r\n            <p>Game images pulled from <a href='https://twitter.com/sakasakitty/status/1230928809169498113'>Rai's render drive</a></p>\r\n            <p>Directional arrow icons made by <a href=\"https://www.flaticon.com/authors/roundicons\" title=\"Roundicons\">Roundicons</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">www.flaticon.com</a></p>\r\n          </div>\r\n        </div>\r\n        <div className='bottomContainer'><div className='btn' onClick={props.toggleInstructions}>Close</div></div>\r\n\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React from 'react';\r\nimport { Image, AttrList } from './Main.js';\r\nimport Instructions from './Instructions.js';\r\nimport platform from './platform.svg';\r\n\r\nexport class TeamView extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isInstructions: false\r\n    }\r\n    this.toggleInstructions = this.toggleInstructions.bind(this);\r\n  }\r\n\r\n  toggleInstructions() {\r\n    this.setState(state => { return { isInstructions: !state.isInstructions } });\r\n  }\r\n\r\n  render() {\r\n    //console.log('TeamView render', this.props.activeJob);\r\n    if (this.props.activeJob && this.props.teamMembers.length > 0) {\r\n      const members = this.props.teamMembers.map((member, index) => {\r\n        return <TeamMember key={index}\r\n          index={index}\r\n          member={member}\r\n          selAttr={this.props.selAttr}\r\n          toggleOutfitList={this.props.toggleOutfitList} />\r\n      })\r\n      const dataBtn = <div className='btn addData' onClick={() => this.props.getUserData(document.querySelector('#userData').value)}>Add</div>\r\n      const helpBtn = <div className='btn help' onClick={this.toggleInstructions}>?</div>\r\n      const sheetHref = 'https://docs.google.com/spreadsheets/d/' + this.props.sheetId;\r\n      return (\r\n        <>\r\n          <div id='topMenu'>\r\n            {/*{this.props.sheetId &&\r\n              <span>using spreadsheet <a href={sheetHref}>{this.props.sheetId.slice(0, 7) + '...'}</a></span>\r\n            }*/}\r\n            <span>spreadsheet: </span>\r\n            <input id='userData' type='text' defaultValue={this.props.sheetId} />\r\n            {dataBtn}\r\n            {helpBtn}\r\n            {/*<div>Make sure to turn on link-sharing for your Google spreadsheet</div>*/}\r\n          </div>\r\n          <div id='teamViewContainer'>\r\n            <div id='teamView'>\r\n              {members}\r\n            </div>\r\n          </div>\r\n          {this.state.isInstructions && <Instructions toggleInstructions={this.toggleInstructions} />}\r\n        </>\r\n      )\r\n    } else return null;\r\n  }\r\n}\r\n\r\n//trying to keep div same ratio\r\n//https://stackoverflow.com/questions/12170261/how-to-auto-resize-a-div-with-css-while-keeping-aspect-ratio\r\nfunction TeamMember(props) {\r\n  const cls = 'teamMember' + (props.member.hasOwnProperty('Made') ? (!props.member['Made'] ? ' notMade' : '') : '');\r\n  const alt = props.member ? `${props.member['Character']} ${props.member['Outfit']}` : null;\r\n  return (\r\n    <div className={cls} onClick={() => props.toggleOutfitList(props.index)}>\r\n      <div className='imgContainer'>\r\n        <Platform hasMember={props.member} />\r\n        <Image obj={props.member} alt={alt} />\r\n      </div>\r\n      <AttrList attr={props.selAttr} bonus={props.member} maxValue={300} hideIcon={true} />\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction Platform(props) {\r\n  return (\r\n    <>\r\n      <img className='platform' src={platform} />\r\n      {props.hasMember ? <div className='shadow' /> : null}\r\n    </>\r\n  )\r\n}\r\n\r\nexport class JobViewContainer extends React.PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isJobList: false,\r\n    }\r\n    this.toggleJobList = this.toggleJobList.bind(this);\r\n  }\r\n\r\n  toggleJobList() {\r\n    this.setState((state, props) => { return { isJobList: !state.isJobList } });\r\n  }\r\n\r\n  render() {\r\n    if (this.props.activeJob) {\r\n      //console.log('JobViewContainer render');\r\n      const jobViewProps = {\r\n        attr: this.props.attr,\r\n        activeJob: this.props.activeJob,\r\n        teamMembers: this.props.teamMembers,\r\n        toggleJobList: this.toggleJobList,\r\n      }\r\n      const jobListProps = {\r\n        jobs: this.props.jobs,\r\n        attr: this.props.attr,\r\n        activeJob: this.props.activeJob,\r\n        selectJob: this.props.selectJob,\r\n        toggleJobList: this.toggleJobList,\r\n      }\r\n      return (\r\n        <div id='jobView'>\r\n          <JobView {...jobViewProps} />\r\n          <div className='overlay' style={{ display: this.state.isJobList ? 'flex' : 'none' }}>\r\n            <JobList {...jobListProps} />\r\n          </div>\r\n\r\n        </div>\r\n      )\r\n    } else return null;\r\n  }\r\n}\r\n\r\nclass JobView extends React.PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    //console.log('JobView render');\r\n    const changeJobBtn = <div className='btn selectJob' onClick={this.props.toggleJobList}>Change Job</div>;\r\n    const attr = this.props.attr.filter(attr => this.props.activeJob[attr] > 0);\r\n    const baseline = {};\r\n    const value = {};\r\n    attr.forEach(attr => {\r\n      baseline[attr] = this.props.activeJob[attr];\r\n      //for each attr, iterate over teamMembers Array and accumulate their attr values\r\n      value[attr] = this.props.teamMembers.reduce((accumulator, member) => {\r\n        if (member) {\r\n          return accumulator + member[attr];\r\n        } else return accumulator\r\n      }, 0);\r\n    });\r\n    return (\r\n      <>\r\n        <div className='header'>\r\n          <div className='title'>\r\n            <p>{this.props.activeJob['Job JP']}</p>\r\n            {changeJobBtn}\r\n          </div>\r\n          <hr />\r\n          <div className='statInfo'>\r\n            <Image obj={this.props.activeJob} alt={this.props.activeJob['Job']} />\r\n            <AttrList maxValue={1500} attr={attr} value={value} baseline={baseline} />\r\n          </div>\r\n        </div>\r\n        <div className='workResult'>\r\n          <ProgressBar baseline={baseline} value={value} />\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nfunction ProgressBar(props) {\r\n  //console.log('ProgressBar', props.value, props.baseline);\r\n  const progress = Object.keys(props.baseline).reduce((accumulator, attr) => {\r\n    const percent = props.value[attr] / props.baseline[attr] * (1 / 3);\r\n    return accumulator + Math.min(percent, (1 / 3));\r\n  }, 0);\r\n  return (\r\n    <>\r\n      <div id='progressBarContainer'>\r\n        <span id='progressBarHide' style={{ width: `${(1 - progress) * 100}%` }} />\r\n        <span id='progressBar' style={{ width: `100%` }} />\r\n      </div>\r\n      <div className='status'>{`Work Result: ${Math.floor(progress * 100)}%`}</div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport class JobList extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      menus: {\r\n        'Beginner': '【初級】',\r\n        'Intermediate': '【中級】',\r\n        'Advanced': '【上級】',\r\n        'Unit': 'Unit',\r\n        'ES Building': 'ESビル',\r\n        'Limited': '期間限定',\r\n      },\r\n      activeMenu: null,\r\n      viewJob: null,\r\n    }\r\n    this.toggleProperty = this.toggleProperty.bind(this);\r\n    this.toggleMenu = this.toggleMenu.bind(this);\r\n    this.getAvailableMenus = this.getAvailableMenus.bind(this);\r\n    this.getMenuJobs = this.getMenuJobs.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    //console.log('JobList componentDidMount')\r\n    this.setState({ activeMenu: this.props.activeJob['Type'], viewJob: this.props.activeJob })\r\n  }\r\n\r\n  toggleProperty(prop, value) {\r\n    this.setState({ [prop]: value });\r\n  }\r\n\r\n  toggleMenu(menu) { //need to reset viewJob to first item\r\n    const job = this.getMenuJobs(menu)[0];\r\n    this.setState({ activeMenu: menu, viewJob: job });\r\n  }\r\n\r\n  getAvailableMenus() {\r\n    let menuOpts = Object.keys(this.state.menus);\r\n    let menus = {}\r\n    const data = new Set(this.props.jobs.map((job) => job['Type'] ? job['Type'].trim() : ''));\r\n    menuOpts.forEach(opt => { if (opt.length > 0 && data.has(opt)) menus[opt] = this.state.menus[opt] });\r\n    return menus;\r\n  }\r\n\r\n  getMenuJobs(menu) {\r\n    return this.props.jobs.filter((job) => job['Type'] ? job['Type'].trim() === menu : false);\r\n  }\r\n\r\n  render() {\r\n    //console.log('JobList render');\r\n    const jobDetailBtn = <div className='btn selectJob' onClick={() => { this.props.selectJob(this.state.viewJob); this.props.toggleJobList(); }}>Select Job</div>\r\n    const value = this.state.viewJob &&\r\n      (\r\n        <div className='overlayContent' id='jobList'>\r\n          <div className='bottom left'>\r\n            <JobTabMenu menus={this.getAvailableMenus()} activeMenu={this.state.activeMenu} toggleMenu={this.toggleMenu} />\r\n            <JobSelect jobs={this.getMenuJobs(this.state.activeMenu)} viewJob={this.state.viewJob} toggleProperty={this.toggleProperty} />\r\n          </div>\r\n          <div className='top right'>\r\n            <JobDetail job={this.state.viewJob} attr={this.props.attr} button={jobDetailBtn} toggleJobList={this.props.toggleJobList} />\r\n          </div>\r\n        </div>\r\n      )\r\n    return value;\r\n  }\r\n}\r\n\r\nfunction JobTabMenu(props) {\r\n  const tabs = Object.keys(props.menus).map(key => {\r\n    return (\r\n      <div key={key}\r\n        className={'jobTab' + (props.activeMenu === key ? ' selected' : '')}\r\n        onClick={() => props.toggleMenu(key)}>\r\n        {props.menus[key]}\r\n      </div>\r\n    )\r\n  });\r\n  return <div id='jobTabMenu'>{tabs}</div >;\r\n}\r\n\r\nfunction JobSelect(props) {\r\n  const jobs = props.jobs.map(job => {\r\n    const isViewing = props.viewJob['Job'] === job['Job'];\r\n    const key = job['Job JP'] + (isViewing ? ' selected' : '');\r\n    return (\r\n      <div key={key}\r\n        className={'jobOpt' + (isViewing ? ' selected' : '')}\r\n        onClick={() => props.toggleProperty('viewJob', job)}>\r\n        {job['Job JP']}\r\n      </div>\r\n    )\r\n  });\r\n  return <div id='jobSelect'>{jobs}</div>;\r\n}\r\n\r\nfunction JobDetail(props) {\r\n  const attr = props.attr.filter(attr => props.job[attr] > 0);\r\n  const value = {};\r\n  attr.forEach(attr => value[attr] = props.job[attr]);\r\n  const closeBtn = <div className='btn closeJob' onClick={props.toggleJobList}>Cancel</div>;\r\n  return (\r\n    <div id='jobDetail'>\r\n      <p>{props.job['Job JP']}</p>\r\n      <Image obj={props.job} alt={props.job['Job']} />\r\n      <AttrList maxValue={1500} attr={attr} value={value} />\r\n      <div className='jobDetailBtns'>\r\n        {props.button}\r\n        {closeBtn}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport throttle from 'lodash.throttle';\r\nimport { Image, AttrList } from './Main.js';\r\n\r\nexport default class OutfitList extends React.PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      error: false,\r\n      isLoading: false,\r\n      hasMore: true,\r\n      loadedOutfits: [],\r\n      outfitsToLoad: 30,\r\n    };\r\n    this.onScroll = this.onScroll.bind(this);\r\n    this.loadOutfits = this.loadOutfits.bind(this);\r\n    this.onScrollThrottled = throttle(this.onScroll, 100);\r\n  }\r\n\r\n  componentDidMount() {\r\n    //console.log('OutfitList componentDidMount')\r\n    this.loadOutfits();\r\n  }\r\n\r\n  //modified from this tutorial: https://alligator.io/react/react-infinite-scroll/\r\n  //and also this https://blog.bitsrc.io/improve-your-react-app-performance-by-using-throttling-and-debouncing-101afbe9055\r\n  onScroll(event) {\r\n    event.persist() //didn't work without this \r\n\r\n    //Bails early if:\r\n    //* it's already loading\r\n    //* there's nothing left to load\r\n    //console.log(this.state.isLoading, this.state.hasMore);\r\n    if (this.state.isLoading || !this.state.hasMore) { return; }\r\n\r\n    //Checks that the page has scrolled to the bottom\r\n    if (event.target) {\r\n      if (window.innerHeight + event.target.scrollTop >= event.target.scrollHeight - 600) {\r\n        //console.log('loading more');\r\n        this.loadOutfits();\r\n      }\r\n    }\r\n  }\r\n\r\n  loadOutfits() {\r\n    this.setState({ isLoading: true }, () => {\r\n      this.setState((state, props) => {\r\n        let loadedOutfits = state.loadedOutfits;\r\n        loadedOutfits = loadedOutfits.concat(props.outfits.slice(state.loadedOutfits.length, state.loadedOutfits.length + state.outfitsToLoad));\r\n        const hasMore = loadedOutfits.length < props.outfits.length;\r\n        //console.log('after loadOutfits', loadedOutfits);\r\n        return { hasMore: hasMore, isLoading: false, loadedOutfits: loadedOutfits };\r\n      });\r\n    })\r\n  }\r\n\r\n  render() {\r\n    //console.log('OutfitList render', this.props.teamMembers);\r\n    const outfits = this.state.loadedOutfits.map((elt) => {\r\n      let inTeam = false;\r\n      this.props.teamMembers.forEach(member => {\r\n        if (member['Character'] === elt['Character'] && member['Outfit'] === elt['Outfit']) inTeam = true;\r\n      });\r\n      //console.log(elt);\r\n      return <OutfitCard key={elt.Character + elt.Outfit + elt['Total Bonus']}\r\n        info={elt}\r\n        inTeam={inTeam}\r\n        selAttr={this.props.selAttr}\r\n        setMember={this.props.setMember} />\r\n    });\r\n    //console.log('finished loading outfit list', performance.now())\r\n    let placeholders = [];\r\n    for (let i = 0; i < 4; i++) {\r\n      placeholders.push(<div key={i} className=\"outfit-placeholder\"></div>)\r\n    }\r\n    //console.log('OutfitList render');\r\n    return (\r\n      <div id='outfitView' onScroll={this.onScrollThrottled}>\r\n        <div id='outfitList' className={this.props.view}>\r\n          {outfits}\r\n          {this.props.view === 'card' && placeholders}\r\n        </div>\r\n        {!this.state.hasMore && this.props.view === 'card' &&\r\n          <p className='status'>End of results</p>\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nfunction OutfitCard(props) {\r\n  const cls = 'outfitCard' + (props.info.hasOwnProperty('Made') ? (!props.info['Made'] ? ' notMade' : '') : '');\r\n  return (\r\n    <div className={cls} onClick={() => props.setMember(props.info)}>\r\n      {props.inTeam && <div className='inTeam'>TEAM</div>}\r\n      <p>{props.info['Character']}</p>\r\n      <p>{props.info['Outfit']}</p>\r\n      <hr />\r\n      <div className='rowContainer'>\r\n        <Image obj={props.info} alt={`${props.info['Character']} ${props.info['Outfit']}`} />\r\n        <div className='right'> \r\n        <AttrList attr={props.selAttr} bonus={props.info} maxValue={300} />\r\n        {('Total Bonus' in props.info) && <div className='bonus'>TOTAL: <strong>{props.info['Total Bonus']}</strong></div>}\r\n        </div>\r\n        \r\n      </div>\r\n      \r\n    </div>\r\n  )\r\n}\r\n\r\n//function OutfitRow(props) {\r\n//  return (\r\n//    <>\r\n//      {Object.keys(props.info).map(key => {\r\n//        if (key !== 'ImageID') {\r\n//          return (\r\n//            <div key={key} className='outfitCell'>\r\n//              <p>{props.info[key]}</p>\r\n//            </div>\r\n//          )\r\n//        }\r\n//      })}\r\n//    </>\r\n//  )\r\n//}\r\n","export const apiKey = 'AIzaSyBYN0YVkl2lB5ps2CL_74JKIs5TOukXdm4';\r\nexport const spreadsheetId = '1JeHlN1zcBwyBbBkyfsDiiqDZpLotkn770ewa1JCsekU';","//filter Array of Objs based on query and job conditions\r\n//returns deep copy of new Array (with new copy of Objs)\r\nexport function filterData(data, config = {}) {\r\n  let query = config.query || {}; //Object with Sets of values selected for each filter\r\n  let conditions = config.conditions || []; //Array with values of job conditions\r\n  const isInclusive = config.isInclusive || false; //whether row should match query with OR (inclusive) or AND (exclusive)\r\n  const result = [];\r\n  if (data) { //should be Array of Objects\r\n    //console.log('filterGsData',config);\r\n    //case 1: no conditions or queries -> return data as is\r\n    //case 2: conditions but no queries -> filter by conditions\r\n    //case 3: no conditions but has queries -> filter by queries\r\n    //case4 4: queries and conditions -> must filter by condition, then queries inclusive/exclusive\r\n    for (let i = 0; i < data.length; i++) { //iterate over Array of rows\r\n      const row = data[i];\r\n      let meetsConditions = conditions.length <= 0; //if no condition then all rows meet condition (true)\r\n      let queried = Object.keys(query).length <= 0; //if no queries then all rows are queried (true)\r\n      if (Object.keys(query).length === 0 && conditions.length === 0) { queried = true; } //if no query just push all rows\r\n      else {\r\n        if (conditions.length > 0) {\r\n          conditions.forEach(condition => { if (Object.values(row).includes(condition)) meetsConditions = true });\r\n        }\r\n        if (Object.keys(query).length > 0) {\r\n          //map which filters match values in the row\r\n          let result = matchFilters(query, row);\r\n          if (isInclusive) {\r\n            //if any filter is matched queried = true\r\n            queried = result.reduce(function (accumulator, currVal) { return accumulator || currVal }, false);\r\n          }\r\n          else { //exclusive \r\n            //if any filter is not matched queried = false\r\n            queried = result.reduce(function (accumulator, currVal) { return accumulator && currVal }, true);\r\n          }\r\n        }\r\n      }\r\n      if (meetsConditions && queried) {\r\n        result.push(JSON.parse(JSON.stringify(row))\r\n        );\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n}\r\n\r\n//helper function to map which filters match values in the row\r\nfunction matchFilters(query, row) {\r\n  //check if values queried in each filter match the row value at least once\r\n  const result = Object.keys(query).map((key) => { //for each query Set\r\n    const queriedHeader = key.replace('sel', ''); //get name of relevant column\r\n    const set = query[key]; //get query Set from query Object\r\n    const queriedValue = row[queriedHeader]; //find which index represents the relevant column in the row Array\r\n    //console.log(queriedValue);\r\n    if (set.has(queriedValue)) { return true }\r\n  });\r\n  return result;\r\n}\r\n\r\n//convert Array of Arrays to Array of objects assuming first Array holds key values\r\n//does not mutate original Array\r\nexport function convertArraysToObjects(arrs) {\r\n  const result = [];\r\n  const headers = arrs[0]; //first row is header row\r\n  for (let i = 1; i < arrs.length; i++) {\r\n    const row = arrs[i];\r\n    const newRow = {};\r\n    for (let j = 0; j < row.length; j++) { //iterate over values in each row to add headers\r\n      const header = headers[j];\r\n      let value = row[j];\r\n      if (!isNaN(value)) {\r\n        value = Number(value);\r\n      }\r\n      newRow[header] = value;\r\n    }\r\n    result.push(newRow);\r\n  }\r\n  return result;\r\n}\r\n\r\n","import React from 'react';\r\nimport { TeamView, JobViewContainer } from './TeamBuilder.js'\r\nimport SideBar from './Sidebar.js';\r\nimport OutfitList from './OutfitList.js';\r\nimport { apiKey, spreadsheetId } from './sheetsCreds.js';\r\nimport { filterData, convertArraysToObjects } from './Gsx2json.js';\r\n\r\nexport default class Main extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      allOutfits: null, //Array of Obj of all outfit rows in database spreadsheet\r\n      userOutfits: null, //Array of Obj of user outfit rows, null when user has no data/removes their data\r\n      outfits: null, //Outfits to display after allOutfits or userOutfits has been filtered\r\n      userSheetId: null,\r\n      idolStats: null,\r\n      attr: ['Ac', 'Pa', 'Un', 'Sm', 'Te', 'Ch'],\r\n      selAttr: [], //Array of  strings from attr matching relevant attributes\r\n      jobs: null, //Array of Obj of all job rows in database spreadsheet\r\n      activeJob: null,\r\n      filters: null, //Array of headers for each column to filter by\r\n      isInclusive: false,\r\n      //view: 'card',\r\n      isOutfitList: false,\r\n      teamMembers: [],\r\n      teamSlot: null, //Store index of teamMember user is currently choosing\r\n    };\r\n    this.prepareOutfitData = this.prepareOutfitData.bind(this)\r\n    this.submitFilterSelection = this.submitFilterSelection.bind(this);\r\n    this.calculateTotalBonus = this.calculateTotalBonus.bind(this);\r\n    this.toggleSearchTypeTrue = this.toggleSearchTypeTrue.bind(this);\r\n    this.toggleSearchTypeFalse = this.toggleSearchTypeFalse.bind(this);\r\n    this.toggleMade = this.toggleMade.bind(this);\r\n    this.sortByFilter = this.sortByFilter.bind(this);\r\n    this.sortOutfits = this.sortOutfits.bind(this);\r\n    this.toggleOutfitList = this.toggleOutfitList.bind(this);\r\n    this.selectJob = this.selectJob.bind(this);\r\n    this.setMember = this.setMember.bind(this);\r\n    this.getUserData = this.getUserData.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    //console.log('Main componentDidMount')\r\n    const nextSheetId = 'Jobs';\r\n    //fetch info for TeamBuilder\r\n    fetch(`https://sheets.googleapis.com/v4/spreadsheets/${spreadsheetId}/values/${nextSheetId}?key=${apiKey}`)\r\n      .then(result => result.json())\r\n      .then(result => {\r\n        let data = result.values; //Array of Arrays representing sheet rows\r\n        const jobs = convertArraysToObjects(data);\r\n        this.setState({ jobs: jobs });\r\n        let i = 0;\r\n        while (jobs[i]['Type'] !== 'Beginner') { i++; }\r\n        this.selectJob(jobs[i]);\r\n      })\r\n      .then(() => {\r\n        const sheetId = 'Stat Bonuses';\r\n        //fetch info for Sidebar\r\n        fetch(`https://sheets.googleapis.com/v4/spreadsheets/${spreadsheetId}/values/${sheetId}?key=${apiKey}`)\r\n          .then(result => result.json())\r\n          .then(result => {\r\n            let data = result.values; //Array of Arrays representing sheet rows\r\n            const newState = {};\r\n            const filters = []\r\n            data[0].forEach((arr) => { //Create set for each header to keep track of selected values\r\n              if (arr !== 'ImageID' && arr !== 'Total' && !this.state.attr.includes(arr)) {\r\n                filters.push(arr); newState['sel' + arr] = new Set()\r\n              }\r\n            })\r\n            let outfits = convertArraysToObjects(data);\r\n            outfits = this.filterIfColumnIsEmpty(outfits, ['Unit', 'Character', 'Outfit']);\r\n            newState.allOutfits = outfits;\r\n            newState.outfits = this.prepareOutfitData(outfits, this.state);\r\n            newState.filters = filters;\r\n            this.setState(newState);\r\n          })\r\n          .then(() => {\r\n            if (this.props.sheetId) {\r\n              //console.log(this.props.sheetId);\r\n              this.getUserData(this.props.sheetId)\r\n            }\r\n          })\r\n      })\r\n  }\r\n\r\n  //filter out row only if even one given column is empty\r\n  filterIfColumnIsEmpty(arr, columnsArr) {\r\n    return arr.filter((row) => {\r\n      const result = columnsArr.map(column => row[column] ? true : false);\r\n      return result.reduce(function (accumulator, currVal) { return accumulator && currVal }, true);\r\n    })\r\n  }\r\n\r\n  toggleOutfitList(index = null) {\r\n    //console.log('toggleOutfitList', index);\r\n    this.setState((state) => {\r\n      const newState = { isOutfitList: !state.isOutfitList, teamSlot: index }\r\n      return newState;\r\n    });\r\n  }\r\n\r\n  selectJob(job) {\r\n    //console.log('SelectJob', job);\r\n    if (this.state.activeJob !== job) {\r\n      const newState = { ...this.state };\r\n      newState.activeJob = job;\r\n      newState.teamMembers = new Array(job['Idol Slots']).fill(0);\r\n      const outfitSource = this.state.userOutfits ? this.state.userOutfits : this.state.allOutfits;\r\n      newState.selAttr = Object.keys(job).filter(key => this.state.attr.includes(key) && job[key] > 0);\r\n      if (this.state.outfits) { newState.outfits = this.prepareOutfitData(outfitSource, newState); }\r\n      this.setState(newState);\r\n    }\r\n  }\r\n\r\n  toggleSearchTypeTrue() {\r\n    this.setState({ isInclusive: true })\r\n  }\r\n\r\n  toggleSearchTypeFalse() {\r\n    this.setState({ isInclusive: false })\r\n  }\r\n\r\n  toggleMade() {\r\n    let newMade = null;\r\n    if (this.state.selMade.size === 0) {\r\n      newMade = new Set([true]);\r\n    } else newMade = new Set()\r\n    this.submitFilterSelection('selMade')(newMade);\r\n  }\r\n\r\n  sortByFilter(outfits, filter, isAscending = true) {\r\n    outfits.sort((a, b) => isAscending ? a[filter] - b[filter] : b[filter] - a[filter])\r\n  }\r\n\r\n  sortOutfits(filter, isAscending) {\r\n    this.setState((state, props) => {\r\n      let outfits = [...state.outfits];\r\n      this.sortByFilter(outfits, filter, isAscending);\r\n      //console.log('sortOutfits', filter, outfits);\r\n      return { outfits: outfits }\r\n    })\r\n  }\r\n\r\n  setMember(newMember) {\r\n    this.setState((state, props) => {\r\n      let newTeam = state.teamMembers.slice();\r\n      let index = state.teamSlot;\r\n      //can't have same chara on team twice\r\n      //assume if user chooses outfit for chara on team they are changing their outfit\r\n      for (let i = 0; i < newTeam.length; i++) {\r\n        if (newMember['Character'] === newTeam[i]['Character']) { index = i; break; }\r\n      }\r\n      newTeam[index] = newMember;\r\n      return { teamMembers: newTeam, isOutfitList: false };\r\n    })\r\n  }\r\n\r\n  submitFilterSelection(filter) {\r\n    return (value) => {\r\n      //console.log('submitFilterSelection', value)\r\n      this.setState((state) => {\r\n        let newState = { ...state };\r\n        newState[filter] = value;\r\n        const outfitSource = newState.userOutfits ? newState.userOutfits : newState.allOutfits;\r\n        const outfits = this.prepareOutfitData(outfitSource, newState)\r\n        newState.outfits = outfits;\r\n        return newState;\r\n      });\r\n    }\r\n  }\r\n\r\n  //filter outfits based on any selected queries and conditions in activeJob\r\n  //calculate total bonus for selected attributes\r\n  //sort outfits in descending order by total bonus\r\n  //return outfit Obj of Arrays\r\n  prepareOutfitData(data, state) {\r\n    //create new deep copy of outfitList, but slows performance\r\n    //be careful about how other functions may mutate data\r\n    //let newData = JSON.parse(JSON.stringify(data)) \r\n    let queryConfig = this.getQueryAndConditions(state);\r\n    queryConfig.isInclusive = state.isInclusive;\r\n    let outfits = filterData(data, queryConfig);\r\n    outfits = this.addIdolStatus(outfits, state.idolStats);\r\n    if (state.selAttr.length > 0) {\r\n      outfits = this.calculateTotalBonus(outfits, state.selAttr);\r\n      this.sortByFilter(outfits, 'Total Bonus', false);\r\n    }\r\n    return outfits;\r\n  }\r\n\r\n  //returns Object with query and conditions given passed-in state\r\n  getQueryAndConditions(state) {\r\n    const query = Object.keys(state).reduce((accumulator, key) => { //make Object of Sets that hold selected values\r\n      const value = state[key];\r\n      if (key.includes('sel') && key !== 'selAttr' && value.size > 0) { accumulator[key] = value; }\r\n      return accumulator;\r\n    }, {});\r\n    //console.log(query);\r\n    const conditions = state.activeJob ?\r\n      state.activeJob['Conditions'] ? state.activeJob['Conditions'].split(',').map(str => str.trim()) : []\r\n      : [];\r\n    return { query: query, conditions: conditions };\r\n  }\r\n\r\n  calculateTotalBonus(outfits, attrSet) { //outfits is Array of Objects of each outfit info\r\n    //console.log('Main calculateTotalBonus', attrSet);\r\n    outfits.forEach(outfitObj => {\r\n      let total = 0;\r\n      attrSet.forEach(attr => total += outfitObj[attr]);\r\n      outfitObj['Total Bonus'] = total;\r\n    });\r\n    return outfits;\r\n  }\r\n\r\n  addIdolStatus(outfits, idolStats) {\r\n    if (idolStats) {\r\n      outfits.forEach(outfitObj => {\r\n        const stats = idolStats[outfitObj['Character']];\r\n        //stats might not exist if user has misspelled idol name\r\n        if (stats && !outfitObj['AddedStat']) {\r\n          Object.keys(stats).forEach(attr => {\r\n            //attr might not exist if user has misspelled attr\r\n            if (outfitObj.hasOwnProperty(attr)) {\r\n              outfitObj[attr] += stats[attr];\r\n            }\r\n          });\r\n          outfitObj['AddedStat'] = true;\r\n        }\r\n      });\r\n    }\r\n    //console.log('addIdolStatus', outfits)\r\n    return outfits\r\n  }\r\n\r\n  getUserData(url) {\r\n    if (url.length > 0) {\r\n      //url format: https://docs.google.com/spreadsheets/d/SPREADSHEET_ID/possible-extra-content\r\n      let urlStr = url.replace('https://docs.google.com/spreadsheets/d/', '');\r\n      const sheetId = urlStr.indexOf('/') > 0 ? urlStr.slice(0, urlStr.indexOf('/')) : urlStr;\r\n      //console.log(sheetId);\r\n      //if (sheetId !== this.state.userSheetId) { user might be re-adding sheet w altered data\r\n      fetch(`https://sheets.googleapis.com/v4/spreadsheets/${sheetId}/values/${'Outfits'}?key=${apiKey}`)\r\n        .then(res => res.json())\r\n        .then(res => this.handleErrors(res))\r\n        .then(res => {\r\n          if (res) {\r\n            let data = res.values; //Array of Arrays representing sheet rows\r\n            //check if 'Outfits' sheet columns are labeled correctly\r\n            let headers = data[0].map(header => header.toUpperCase());\r\n            if (!headers.includes('CHARACTER') || !headers.includes('OUTFIT') || !headers.includes('MADE')) {\r\n              this.handleErrors({ error: { status: 'HEADER NOT FOUND' } });\r\n            }\r\n            else {\r\n              //keep user data as Array of Arrays? assumes columns are in the same order\r\n              //--> convert to object so keys can be used instead of index\r\n              data[0] = headers //ignore column case jic\r\n              let userList = convertArraysToObjects(data);\r\n              userList = userList.filter(row => row['CHARACTER'] && row['OUTFIT']) //filter out empty rows\r\n              userList.sort((a, b) => { //sort by character then outfit A->Z\r\n                if (a['CHARACTER'].toUpperCase() === b['CHARACTER'].toUpperCase()) {\r\n                  if (a['OUTFIT'].toUpperCase() < b['OUTFIT'].toUpperCase()) {\r\n                    return -1;\r\n                  }\r\n                  else if (a['OUTFIT'].toUpperCase() > b['OUTFIT'].toUpperCase()) {\r\n                    return 1;\r\n                  }\r\n                  return 0;\r\n                }\r\n                else if (a['CHARACTER'].toUpperCase() < b['CHARACTER'].toUpperCase()) {\r\n                  return -1;\r\n                }\r\n                else if (a['CHARACTER'].toUpperCase() > b['CHARACTER'].toUpperCase()) {\r\n                  return 1;\r\n                }\r\n                return 0;\r\n              });\r\n              //console.log('userlist length', userList.length);\r\n              //how to filter outfits with least time complexity?\r\n              //a) iterate over userList, find corresponding outfit, leave out outfits not in database\r\n              //b) iterate over outfits, check if outfit is in userList, outfits not in database will not be displayed\r\n              //both are O(userList.length * outfits.length)\r\n              //c) check if outfit is in userList when filtering data\r\n              //adds complexity to filtering so no good\r\n              let outfits = [...this.state.allOutfits];\r\n              let userOutfits = outfits.reduce((acc, outfit) => {\r\n                //practice binary search algorithm\r\n                let outfitMatch = false;\r\n                let low = 0;\r\n                let high = userList.length - 1;\r\n                //console.log('looking for ', outfit);\r\n                while (!outfitMatch) { //check if Character and Outfit combo is in userList\r\n                  //console.log('numbers', low, high, low > high);\r\n                  if (high < low) { break; }\r\n                  let middle = Math.floor(low + (high - low) / 2);\r\n                  //console.log('middle', middle, userList[middle]);\r\n                  if (userList[middle]['CHARACTER'].toUpperCase() === outfit['Character'].toUpperCase()) {\r\n                    if (userList[middle]['OUTFIT'].toUpperCase() < outfit['Outfit'].toUpperCase()) {\r\n                      low = middle + 1;\r\n                    }\r\n                    else if (userList[middle]['OUTFIT'].toUpperCase() > outfit['Outfit'].toUpperCase()) {\r\n                      high = middle - 1;\r\n                    }\r\n                    else { outfitMatch = userList[middle] }\r\n                  }\r\n                  else if (userList[middle]['CHARACTER'].toUpperCase() < outfit['Character'].toUpperCase()) {\r\n                    low = middle + 1;\r\n                  }\r\n                  else if (userList[middle]['CHARACTER'].toUpperCase() > outfit['Character'].toUpperCase()) {\r\n                    high = middle - 1;\r\n                  }\r\n                }\r\n                if (outfitMatch) {\r\n                  if (Object.keys(outfitMatch).includes('MADE')) {\r\n                    outfit['Made'] = outfitMatch['MADE'] === 'TRUE' ? true : false;\r\n                  }\r\n                  acc.push(outfit);\r\n                  return acc;\r\n                }\r\n                else return acc;\r\n              }, [])\r\n              return userOutfits;\r\n            }\r\n          }\r\n        })\r\n        .then(outfits => {\r\n          if (outfits) {\r\n            this.setState((state) => {\r\n              //clear team in case of outfits that aren't in userList\r\n              const emptyTeam = state.teamMembers.map(member => 0);\r\n              const preparedOutfits = this.prepareOutfitData(outfits, state)\r\n              return { userSheetId: sheetId, userOutfits: outfits, outfits: preparedOutfits, teamMembers: emptyTeam, selMade: new Set() }\r\n            });\r\n          }\r\n        })\r\n        .then(\r\n          fetch(`https://sheets.googleapis.com/v4/spreadsheets/${sheetId}/values/${'Idol Status'}?key=${apiKey}`)\r\n            .then(res => res.json())\r\n            .then(res => {\r\n              if (res.values) {\r\n                const userStatus = convertArraysToObjects(res.values);\r\n                const idolStats = {};\r\n                userStatus.forEach(idol => {\r\n                  const name = idol['Character'];\r\n                  delete idol['Character'];\r\n                  idolStats[name] = idol;\r\n                });\r\n                const newState = { ...this.state };\r\n                newState.idolStats = idolStats;\r\n                const outfits = this.prepareOutfitData(this.state.outfits, newState);\r\n                newState.outfits = outfits;\r\n                this.setState(newState);\r\n              }\r\n            })\r\n        )\r\n      //}\r\n    }\r\n  }\r\n\r\n  handleErrors(response) {\r\n    //console.log(response);\r\n    if (response.error) {\r\n      if (response.error.code === 403 && response.error.status.includes('PERMISSION_DENIED')) {\r\n        console.log(\"Error: Sorter did not have permission to access your spreadsheet. Don't forget to turn link-sharing on!\")\r\n        return;\r\n      }\r\n      if (response.error.code === 400 && response.error.status.includes('INVALID_ARGUMENT')) {\r\n        console.log(\"Error: Sorter did not find a sheet called 'Outfits' in your spreadsheet.\")\r\n        return;\r\n      }\r\n      if (response.error.status === ('HEADER NOT FOUND')) {\r\n        console.log(\"Error: Sorter did not find 'Character', 'Outfit', and 'Made' columns in your spreadsheet.\")\r\n        return;\r\n      }\r\n    }\r\n    else return response;\r\n  }\r\n\r\n  render() {\r\n    if (this.state.outfits && this.state.jobs) {\r\n      //console.log('Main render', this.state.selMade)\r\n      //outfitList doesn't update without key. 100 is an arbitrary number\r\n      let outfitListKey = this.state.outfits.slice(0, 100);\r\n      outfitListKey = JSON.stringify(outfitListKey);\r\n      const jobViewProps = {\r\n        activeJob: this.state.activeJob,\r\n        teamMembers: this.state.teamMembers,\r\n        jobs: this.state.jobs,\r\n        attr: this.state.attr,\r\n        selAttr: this.state.selAttr,\r\n        selectJob: this.selectJob,\r\n      }\r\n      const teamViewProps = {\r\n        sheetId: this.state.userSheetId,\r\n        selAttr: this.state.selAttr,\r\n        activeJob: this.state.activeJob,\r\n        teamMembers: this.state.teamMembers,\r\n        toggleOutfitList: this.toggleOutfitList,\r\n        getUserData: this.getUserData,\r\n      }\r\n      const outfitListProps = {\r\n        key: outfitListKey,\r\n        outfits: this.state.outfits,\r\n        teamMembers: this.state.teamMembers,\r\n        view: this.state.view,\r\n        attr: this.state.attr,\r\n        selAttr: this.state.selAttr,\r\n        setMember: this.setMember,\r\n        toggleOutfitList: this.toggleOutfitList,\r\n      }\r\n      const sidebarProps = {\r\n        selAttr: this.state.selAttr,\r\n        selMade: this.state.selMade,\r\n        data: this.state.allOutfits,\r\n        filters: this.state.filters,\r\n        status: `showing ${this.state.outfits.length} outfits`,\r\n        submitFilterSelection: this.submitFilterSelection,\r\n        toggleTrue: this.toggleSearchTypeTrue,\r\n        toggleFalse: this.toggleSearchTypeFalse,\r\n        toggleMade: this.state.hasOwnProperty('selMade') && this.toggleMade,\r\n        toggleOutfitList: this.toggleOutfitList,\r\n        sortOutfits: this.sortOutfits,\r\n      }\r\n      return (\r\n        <>\r\n          <div id='teamBuilder'>\r\n            <TeamView {...teamViewProps} />\r\n            {this.state.activeJob && <JobViewContainer {...jobViewProps} />}\r\n          </div>\r\n          <div className='overlay' style={{ display: this.state.isOutfitList ? 'flex' : 'none' }}>\r\n            <div className='overlayContent'>\r\n              <SideBar {...sidebarProps} />\r\n              <OutfitList {...outfitListProps} />\r\n            </div>\r\n          </div>\r\n        </>\r\n      )\r\n    }\r\n    else return <div id='loading'>Loading...</div>\r\n  }\r\n}\r\n\r\nexport function Image(props) {\r\n  let image = null;\r\n  if (!props.obj['ImageID'] || props.obj['ImageID'] === 'MISSING') {\r\n    image = <div className='imgPlaceholder'><div>{props.alt}</div></div>\r\n  }\r\n  else {\r\n    //was using 'https://drive.google.com/uc?export=view&id=' \r\n    //also tried 'https://drive.google.com/uc?export=download&id=' but high-res images seem to cause loading issues\r\n    //using 'https://drive.google.com/thumbnail?id=' which fetches the low-res thumbnail\r\n    //fine for chibi render images but noticeable quality drop for work bgs which are originally about 2048px x 1026px\r\n    image = <img src={'https://drive.google.com/thumbnail?id=' + props.obj['ImageID']} alt={props.alt} />\r\n  }\r\n  return image;\r\n}\r\n\r\n\r\n//this Image class slows down load time...\r\n//https://stackoverflow.com/questions/39777833/image-onload-event-in-isomorphic-universal-react-register-event-after-image-is\r\n//class Image extends React.PureComponent {\r\n//  constructor(props) {\r\n//    super(props);\r\n//    this.state = {\r\n//      error: null,\r\n//    }\r\n//    this.onError = this.onError.bind(this);\r\n//  }\r\n//  onError() {\r\n//    this.setState({ isLoaded: true, error: true });\r\n//  }\r\n\r\n//  render() {\r\n//    console.log(this.props.obj);\r\n//    if (this.state.error) {\r\n//      if (!this.props.obj['ImageID'] || this.props.obj['ImageID'] === 'MISSING') {\r\n//        return <div className='imgPlaceholder'>Image N/A</div>\r\n//      }\r\n//      return <div className='imgPlaceholder'>Failed to load image</div>\r\n//    }\r\n//    return (\r\n//      <img src={'http://drive.google.com/uc?export=view&id=' + this.props.obj['ImageID']}\r\n//        alt={this.props.alt}\r\n//        ref={this.image}\r\n//        onError={this.onError} />\r\n//    )\r\n//  }\r\n//}\r\n\r\n\r\n//statusBarWidth: Integer as width of status bar in rem\r\n//maxValue: maximum value of status bar\r\n//attr: Array of Strings ot indicate which attributes to display\r\n//value: Obj of attr to display and corresponding values to calculate status bar (optional if bonus is provided)\r\n//bonus: Obj of attr to display and corresponding bonus values (optional if value is provided)\r\n//baseline: Obj of attr to display baseline job reqs on StatusBar\r\nexport function AttrList(props) {\r\n  const hideIcon = props.hideIcon || false;\r\n  return (\r\n    <div className='attrList'>\r\n      {props.attr.map(attr => {\r\n        const value = (props.value ? props.value[attr] : 0) + (props.bonus ? props.bonus[attr] : 0);\r\n        //const numberText = (props.value ? props.value[attr] : '') + (props.bonus ? ` +${props.bonus[attr]}` : '').trim();\r\n        let numberText = value;\r\n        if (props.bonus) {\r\n          if (!props.bonus['AddedStat']) { numberText = '+' + numberText }\r\n        }\r\n        //const progressText = props.baseline ?\r\n        //  `${props.value[attr]}/${props.baseline[attr]}`\r\n        //  : '';\r\n        const statusBarProps = {\r\n          attr: attr,\r\n          value: value,\r\n          maxValue: props.maxValue,\r\n        }\r\n        if (props.baseline) { statusBarProps.baseline = props.baseline[attr] }\r\n        return (\r\n          <div className='attr' key={attr}>\r\n            {!hideIcon && <AttrIcon attr={attr} />}\r\n            <span className='numberText'>{numberText}</span>\r\n            <StatusBar {...statusBarProps} />\r\n            {props.baseline && <span className='numberText'>{`${props.value[attr] > props.baseline[attr] ? '+' : ''}${props.value[attr] - props.baseline[attr]}`}</span>}\r\n          </div>\r\n        )\r\n      })}\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction StatusBar(props) {\r\n  return (\r\n    <span className='statusBarContainer'>\r\n      {props.baseline &&\r\n        <span className='baseline'\r\n          style={{ marginLeft: `${props.baseline / props.maxValue * 100}%` }} />\r\n      }\r\n      <span className={'statusBar ' + props.attr.toLowerCase()}\r\n        style={{ width: `${props.value / props.maxValue * 100}%` }} />\r\n    </span>\r\n  )\r\n}\r\n\r\nexport function AttrIcon(props) {\r\n  return <span className={'icon ' + props.attr.toLowerCase()}>{props.attr}</span>\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Main from './Main.js';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter as Router, Switch, Route, useParams } from 'react-router-dom';\r\n\r\nfunction App() {\r\n  let {path, sheetId} = useParams();\r\n  return <Main sheetId={sheetId}/>\r\n}\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Router>\r\n      <Switch>\r\n        <Route path='/:path/:sheetId' children={<App />} />\r\n        <Route path='/'><Main /></Route>\r\n      </Switch>\r\n    </Router>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}