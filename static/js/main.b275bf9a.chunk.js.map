{"version":3,"sources":["Sidebar.js","sheetsCreds.js","OutfitList.js","Gsx2json.js","Main.js","App.js","serviceWorker.js","index.js"],"names":["Sidebar","props","toggleValue","className","AttrOptions","id","optionsArr","attributes","SelectOptions","heading","characters","selected","selCharas","outfitTypes","selOutfits","options","map","option","key","type","value","onClick","htmlFor","Array","from","ToggleOption","onChange","apiKey","spreadsheetId","OutfitList","state","isLoaded","outfits","status","prevProps","this","query","fetch","then","res","json","setState","data","config","useIntegers","integers","responseObj","inclusiveSearch","headers","values","i","length","row","newRow","queried","j","header","forEach","toLowerCase","indexOf","isNaN","Number","push","gsx2json","stringQuery","selAttr","size","attr","splice","sort","a","b","totalBonusA","totalBonusB","body","elt","Outfit","character","outfit","React","Component","properties","AttrList","total","reduce","accumulator","currVal","totalBonus","Object","keys","includes","charAt","toUpperCase","slice","Main","Set","toggleValueInSet","bind","result","resultObj","filter","arr","setName","event","newSet","has","target","delete","add","sidebarProps","outfitListProps","concat","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b275bf9a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default function Sidebar(props) {\r\n  const toggleValue = props.toggleValue();\r\n  return (\r\n    <div className='sidebar'>\r\n      {/* <SearchButton /> */}\r\n      <AttrOptions id='attrOpts' optionsArr={props.attributes} toggleValue={toggleValue('selAttr')} />\r\n      <SelectOptions id='charaOpts' heading='Character' optionsArr={props.characters} selected={props.selCharas} toggleValue={toggleValue('selCharas')} />\r\n      <SelectOptions id='outfitOpts' heading='Outfit Type' optionsArr={props.outfitTypes} selected={props.selOutfits} toggleValue={toggleValue('selOutfits')} />\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction AttrOptions(props) {\r\n  const options = props.optionsArr.map(function (option) {\r\n    if (option) {\r\n      return (\r\n        <div key={option}>\r\n          <input type='checkbox' value={option} onClick={props.toggleValue} />\r\n          <label htmlFor={option}>{option}</label>\r\n        </div>\r\n      )\r\n    }\r\n  });\r\n  return (\r\n    <div className='options' id={props.id}>\r\n      <h3>Stat Bonus</h3>\r\n      {options}\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction SelectOptions(props) {\r\n  const options = props.optionsArr.map(function (option) {\r\n    if (option) {\r\n      return (\r\n        <option key={option} value={option}>{option}</option>\r\n      )\r\n    }\r\n  });\r\n  const selected = Array.from(props.selected).map((value) =>\r\n    <ToggleOption key={value} value={value} toggleValue={props.toggleValue} />\r\n  );\r\n  return (\r\n    <div className='options' id={props.id}>\r\n      <h3>{props.heading}</h3>\r\n      <select className='options' onChange={props.toggleValue}>{options}</select>\r\n      <div>{selected}</div>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction ToggleOption(props) {\r\n  return (\r\n    <div className='toggleOpt'>\r\n      <span>{props.value}</span>\r\n      <button className='cancelBtn' value={props.value} onClick={props.toggleValue}>X</button>\r\n    </div>\r\n  )\r\n}\r\n\r\n","export const apiKey = 'AIzaSyBYN0YVkl2lB5ps2CL_74JKIs5TOukXdm4';\r\nexport const spreadsheetId = '1JeHlN1zcBwyBbBkyfsDiiqDZpLotkn770ewa1JCsekU';","import React from 'react';\r\nimport gsx2json from './Gsx2json.js';\r\nimport {apiKey, spreadsheetId} from './sheetsCreds.js';\r\n\r\nexport default class OutfitList extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isLoaded: false,\r\n      outfits: [],\r\n      status: ''\r\n    };\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props.query !== prevProps.query) {\r\n      const sheetId = 'Stat Bonuses';\r\n      fetch(`https://sheets.googleapis.com/v4/spreadsheets/${spreadsheetId}/values/${sheetId}?key=${apiKey}`)\r\n        .then(res => res.json())\r\n        .then(res => {\r\n          this.setState((state, props) => {\r\n            let outfits = gsx2json(res, { query: this.props.stringQuery }); //all outfits that match character/outfit (inclusive)\r\n            //console.log(outfits);\r\n            if (this.props.selAttr.size > 0) {\r\n              for (let i = outfits.length - 1; i >= 0; i--) {\r\n                let queried = false;\r\n                for (let attr of this.props.selAttr) {\r\n                  if (outfits[i][attr.toLowerCase()]) { //inclusive search by attr\r\n                    queried = true;\r\n                    break;\r\n                  }\r\n                  // if (!outfits[i][attr.toLowerCase()]) { //currently only keeps outfits that meet all attr criteria (exclusive)\r\n                  //   outfits.splice(i, 1);\r\n                  //   break;\r\n                  // }\r\n                }\r\n                if (!queried) outfits.splice(i, 1);\r\n              }\r\n            }\r\n            outfits.sort((a, b) => { //sort from highest to lowest queried stat bonus\r\n              let totalBonusA = 0;\r\n              let totalBonusB = 0;\r\n              for (let attr of this.props.selAttr) {\r\n                totalBonusA += a[attr.toLowerCase()];\r\n                totalBonusB += b[attr.toLowerCase()];\r\n              }\r\n              return totalBonusB - totalBonusA;\r\n            })\r\n            return { isLoaded: true, outfits: outfits, status: `${outfits.length} outfits found` }\r\n          })\r\n        });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let body = null;\r\n    if (!this.state.isLoaded) {\r\n      body = <p className='status'>Loading...</p>\r\n    } else {\r\n      const outfits = this.state.outfits.map((elt) =>\r\n        <Outfit key={elt.character + elt.outfit} props={elt} attributes={this.props.attributes} selAttr={this.props.selAttr} />\r\n      );\r\n      body = (<><p className='status'>{this.state.status}</p>{outfits}</>)\r\n    }\r\n    return (\r\n      <div className='outfitList'>\r\n        {body}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nfunction Outfit(props) {\r\n  const properties = props.props;\r\n  // const attr = Object.keys(properties).map(key => { //display all attributes\r\n  //   if (props.attributes.includes(key.charAt(0).toUpperCase() + key.slice(1))) {\r\n  //     return <span key={key + properties[key]}>{`${key.charAt(0).toUpperCase() + key.slice(1)}: ${properties[key]}`}</span>\r\n  //   }\r\n  // });\r\n  const totalBonus = () => { //display total bonus of queried attrs if any have been queried\r\n    if (props.selAttr.size > 0) {\r\n      const total = Array.from(props.selAttr)\r\n        .reduce((accumulator, currVal) => accumulator + properties[currVal.toLowerCase()], 0);\r\n      return <span>{`TOTAL BONUS: ${total}`}</span>;\r\n    }\r\n    else return null;\r\n  }\r\n  return (\r\n    <div className='outfit'>\r\n      <span>{`${properties.character} - ${properties.outfit}`}</span>\r\n      <hr />\r\n      <AttrList attributes={props.attributes} props={props.props} />\r\n      {totalBonus()}\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction AttrList(props) {\r\n  return (\r\n    <div className='attrList'>\r\n      {Object.keys(props.props).map(key => { //display all attributes\r\n        if (props.attributes.includes(key.charAt(0).toUpperCase() + key.slice(1))) {\r\n          return <span key={key + props.props[key]}>{`${key.charAt(0).toUpperCase() + key.slice(1)}: ${props.props[key]}`}</span>\r\n        }\r\n      })\r\n      }\r\n    </div>\r\n  )\r\n}\r\n","export default function gsx2json(data, config = {}) {\n  const query = config.query || []\n  const useIntegers = config.integers || true\n  const inclusiveSearch = config.inclusiveSearch || true; //whether row should match query partially (inclusive) or entirely (exclusive)\n  const responseObj = [];\n  if (data) {\n    var headers = data.values[0];\n    for (var i = 1; i < data.values.length; i++) {\n      var row = data.values[i];\n      var newRow = {};\n      var queried = false;\n      for (var j = 0; j < row.length; j++) {\n        var header = headers[j];\n        var value = row[j];\n        if (query.length) {\n          query.forEach(function (query) {\n            if (value.toLowerCase().indexOf(query.toLowerCase()) > -1) { queried = true }\n          })\n          if (useIntegers === true && !isNaN(value)) {\n            value = Number(value);\n          }\n        }\n        newRow[header.toLowerCase()] = value;\n      }\n      if (queried === true) {\n        responseObj.push(newRow);\n      }\n    }\n    return responseObj;\n  }\n}\n\n","import React from 'react';\r\nimport Sidebar from './Sidebar.js';\r\nimport OutfitList from './OutfitList.js';\r\nimport {apiKey, spreadsheetId} from './sheetsCreds.js';\r\n\r\nexport default class Main extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      characters: [],\r\n      outfitTypes: [],\r\n      attributes: ['Ac', 'Pa', 'Un', 'Sm', 'Te', 'Ch'],\r\n      selCharas: new Set(), //query rows with select characters\r\n      selOutfits: new Set(), //query rows with selected outfits\r\n      selAttr: new Set(), //rows where selAttr > 0\r\n    };\r\n    this.toggleValueInSet = this.toggleValueInSet.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const sheetId = 'Validation Lists';\r\n    //fetch info for sidebar\r\n    fetch(`https://sheets.googleapis.com/v4/spreadsheets/${spreadsheetId}/values/${sheetId}?key=${apiKey}&majorDimension=COLUMNS`)\r\n      .then(result => result.json())\r\n      .then(result => {\r\n        //console.log(result);\r\n        const resultObj = result.values;\r\n        const characters = resultObj.filter((arr) => arr[0] === 'Character');\r\n        const outfitTypes = resultObj.filter((arr) => arr[0] === 'Outfit Type');\r\n        this.setState({ characters: characters[0], outfitTypes: outfitTypes[0] });\r\n      })\r\n  }\r\n\r\n  toggleValueInSet() {\r\n    return (setName) => {\r\n      return (event) => {\r\n        const newSet = this.state[setName];\r\n        if (this.state[setName].has(event.target.value)) {\r\n          newSet.delete(event.target.value);\r\n        }\r\n        else {\r\n          newSet.add(event.target.value);\r\n        }\r\n        this.setState({ [setName]: newSet });\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const sidebarProps = {\r\n      characters: this.state.characters,\r\n      outfitTypes: this.state.outfitTypes,\r\n      attributes: this.state.attributes,\r\n      selCharas: this.state.selCharas,\r\n      selOutfits: this.state.selOutfits,\r\n      toggleValue: this.toggleValueInSet,\r\n    }\r\n    const outfitListProps = {\r\n      query: Array.from(this.state.selCharas).concat(Array.from(this.state.selOutfits), Array.from(this.state.selAttr)),\r\n      stringQuery: Array.from(this.state.selCharas).concat(Array.from(this.state.selOutfits)),\r\n      attributes: this.state.attributes,\r\n      selCharas: this.state.selCharas,\r\n      selOutfits: this.state.selOutfits,\r\n      selAttr: this.state.selAttr,\r\n    }\r\n    return (\r\n      <>\r\n        <OutfitList {...outfitListProps} />\r\n        <Sidebar {...sidebarProps} />\r\n      </>\r\n    )\r\n  }\r\n}","import React from 'react';\nimport Main from './Main.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}