{"version":3,"sources":["Sidebar.js","sheetsCreds.js","OutfitList.js","Gsx2json.js","Main.js","App.js","serviceWorker.js","index.js"],"names":["Sidebar","props","toggleValue","id","className","CheckBoxOptions","heading","optionsArr","attributes","selected","selAttr","mapFunc","option","CheckBox","key","value","SearchType","toggleTrue","toggleFalse","SelectOptions","units","selUnits","clearFilter","characters","selCharas","outfitTiers","selTiers","index","outfitTypes","selOutfits","type","name","onClick","defaultChecked","htmlFor","options","map","indexOf","splice","Array","from","ToggleOptionBtn","ClearFilterButton","defaultValue","onChange","disabled","apiKey","spreadsheetId","OutfitList","state","error","isLoading","hasMore","status","outfits","loadedOutfits","outfitsToLoad","onScroll","bind","loadOutfits","onScrollThrottled","throttle","toggleSidebar","document","querySelector","classList","toggle","prevProps","this","query","setState","fetch","then","res","json","data","config","useIntegers","integers","isInclusive","responseObj","headers","values","length","Set","reduce","accumulator","currentVal","concat","i","row","queried","size","j","has","set","currVal","newRow","header","isNaN","Number","toLowerCase","push","filterGsData","stringQuery","attr","sort","a","b","totalBonusA","totalBonusB","event","persist","target","window","innerHeight","scrollTop","scrollHeight","slice","elt","Outfit","character","outfit","placeholders","React","Component","properties","OutfitImage","imageUrl","imageurl","AttrList","total","totalBonus","Object","keys","includes","charAt","toUpperCase","match","replace","src","Main","toggleValueInSet","toggleSearchTypeTrue","toggleSearchTypeFalse","result","resultObj","filter","arr","newSet","delete","add","sidebarProps","field","isArray","outfitListProps","App","Boolean","location","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.dda25cc7.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default function Sidebar(props) {\r\n  const toggleValue = props.toggleValue();\r\n\r\n  const attrMapFunc = function (option) {\r\n    return <CheckBox key={option} option={option} value={option} toggleValue={toggleValue('selAttr')} />\r\n  };\r\n\r\n  const tierMapFunc = function (option, index) {\r\n    return <CheckBox key={option} option={option} value={index + 1} toggleValue={toggleValue('selTiers')} />\r\n  };\r\n\r\n  return (\r\n    <div id='sidebar' className='toggledOn'>\r\n      {/* <SearchButton /> */}\r\n      <CheckBoxOptions id='attrOpts' heading='Stat Bonus' optionsArr={props.attributes} selected={props.selAttr} toggleValue={toggleValue('selAttr')} mapFunc={attrMapFunc} />\r\n      <div className='options'><p>Filter data by...</p></div>\r\n      <SearchType toggleTrue={props.toggleTrue} toggleFalse={props.toggleFalse} />\r\n      <SelectOptions id='unitOpts' heading='Unit' optionsArr={props.units} selected={props.selUnits} toggleValue={toggleValue('selUnits')} clearFilter={props.clearFilter('selUnits')} />\r\n      <SelectOptions id='charaOpts' heading='Character' optionsArr={props.characters} selected={props.selCharas} toggleValue={toggleValue('selCharas')} clearFilter={props.clearFilter('selCharas')} />\r\n      <CheckBoxOptions id='tierOpts' heading='Outfit Tier' optionsArr={props.outfitTiers} selected={props.selTiers} toggleValue={toggleValue('selTiers')} mapFunc={tierMapFunc} />\r\n      <SelectOptions id='outfitOpts' heading='Outfit Type' optionsArr={props.outfitTypes} selected={props.selOutfits} toggleValue={toggleValue('selOutfits')} clearFilter={props.clearFilter('selOutfits')} />\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction SearchType(props) {\r\n  return (\r\n    <div className='options'>\r\n      <div className='radioBtn'>\r\n        <input type='radio' name='searchType' id='false' onClick={props.toggleFalse} defaultChecked />\r\n        <label htmlFor='false'>Strict match <br /><span className='desc'>(find outfits that match all search criteria)</span></label>\r\n      </div>\r\n      <div className='radioBtn'>\r\n        <input type='radio' name='searchType' id='true' onClick={props.toggleTrue} />\r\n        <label htmlFor='true'>Inclusive match <br /><span className='desc'>(find outfits that match 1 or more criteria)</span></label>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction CheckBoxOptions(props) {\r\n  const options = props.optionsArr.map(props.mapFunc);\r\n  \r\n  return (\r\n    <div className='options' id={props.id}>\r\n      <div className='row'><p>{props.heading}</p></div>\r\n      <div className='row'>{options}</div>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction CheckBox(props) {\r\n  return (\r\n    <div>\r\n      <input type='checkbox' value={props.value} onClick={props.toggleValue} />\r\n      <label htmlFor={props.option}>{props.option}</label>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction SelectOptions(props) {\r\n  if (props.optionsArr.indexOf(props.heading) > -1) { props.optionsArr.splice(props.optionsArr.indexOf(props.heading), 1, '') }\r\n  const options = props.optionsArr.map(function (option) {\r\n    if (option) { return <option key={option} value={option}>{option}</option> }\r\n  });\r\n  const selected = Array.from(props.selected).map((value) =>\r\n    <ToggleOptionBtn key={value} value={value} toggleValue={props.toggleValue} />\r\n  );\r\n\r\n  return (\r\n    <div className='options' id={props.id}>\r\n      <div className='row'>\r\n        <p>{props.heading}</p>\r\n        <ClearFilterButton clearFilter={props.clearFilter} />\r\n      </div>\r\n      <select className='row' defaultValue='none' onChange={props.toggleValue}>\r\n        <option disabled value='none'>(select an option)</option>\r\n        {options}\r\n      </select>\r\n      <div>{selected}</div>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction ClearFilterButton(props) {\r\n  return (\r\n    <div className='clearFilter'>\r\n      <button className='clearBtn' onClick={props.clearFilter}>Clear</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction ToggleOptionBtn(props) {\r\n  return (\r\n    <div className='toggleOpt'>\r\n      <span>{props.value}</span>\r\n      <button className='cancelBtn' value={props.value} onClick={props.toggleValue}>X</button>\r\n    </div>\r\n  )\r\n}\r\n\r\n","export const apiKey = 'AIzaSyBYN0YVkl2lB5ps2CL_74JKIs5TOukXdm4';\r\nexport const spreadsheetId = '1JeHlN1zcBwyBbBkyfsDiiqDZpLotkn770ewa1JCsekU';","import React from 'react';\r\nimport filterGsData from './Gsx2json.js';\r\nimport { apiKey, spreadsheetId } from './sheetsCreds.js';\r\nimport throttle from 'lodash.throttle';\r\n\r\nexport default class OutfitList extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      error: false,\r\n      isLoading: false,\r\n      hasMore: true,\r\n      status: '',\r\n      outfits: [],\r\n      loadedOutfits: [],\r\n      outfitsToLoad: 20,\r\n    };\r\n    this.onScroll = this.onScroll.bind(this);\r\n    this.loadOutfits = this.loadOutfits.bind(this);\r\n    this.onScrollThrottled = throttle(this.onScroll, 100);\r\n    this.toggleSidebar = () => {\r\n      document.querySelector('#sidebar').classList.toggle('toggledOn');\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props.query !== prevProps.query) {\r\n      //console.log(this.props.stringQuery);\r\n      this.setState({ status: 'Loading...' }, () => {\r\n        const sheetId = 'Stat Bonuses';\r\n        fetch(`https://sheets.googleapis.com/v4/spreadsheets/${spreadsheetId}/values/${sheetId}?key=${apiKey}`)\r\n          .then(res => res.json())\r\n          .then(res => {\r\n            let outfits = filterGsData(res, { query: this.props.stringQuery, isInclusive: this.props.isInclusive }); //all outfits that match character/outfit (inclusive)\r\n            //console.log(outfits);\r\n            if (this.props.selAttr.size > 0) {\r\n              for (let i = outfits.length - 1; i >= 0; i--) {\r\n                let queried = false;\r\n                for (let attr of this.props.selAttr) {\r\n                  if (outfits[i][attr.toLowerCase()]) { //inclusive search by attr\r\n                    queried = true;\r\n                    break;\r\n                  }\r\n                  //if (!outfits[i][attr.toLowerCase()]) { //currently only keeps outfits that meet all attr criteria (exclusive)\r\n                  //  outfits.splice(i, 1);\r\n                  //  break;\r\n                  //}\r\n                }\r\n                if (!queried) outfits.splice(i, 1);\r\n              }\r\n            }\r\n            outfits.sort((a, b) => { //sort from highest to lowest queried stat bonus\r\n              let totalBonusA = 0;\r\n              let totalBonusB = 0;\r\n              for (let attr of this.props.selAttr) {\r\n                totalBonusA += a[attr.toLowerCase()];\r\n                totalBonusB += b[attr.toLowerCase()];\r\n              }\r\n              return totalBonusB - totalBonusA;\r\n            })\r\n            return { outfits: outfits, loadedOutfits: [], status: `${outfits.length} outfits found` }\r\n          })\r\n          .then(res => { this.setState(res, this.loadOutfits) });\r\n      });\r\n    }\r\n  }\r\n\r\n  //modified from this tutorial: https://alligator.io/react/react-infinite-scroll/\r\n  //and also this https://blog.bitsrc.io/improve-your-react-app-performance-by-using-throttling-and-debouncing-101afbe9055\r\n  onScroll(event) {\r\n    event.persist() //didn't work without this \r\n\r\n    //Bails early if:\r\n    //* it's already loading\r\n    //* there's nothing left to load\r\n    //console.log(this.state.isLoading, this.state.hasMore);\r\n    if (this.state.isLoading || !this.state.hasMore) { return; }\r\n\r\n    //Checks that the page has scrolled to the bottom\r\n    if (event.target) {\r\n      if (window.innerHeight + event.target.scrollTop >= event.target.scrollHeight - 600) {\r\n        //console.log('loading more');\r\n        this.loadOutfits();\r\n      }\r\n    }\r\n  }\r\n\r\n  loadOutfits() {\r\n    this.setState({ isLoading: true }, () => {\r\n      this.setState((state, props) => {\r\n        //console.log('initial loaded outfits', state.loadedOutfits);\r\n        let loadedOutfits = state.loadedOutfits;\r\n        loadedOutfits = loadedOutfits.concat(state.outfits.slice(state.loadedOutfits.length, state.loadedOutfits.length + state.outfitsToLoad));\r\n        const hasMore = loadedOutfits.length < state.outfits.length;\r\n        //console.log('after loadOutfits', loadedOutfits);\r\n        return { hasMore: hasMore, isLoading: false, loadedOutfits: loadedOutfits };\r\n      });\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const outfits = this.state.loadedOutfits.map((elt) =>\r\n      <Outfit key={elt.character + elt.outfit} props={elt} attributes={this.props.attributes} selAttr={this.props.selAttr} />\r\n    );\r\n    //console.log('finished loading outfit list', performance.now())\r\n    let placeholders = [];\r\n    for (let i=0; i<4; i ++) {\r\n      placeholders.push(<div key={i} className=\"outfit-placeholder\"></div>)\r\n    }\r\n    return (\r\n      <div className='pageContent' onScroll={this.onScrollThrottled}>\r\n        <div id='toggleSidebarBtn' onClick={this.toggleSidebar}></div>\r\n        <p className='status'>{this.state.status}</p>\r\n        <div id='outfitList'>\r\n          {outfits}\r\n          {placeholders}\r\n        </div>\r\n        {!this.state.hasMore &&\r\n          <p className='status'>End of results</p>\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nfunction Outfit(props) {\r\n  const properties = props.props;\r\n  //const attr = Object.keys(properties).map(key => { //display all attributes\r\n  //  if (props.attributes.includes(key.charAt(0).toUpperCase() + key.slice(1))) {\r\n  //    return <span key={key + properties[key]}>{`${key.charAt(0).toUpperCase() + key.slice(1)}: ${properties[key]}`}</span>\r\n  //  }\r\n  //});\r\n  const totalBonus = () => { //display total bonus of queried attrs if any have been queried\r\n    if (props.selAttr.size > 0) {\r\n      const total = Array.from(props.selAttr)\r\n        .reduce((accumulator, currVal) => accumulator + properties[currVal.toLowerCase()], 0);\r\n      return <span>{`TOTAL BONUS: ${total}`}</span>;\r\n    }\r\n    else return null;\r\n  }\r\n  return (\r\n    <div className='outfit'>\r\n      <p>{properties.character}</p>\r\n      <p>{properties.outfit}</p>\r\n      <hr />\r\n      <div className='rowContainer'>\r\n        <OutfitImage imageUrl={properties.imageurl} />\r\n        <AttrList attributes={props.attributes} props={props.props} />\r\n        </div>\r\n      {totalBonus()}\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction AttrList(props) {\r\n  return (\r\n    <div className='attrList'>\r\n      {Object.keys(props.props).map(key => { //display all attributes\r\n        if (props.attributes.includes(key.charAt(0).toUpperCase() + key.slice(1))) {\r\n          return <p className='attr' key={key + props.props[key]}>{`${key.charAt(0).toUpperCase() + key.slice(1)}: ${props.props[key]}`}</p>\r\n        }\r\n      })\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction OutfitImage(props) {\r\n  //props link looks like this https://drive.google.com/open?id=IMAGE_ID\r\n  //or it could look like this https://drive.google.com/file/d/IMAGE_ID/view?usp=drivesdk\r\n  //need to change it to be https://drive.google.com/thumbnail?&id=IMAGE_ID\r\n  let imageUrl = null;\r\n  //console.log(props.imageUrl);\r\n  if (props.imageUrl) {\r\n    if (props.imageUrl.match(/https:\\/\\/drive.google.com\\/file\\/d\\/.+\\/view\\?usp=drivesdk/)) {\r\n      imageUrl = props.imageUrl.replace('/view?usp=drivesdk', '');\r\n      imageUrl = imageUrl.replace('file/d/', 'thumbnail?&id=');\r\n    }\r\n    else if (props.imageUrl.match(/https:\\/\\/drive.google.com\\/open\\?id=.+/)) {\r\n      imageUrl = props.imageUrl.replace('open', 'thumbnail');\r\n    }\r\n  }\r\n  return <img className='outfitImg' src={imageUrl} />\r\n}\r\n","export default function filterGsData(data, config = {}) {\r\n  let query = config.query || []; //array of arrays of values selected for each filter\r\n  const useIntegers = config.integers || true;\r\n  const isInclusive = config.isInclusive || false; //whether row should match query partially (inclusive) or entirely (exclusive)\r\n  const responseObj = [];\r\n  // console.log('is inclusive: ' + isInclusive);\r\n  if (data) {\r\n    const headers = data.values[0];\r\n    //if inclusive search queries don't need to be grouped\r\n    if (isInclusive && query.length) { query = new Set( query.reduce( ( accumulator, currentVal ) => accumulator.concat( [...currentVal] ), [] ) ) }\r\n    // console.log(query);\r\n    for (let i = 1; i < data.values.length; i++) { //iterate over array of rows\r\n      const row = data.values[i];\r\n      let queried = false;\r\n      if (query.size === 0 || query.length === 0) { queried = true; } //if no query just push all rows\r\n      else if (isInclusive) {\r\n        for (let j = 0; j < row.length; j++) { //if any query is found in row queried = true\r\n          if (query.has(row[j])) { queried = true; break }\r\n        }\r\n      }\r\n      else { //exclusive search\r\n        const result = query.map((set) => { //for each filter, check if any query is found in row \r\n          for (let j = 0; j < row.length; j++) { //if any query is found in row queried = true\r\n            if (set.has(row[j])) { return true }\r\n          }\r\n        });\r\n        //if any query is not found in row queried = false\r\n        queried = result.reduce(function (accumulator, currVal) { return accumulator && currVal }, true);\r\n      }\r\n      if (queried) {\r\n        const newRow = {};\r\n        for (let j = 0; j < row.length; j++) { //iterate over values in each row to add headers\r\n          const header = headers[j];\r\n          let value = row[j];\r\n          if (useIntegers === true && !isNaN(value)) {\r\n            value = Number(value);\r\n          }\r\n          newRow[header.toLowerCase()] = value;\r\n        }\r\n        responseObj.push(newRow);\r\n      }\r\n    }\r\n    // console.log(responseObj);\r\n    return responseObj;\r\n  }\r\n}\r\n\r\n","import React from 'react';\r\nimport Sidebar from './Sidebar.js';\r\nimport OutfitList from './OutfitList.js';\r\nimport { apiKey, spreadsheetId } from './sheetsCreds.js';\r\n\r\nexport default class Main extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      characters: [],\r\n      units: [],\r\n      outfitTypes: [],\r\n      outfitTiers: ['Tier I', 'Tier II', 'Tier III'],\r\n      attributes: ['Ac', 'Pa', 'Un', 'Sm', 'Te', 'Ch'],\r\n      selCharas: new Set(),\r\n      selOutfits: new Set(), \r\n      selUnits: new Set(), \r\n      selTiers: new Set(),\r\n      selAttr: new Set(), //rows where selAttr > 0\r\n      isInclusive: false,\r\n    };\r\n    this.toggleValueInSet = this.toggleValueInSet.bind(this);\r\n    this.toggleSearchTypeTrue = this.toggleSearchTypeTrue.bind(this);\r\n    this.toggleSearchTypeFalse = this.toggleSearchTypeFalse.bind(this);\r\n    this.clearFilter = this.clearFilter.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const sheetId = 'Validation Lists';\r\n    //fetch info for sidebar\r\n    fetch(`https://sheets.googleapis.com/v4/spreadsheets/${spreadsheetId}/values/${sheetId}?key=${apiKey}&majorDimension=COLUMNS`)\r\n      .then(result => result.json())\r\n      .then(result => {\r\n        const resultObj = result.values;\r\n        const characters = resultObj.filter((arr) => arr[0] === 'Character');\r\n        const outfitTypes = resultObj.filter((arr) => arr[0] === 'Outfit Type');\r\n        const units = resultObj.filter((arr) => arr[0] === 'Unit');\r\n        this.setState({ characters: characters[0], outfitTypes: outfitTypes[0], units: units[0] });\r\n      })\r\n  }\r\n\r\n  toggleSearchTypeTrue () {\r\n    this.setState({isInclusive: true})\r\n  }\r\n\r\n  toggleSearchTypeFalse () {\r\n    this.setState({isInclusive: false})\r\n  }\r\n\r\n  toggleValueInSet() {\r\n    return (filter) => {\r\n      return (event) => {\r\n        const newSet = this.state[filter];\r\n        if (this.state[filter].has(event.target.value)) {\r\n          newSet.delete(event.target.value);\r\n        }\r\n        else {\r\n          newSet.add(event.target.value);\r\n        }\r\n        this.setState({ [filter]: newSet });\r\n      }\r\n    }\r\n  }\r\n\r\n  clearFilter(filter) {\r\n    return () => this.setState( {[filter]: new Set()})\r\n  }\r\n\r\n  render() {\r\n    //console.log('render main component', performance.now())\r\n    const sidebarProps = {\r\n      characters: this.state.characters, //render selects and attributes check boxes\r\n      outfitTypes: this.state.outfitTypes,\r\n      units: this.state.units,\r\n      outfitTiers: this.state.outfitTiers,\r\n      attributes: this.state.attributes,\r\n      selAttr: this.state.selAttr, //needed to toggle checkboxes\r\n      selTiers: this.state.selTiers,\r\n      selCharas: this.state.selCharas, //needed to render ToggleButtons\r\n      selOutfits: this.state.selOutfits,\r\n      selUnits: this.state.selUnits,\r\n      toggleValue: this.toggleValueInSet,\r\n      toggleTrue: this.toggleSearchTypeTrue,\r\n      toggleFalse: this.toggleSearchTypeFalse,\r\n      clearFilter: this.clearFilter,\r\n    }\r\n    const query = Object.keys(this.state).reduce((accumulator, key) => { //concat values in Sets that hold selected values\r\n      const field = this.state[key];\r\n      if (!Array.isArray(field)) { return accumulator.concat(Array.from(field)); }\r\n      else return accumulator.concat([]);\r\n    }, []);\r\n    query.push(this.state.isInclusive);\r\n    const stringQuery = Object.keys(this.state).reduce((accumulator, key) => { //create array of Sets that hold selected values\r\n      const field = this.state[key];\r\n      if (!Array.isArray(field) && typeof(field) === 'object' && key !== 'selAttr' && field.size > 0) {accumulator.push(field); return accumulator}\r\n      else return accumulator;\r\n    }, []);\r\n    const outfitListProps = {\r\n      query: query,\r\n      stringQuery: stringQuery,\r\n      attributes: this.state.attributes,\r\n      selAttr: this.state.selAttr,\r\n      isInclusive: this.state.isInclusive,\r\n    }\r\n    return (\r\n      <>\r\n        <Sidebar {...sidebarProps} />\r\n        <OutfitList {...outfitListProps} />\r\n        \r\n      </>\r\n    )\r\n  }\r\n}","import React from 'react';\r\nimport Main from './Main.js';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Main />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}